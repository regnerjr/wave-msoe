
myBranch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000020a8  0000213c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000056b  0080006a  0080006a  00002146  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002146  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ee  00000000  00000000  00002166  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f38  00000000  00000000  00002554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f2  00000000  00000000  0000348c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011d4  00000000  00000000  0000377e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00004954  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000508  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bcc  00000000  00000000  000050fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00005cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__ctors_end>
       4:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       8:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
       c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      10:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      14:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      18:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      1c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      20:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      24:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      28:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__vector_10>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      30:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      34:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_13>
      38:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      3c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      40:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_16>
      44:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      48:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      4c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      50:	0c 94 05 01 	jmp	0x20a	; 0x20a <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <ConvertVoltageSamplesToVolts+0x44>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	00 40       	sbci	r16, 0x00	; 0
      d8:	7a 10       	cpse	r7, r10
      da:	f3 5a       	subi	r31, 0xA3	; 163
      dc:	00 a0       	ldd	r0, Z+32	; 0x20
      de:	72 4e       	sbci	r23, 0xE2	; 226
      e0:	18 09       	sbc	r17, r8
      e2:	00 10       	cpse	r0, r0
      e4:	a5 d4       	rcall	.+2378   	; 0xa30 <__vector_10+0xc>
      e6:	e8 00       	.word	0x00e8	; ????
      e8:	00 e8       	ldi	r16, 0x80	; 128
      ea:	76 48       	sbci	r23, 0x86	; 134
      ec:	17 00       	.word	0x0017	; ????
      ee:	00 e4       	ldi	r16, 0x40	; 64
      f0:	0b 54       	subi	r16, 0x4B	; 75
      f2:	02 00       	.word	0x0002	; ????
      f4:	00 ca       	rjmp	.-3072   	; 0xfffff4f6 <__eeprom_end+0xff7ef4f6>
      f6:	9a 3b       	cpi	r25, 0xBA	; 186
      f8:	00 00       	nop
      fa:	00 e1       	ldi	r16, 0x10	; 16
      fc:	f5 05       	cpc	r31, r5
      fe:	00 00       	nop
     100:	80 96       	adiw	r24, 0x20	; 32
     102:	98 00       	.word	0x0098	; ????
     104:	00 00       	nop
     106:	40 42       	sbci	r20, 0x20	; 32
     108:	0f 00       	.word	0x000f	; ????
     10a:	00 00       	nop
     10c:	a0 86       	std	Z+8, r10	; 0x08
     10e:	01 00       	.word	0x0001	; ????
     110:	00 00       	nop
     112:	10 27       	eor	r17, r16
     114:	00 00       	nop
     116:	00 00       	nop
     118:	e8 03       	fmulsu	r22, r16
     11a:	00 00       	nop
     11c:	00 00       	nop
     11e:	64 00       	.word	0x0064	; ????
     120:	00 00       	nop
     122:	00 00       	nop
     124:	0a 00       	.word	0x000a	; ????
     126:	00 00       	nop
     128:	00 00       	nop
     12a:	01 00       	.word	0x0001	; ????
     12c:	00 00       	nop
     12e:	00 00       	nop
     130:	2c 76       	andi	r18, 0x6C	; 108
     132:	d8 88       	ldd	r13, Y+16	; 0x10
     134:	dc 67       	ori	r29, 0x7C	; 124
     136:	4f 08       	sbc	r4, r15
     138:	23 df       	rcall	.-442    	; 0xffffff80 <__eeprom_end+0xff7eff80>
     13a:	c1 df       	rcall	.-126    	; 0xbe <__SREG__+0x7f>
     13c:	ae 59       	subi	r26, 0x9E	; 158
     13e:	e1 b1       	in	r30, 0x01	; 1
     140:	b7 96       	adiw	r30, 0x27	; 39
     142:	e5 e3       	ldi	r30, 0x35	; 53
     144:	e4 53       	subi	r30, 0x34	; 52
     146:	c6 3a       	cpi	r28, 0xA6	; 166
     148:	e6 51       	subi	r30, 0x16	; 22
     14a:	99 76       	andi	r25, 0x69	; 105
     14c:	96 e8       	ldi	r25, 0x86	; 134
     14e:	e6 c2       	rjmp	.+1484   	; 0x71c <ConvertCurrentSamplesToAmps+0x46>
     150:	84 26       	eor	r8, r20
     152:	eb 89       	ldd	r30, Y+19	; 0x13
     154:	8c 9b       	sbis	0x11, 4	; 17
     156:	62 ed       	ldi	r22, 0xD2	; 210
     158:	40 7c       	andi	r20, 0xC0	; 192
     15a:	6f fc       	.word	0xfc6f	; ????
     15c:	ef bc       	out	0x2f, r14	; 47
     15e:	9c 9f       	mul	r25, r28
     160:	40 f2       	brcs	.-112    	; 0xf2 <__SREG__+0xb3>
     162:	ba a5       	ldd	r27, Y+42	; 0x2a
     164:	6f a5       	ldd	r22, Y+47	; 0x2f
     166:	f4 90       	lpm	r15, Z+
     168:	05 5a       	subi	r16, 0xA5	; 165
     16a:	2a f7       	brpl	.-54     	; 0x136 <__SREG__+0xf7>
     16c:	5c 93       	st	X, r21
     16e:	6b 6c       	ori	r22, 0xCB	; 203
     170:	f9 67       	ori	r31, 0x79	; 121
     172:	6d c1       	rjmp	.+730    	; 0x44e <lcd_print_int8+0x34>
     174:	1b fc       	.word	0xfc1b	; ????
     176:	e0 e4       	ldi	r30, 0x40	; 64
     178:	0d 47       	sbci	r16, 0x7D	; 125
     17a:	fe f5       	brtc	.+126    	; 0x1fa <.do_clear_bss_loop>
     17c:	20 e6       	ldi	r18, 0x60	; 96
     17e:	b5 00       	.word	0x00b5	; ????
     180:	d0 ed       	ldi	r29, 0xD0	; 208
     182:	90 2e       	mov	r9, r16
     184:	03 00       	.word	0x0003	; ????
     186:	94 35       	cpi	r25, 0x54	; 84
     188:	77 05       	cpc	r23, r7
     18a:	00 80       	ld	r0, Z
     18c:	84 1e       	adc	r8, r20
     18e:	08 00       	.word	0x0008	; ????
     190:	00 20       	and	r0, r0
     192:	4e 0a       	sbc	r4, r30
     194:	00 00       	nop
     196:	00 c8       	rjmp	.-4096   	; 0xfffff198 <__eeprom_end+0xff7ef198>
     198:	0c 33       	cpi	r16, 0x3C	; 60
     19a:	33 33       	cpi	r19, 0x33	; 51
     19c:	33 0f       	add	r19, r19
     19e:	98 6e       	ori	r25, 0xE8	; 232
     1a0:	12 83       	std	Z+2, r17	; 0x02
     1a2:	11 41       	sbci	r17, 0x11	; 17
     1a4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1a6:	21 14       	cp	r2, r1
     1a8:	89 3b       	cpi	r24, 0xB9	; 185
     1aa:	e6 55       	subi	r30, 0x56	; 86
     1ac:	16 cf       	rjmp	.-468    	; 0xffffffda <__eeprom_end+0xff7effda>
     1ae:	fe e6       	ldi	r31, 0x6E	; 110
     1b0:	db 18       	sub	r13, r11
     1b2:	d1 84       	ldd	r13, Z+9	; 0x09
     1b4:	4b 38       	cpi	r20, 0x8B	; 139
     1b6:	1b f7       	brvc	.-58     	; 0x17e <__SREG__+0x13f>
     1b8:	7c 1d       	adc	r23, r12
     1ba:	90 1d       	adc	r25, r0
     1bc:	a4 bb       	out	0x14, r26	; 20
     1be:	e4 24       	eor	r14, r4
     1c0:	20 32       	cpi	r18, 0x20	; 32
     1c2:	84 72       	andi	r24, 0x24	; 36
     1c4:	5e 22       	and	r5, r30
     1c6:	81 00       	.word	0x0081	; ????
     1c8:	c9 f1       	breq	.+114    	; 0x23c <delay_ms+0x2>
     1ca:	24 ec       	ldi	r18, 0xC4	; 196
     1cc:	a1 e5       	ldi	r26, 0x51	; 81
     1ce:	3d 27       	eor	r19, r29

000001d0 <__ctors_end>:
     1d0:	11 24       	eor	r1, r1
     1d2:	1f be       	out	0x3f, r1	; 63
     1d4:	cf e5       	ldi	r28, 0x5F	; 95
     1d6:	d8 e0       	ldi	r29, 0x08	; 8
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	cd bf       	out	0x3d, r28	; 61

000001dc <__do_copy_data>:
     1dc:	10 e0       	ldi	r17, 0x00	; 0
     1de:	a0 e6       	ldi	r26, 0x60	; 96
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e8 ea       	ldi	r30, 0xA8	; 168
     1e4:	f0 e2       	ldi	r31, 0x20	; 32
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <.do_copy_data_start>

000001e8 <.do_copy_data_loop>:
     1e8:	05 90       	lpm	r0, Z+
     1ea:	0d 92       	st	X+, r0

000001ec <.do_copy_data_start>:
     1ec:	aa 36       	cpi	r26, 0x6A	; 106
     1ee:	b1 07       	cpc	r27, r17
     1f0:	d9 f7       	brne	.-10     	; 0x1e8 <.do_copy_data_loop>

000001f2 <__do_clear_bss>:
     1f2:	15 e0       	ldi	r17, 0x05	; 5
     1f4:	aa e6       	ldi	r26, 0x6A	; 106
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <.do_clear_bss_start>

000001fa <.do_clear_bss_loop>:
     1fa:	1d 92       	st	X+, r1

000001fc <.do_clear_bss_start>:
     1fc:	a5 3d       	cpi	r26, 0xD5	; 213
     1fe:	b1 07       	cpc	r27, r17
     200:	e1 f7       	brne	.-8      	; 0x1fa <.do_clear_bss_loop>
     202:	0e 94 a1 07 	call	0xf42	; 0xf42 <main>
     206:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <exit>

0000020a <__bad_interrupt>:
     20a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000020e <delay_us>:
// max value for us is 65535/4*CYCLES_PER_US
// which is app. 17777 for 14.7456MHZ
void delay_us(uint16_t us)
{
	uint16_t _count;
	_count=us/4*CYCLES_PER_US;
     20e:	96 95       	lsr	r25
     210:	87 95       	ror	r24
     212:	96 95       	lsr	r25
     214:	87 95       	ror	r24
     216:	a0 e0       	ldi	r26, 0x00	; 0
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	bc 01       	movw	r22, r24
     21c:	cd 01       	movw	r24, r26
     21e:	0e 94 11 0b 	call	0x1622	; 0x1622 <__floatunsisf>
     222:	20 e0       	ldi	r18, 0x00	; 0
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	51 e4       	ldi	r21, 0x41	; 65
     22a:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3>
     22e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fixunssfsi>
	
	asm volatile (
     232:	cb 01       	movw	r24, r22
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <delay_us+0x26>
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (_count)
		: "0" (_count)
	);
}
     238:	08 95       	ret

0000023a <delay_ms>:
#include <inttypes.h>

// delay for ms milli-seconds 
// delay times are only half-way accurate if optimization is turned on!
void delay_ms(uint16_t ms) 
{
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	00 d0       	rcall	.+0      	; 0x240 <delay_ms+0x6>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	07 c0       	rjmp	.+14     	; 0x254 <delay_ms+0x1a>
	volatile uint16_t i;

	for(i=ms;i>0;i--)
	{
		delay_us(1000);
     246:	88 ee       	ldi	r24, 0xE8	; 232
     248:	93 e0       	ldi	r25, 0x03	; 3
     24a:	0e 94 07 01 	call	0x20e	; 0x20e <delay_us>
// delay times are only half-way accurate if optimization is turned on!
void delay_ms(uint16_t ms) 
{
	volatile uint16_t i;

	for(i=ms;i>0;i--)
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	9a 81       	ldd	r25, Y+2	; 0x02
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	9a 83       	std	Y+2, r25	; 0x02
     256:	89 83       	std	Y+1, r24	; 0x01
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	9a 81       	ldd	r25, Y+2	; 0x02
     25c:	89 2b       	or	r24, r25
     25e:	99 f7       	brne	.-26     	; 0x246 <delay_ms+0xc>
	{
		delay_us(1000);
	}
} 
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	cf 91       	pop	r28
     266:	df 91       	pop	r29
     268:	08 95       	ret

0000026a <lcd_port_init>:
// sets the 4 upper bits of the data port (i.e. the LCD data is always connected
// to the upper 4 bits of a port)
// sets the control port (this could be anywhere)
void lcd_port_init(void)
{
	sbi(LCD_DATA_DDR,7);						// set pin 7-4 of LCD data port to output
     26a:	a7 9a       	sbi	0x14, 7	; 20
	sbi(LCD_DATA_DDR,6);
     26c:	a6 9a       	sbi	0x14, 6	; 20
	sbi(LCD_DATA_DDR,5);
     26e:	a5 9a       	sbi	0x14, 5	; 20
	sbi(LCD_DATA_DDR,4);
     270:	a4 9a       	sbi	0x14, 4	; 20

	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);			// clear bits of control port
     272:	aa 98       	cbi	0x15, 2	; 21
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);
     274:	a9 98       	cbi	0x15, 1	; 21
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);
     276:	a8 98       	cbi	0x15, 0	; 21


	sbi(LCD_CTRL_DDR,LCD_CTRL_RS);				// set pins of control port to output
     278:	a2 9a       	sbi	0x14, 2	; 20
	sbi(LCD_CTRL_DDR,LCD_CTRL_RW);
     27a:	a1 9a       	sbi	0x14, 1	; 20
	sbi(LCD_CTRL_DDR,LCD_CTRL_E);
     27c:	a0 9a       	sbi	0x14, 0	; 20
}
     27e:	08 95       	ret

00000280 <lcd_cmd_write>:

// sends a command byte to LCD
void lcd_cmd_write(uint8_t cmd)
{
     280:	1f 93       	push	r17
     282:	18 2f       	mov	r17, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_RS);						// lower RS -> command follows
     284:	aa 98       	cbi	0x15, 2	; 21
	delay_ms(2);
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     28e:	a8 9a       	sbi	0x15, 0	; 21
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd&0xF0);		// send upper nibble
     290:	85 b3       	in	r24, 0x15	; 21
     292:	91 2f       	mov	r25, r17
     294:	90 7f       	andi	r25, 0xF0	; 240
     296:	8f 70       	andi	r24, 0x0F	; 15
     298:	98 2b       	or	r25, r24
     29a:	95 bb       	out	0x15, r25	; 21
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     29c:	a8 98       	cbi	0x15, 0	; 21
	delay_ms(2);										// wait 2ms so display uploads data
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>
														// some commands take more than 1ms

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     2a6:	a8 9a       	sbi	0x15, 0	; 21
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((cmd<<4)&0xF0);	// send lower nibble
     2a8:	85 b3       	in	r24, 0x15	; 21
     2aa:	12 95       	swap	r17
     2ac:	10 7f       	andi	r17, 0xF0	; 240
     2ae:	8f 70       	andi	r24, 0x0F	; 15
     2b0:	81 2b       	or	r24, r17
     2b2:	85 bb       	out	0x15, r24	; 21
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     2b4:	a8 98       	cbi	0x15, 0	; 21
	delay_ms(2);										// wait 2ms so display uploads data
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_RS);						// raise RS end of command
     2be:	aa 9a       	sbi	0x15, 2	; 21
	delay_ms(2);
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>
}
     2c8:	1f 91       	pop	r17
     2ca:	08 95       	ret

000002cc <lcd_init>:
//  - init PORT DDR and PINS
//  - set two line display
//  - clear display and set cursor to home
void lcd_init(void)
{
	delay_ms(100);			// wait 100ms for the LCD to come out of RESET
     2cc:	84 e6       	ldi	r24, 0x64	; 100
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>
	lcd_port_init();		// init the port pins
     2d4:	0e 94 35 01 	call	0x26a	; 0x26a <lcd_port_init>
	lcd_cmd_write(0x33);	// init LCD to 4-bit interface
     2d8:	83 e3       	ldi	r24, 0x33	; 51
     2da:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
	lcd_cmd_write(0x32);	// init LCD to 4-bit interface
     2de:	82 e3       	ldi	r24, 0x32	; 50
     2e0:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
	lcd_cmd_write(0x28);	// set two-line display
     2e4:	88 e2       	ldi	r24, 0x28	; 40
     2e6:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
	lcd_cmd_write(0x0C);
     2ea:	8c e0       	ldi	r24, 0x0C	; 12
     2ec:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
	lcd_cmd_write(0x06);
     2f0:	86 e0       	ldi	r24, 0x06	; 6
     2f2:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
	lcd_cmd_write(LCD_CLR);	// clear display
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
	lcd_cmd_write(LCD_HOME);
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
}
     302:	08 95       	ret

00000304 <lcd_data_write>:
	delay_ms(2);
}

// sends a data byte to LCD
void lcd_data_write(uint8_t data)
{
     304:	1f 93       	push	r17
     306:	18 2f       	mov	r17, r24
	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     308:	a8 9a       	sbi	0x15, 0	; 21
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);		// send upper nibble
     30a:	85 b3       	in	r24, 0x15	; 21
     30c:	91 2f       	mov	r25, r17
     30e:	90 7f       	andi	r25, 0xF0	; 240
     310:	8f 70       	andi	r24, 0x0F	; 15
     312:	98 2b       	or	r25, r24
     314:	95 bb       	out	0x15, r25	; 21
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     316:	a8 98       	cbi	0x15, 0	; 21
	delay_ms(2);										// wait 1ms so display uploads data
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     320:	a8 9a       	sbi	0x15, 0	; 21
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((data<<4)&0xF0);// send lower nibble
     322:	85 b3       	in	r24, 0x15	; 21
     324:	12 95       	swap	r17
     326:	10 7f       	andi	r17, 0xF0	; 240
     328:	8f 70       	andi	r24, 0x0F	; 15
     32a:	81 2b       	or	r24, r17
     32c:	85 bb       	out	0x15, r24	; 21
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     32e:	a8 98       	cbi	0x15, 0	; 21
	delay_ms(2);										// wait 1ms so display uploads data
     330:	82 e0       	ldi	r24, 0x02	; 2
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>
}
     338:	1f 91       	pop	r17
     33a:	08 95       	ret

0000033c <lcd_goto_xy>:
// sets LCD cursor to position x,y
void lcd_goto_xy(uint8_t x,uint8_t y)
{
	uint8_t DDRAMAddr;
	 
	switch(y)							// get the right starting address for the line
     33c:	62 30       	cpi	r22, 0x02	; 2
     33e:	31 f0       	breq	.+12     	; 0x34c <lcd_goto_xy+0x10>
     340:	63 30       	cpi	r22, 0x03	; 3
     342:	31 f0       	breq	.+12     	; 0x350 <lcd_goto_xy+0x14>
     344:	61 30       	cpi	r22, 0x01	; 1
     346:	29 f4       	brne	.+10     	; 0x352 <lcd_goto_xy+0x16>
	{									// and add offset for x position
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     348:	80 5c       	subi	r24, 0xC0	; 192
     34a:	03 c0       	rjmp	.+6      	; 0x352 <lcd_goto_xy+0x16>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     34c:	8c 5e       	subi	r24, 0xEC	; 236
     34e:	01 c0       	rjmp	.+2      	; 0x352 <lcd_goto_xy+0x16>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     350:	8c 5a       	subi	r24, 0xAC	; 172
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
	}

	// set data address
	lcd_cmd_write(1<<LCD_DDRAM | DDRAMAddr);
     352:	80 68       	ori	r24, 0x80	; 128
     354:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
}
     358:	08 95       	ret

0000035a <lcd_clear>:

// clears LCD display
void lcd_clear(void)
{
	lcd_cmd_write(LCD_CLR);		// clear display
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
}
     360:	08 95       	ret

00000362 <lcd_home>:

// sets LCD cursor to home
void lcd_home(void)
{
	lcd_cmd_write(LCD_HOME);	// cursor home
     362:	82 e0       	ldi	r24, 0x02	; 2
     364:	0e 94 40 01 	call	0x280	; 0x280 <lcd_cmd_write>
}
     368:	08 95       	ret

0000036a <lcd_print_char>:

// prints a char
void lcd_print_char(uint8_t symbol)
{
	lcd_data_write(symbol);
     36a:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
}
     36e:	08 95       	ret

00000370 <lcd_print_string>:

// prints a null-terminated string on LCD
void lcd_print_string(char *string)
{
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	ec 01       	movw	r28, r24
     376:	03 c0       	rjmp	.+6      	; 0x37e <lcd_print_string+0xe>
	while(*string!=0)
	{
		lcd_data_write(*string);
     378:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
		string++;
     37c:	21 96       	adiw	r28, 0x01	; 1
}

// prints a null-terminated string on LCD
void lcd_print_string(char *string)
{
	while(*string!=0)
     37e:	88 81       	ld	r24, Y
     380:	88 23       	and	r24, r24
     382:	d1 f7       	brne	.-12     	; 0x378 <lcd_print_string+0x8>
	{
		lcd_data_write(*string);
		string++;
	}
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <lcd_print_hex>:

// prints hex number on LCD
void lcd_print_hex(uint8_t hex)
{
     38a:	1f 93       	push	r17
     38c:	28 2f       	mov	r18, r24
	uint8_t hi,lo;

	hi=hex&0xF0;
	hi=hi>>4;
     38e:	98 2f       	mov	r25, r24
     390:	92 95       	swap	r25
     392:	9f 70       	andi	r25, 0x0F	; 15
	hi=hi+'0';
     394:	89 2f       	mov	r24, r25
     396:	80 5d       	subi	r24, 0xD0	; 208
	if(hi>'9')
     398:	8a 33       	cpi	r24, 0x3A	; 58
     39a:	08 f0       	brcs	.+2      	; 0x39e <lcd_print_hex+0x14>
	{
		hi=hi+7;
     39c:	89 5f       	subi	r24, 0xF9	; 249
	}
	lo=hex&0x0F;
     39e:	92 2f       	mov	r25, r18
     3a0:	9f 70       	andi	r25, 0x0F	; 15
	lo=lo+'0';
     3a2:	19 2f       	mov	r17, r25
     3a4:	10 5d       	subi	r17, 0xD0	; 208
	if(lo>'9')
     3a6:	1a 33       	cpi	r17, 0x3A	; 58
     3a8:	08 f0       	brcs	.+2      	; 0x3ac <lcd_print_hex+0x22>
	{
		lo=lo+7;
     3aa:	19 5f       	subi	r17, 0xF9	; 249
	}

	lcd_data_write(hi);
     3ac:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
	lcd_data_write(lo);
     3b0:	81 2f       	mov	r24, r17
     3b2:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
}
     3b6:	1f 91       	pop	r17
     3b8:	08 95       	ret

000003ba <lcd_print_uint8>:

// print uint8 on LCD
void lcd_print_uint8(uint8_t no)
{
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	f8 2e       	mov	r15, r24
	uint8_t y,leading;
	leading=1;
	y=no/100;
     3c2:	64 e6       	ldi	r22, 0x64	; 100
     3c4:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__udivmodqi4>
     3c8:	18 2f       	mov	r17, r24
	if(y>0)
     3ca:	88 23       	and	r24, r24
     3cc:	11 f4       	brne	.+4      	; 0x3d2 <lcd_print_uint8+0x18>
     3ce:	21 e0       	ldi	r18, 0x01	; 1
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <lcd_print_uint8+0x20>
	{
		lcd_data_write(y+'0');
     3d2:	80 5d       	subi	r24, 0xD0	; 208
     3d4:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	no=no-y*100;
     3da:	8c e9       	ldi	r24, 0x9C	; 156
     3dc:	9f ef       	ldi	r25, 0xFF	; 255
     3de:	18 9f       	mul	r17, r24
     3e0:	00 2d       	mov	r16, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	0f 0d       	add	r16, r15
	y=no/10;
     3e6:	80 2f       	mov	r24, r16
     3e8:	6a e0       	ldi	r22, 0x0A	; 10
     3ea:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <__udivmodqi4>
     3ee:	18 2f       	mov	r17, r24
	if((y>0)||(leading==0))
     3f0:	88 23       	and	r24, r24
     3f2:	11 f4       	brne	.+4      	; 0x3f8 <lcd_print_uint8+0x3e>
     3f4:	22 23       	and	r18, r18
     3f6:	21 f4       	brne	.+8      	; 0x400 <lcd_print_uint8+0x46>
	{
		lcd_data_write(y+'0');
     3f8:	81 2f       	mov	r24, r17
     3fa:	80 5d       	subi	r24, 0xD0	; 208
     3fc:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
		leading=1;
	}
	no=no-y*10;
	lcd_data_write(no+'0');
     400:	00 5d       	subi	r16, 0xD0	; 208
     402:	86 ef       	ldi	r24, 0xF6	; 246
     404:	9f ef       	ldi	r25, 0xFF	; 255
     406:	18 9f       	mul	r17, r24
     408:	80 2d       	mov	r24, r0
     40a:	11 24       	eor	r1, r1
     40c:	80 0f       	add	r24, r16
     40e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
}
     412:	1f 91       	pop	r17
     414:	0f 91       	pop	r16
     416:	ff 90       	pop	r15
     418:	08 95       	ret

0000041a <lcd_print_int8>:

// print int8 on LCD
void lcd_print_int8(int8_t no)
{
     41a:	0f 93       	push	r16
     41c:	1f 93       	push	r17
     41e:	18 2f       	mov	r17, r24
	int8_t y;
	uint8_t	leading;
	leading=1;
	if(no<0)
     420:	87 ff       	sbrs	r24, 7
     422:	10 c0       	rjmp	.+32     	; 0x444 <lcd_print_int8+0x2a>
	{
		lcd_print_string("-");
     424:	80 e6       	ldi	r24, 0x60	; 96
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_print_string>
		y=no/(-100);
     42c:	81 2f       	mov	r24, r17
     42e:	6c e9       	ldi	r22, 0x9C	; 156
     430:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodqi4>
     434:	28 2f       	mov	r18, r24
		no=-(no+y*100);
     436:	8c e9       	ldi	r24, 0x9C	; 156
     438:	28 02       	muls	r18, r24
     43a:	c0 01       	movw	r24, r0
     43c:	11 24       	eor	r1, r1
     43e:	08 2f       	mov	r16, r24
     440:	01 1b       	sub	r16, r17
     442:	0a c0       	rjmp	.+20     	; 0x458 <lcd_print_int8+0x3e>
	}
	else
	{
		y=no/100;
     444:	64 e6       	ldi	r22, 0x64	; 100
     446:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodqi4>
     44a:	28 2f       	mov	r18, r24
		no=no-y*100;
     44c:	8c e9       	ldi	r24, 0x9C	; 156
     44e:	28 02       	muls	r18, r24
     450:	c0 01       	movw	r24, r0
     452:	11 24       	eor	r1, r1
     454:	01 2f       	mov	r16, r17
     456:	08 0f       	add	r16, r24
	}

	if(y>0)
     458:	21 30       	cpi	r18, 0x01	; 1
     45a:	11 f0       	breq	.+4      	; 0x460 <lcd_print_int8+0x46>
     45c:	21 e0       	ldi	r18, 0x01	; 1
     45e:	04 c0       	rjmp	.+8      	; 0x468 <lcd_print_int8+0x4e>
	{
		lcd_data_write(y+'0');
     460:	81 e3       	ldi	r24, 0x31	; 49
     462:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     466:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	
	y=no/10;
     468:	80 2f       	mov	r24, r16
     46a:	6a e0       	ldi	r22, 0x0A	; 10
     46c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__divmodqi4>
     470:	18 2f       	mov	r17, r24
	if((y>0)||(leading==0))
     472:	18 16       	cp	r1, r24
     474:	14 f0       	brlt	.+4      	; 0x47a <lcd_print_int8+0x60>
     476:	22 23       	and	r18, r18
     478:	21 f4       	brne	.+8      	; 0x482 <lcd_print_int8+0x68>
	{
		lcd_data_write(y+'0');
     47a:	81 2f       	mov	r24, r17
     47c:	80 5d       	subi	r24, 0xD0	; 208
     47e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
		leading=1;
	}
	no=no-y*10;
	lcd_data_write(no+'0');
     482:	00 5d       	subi	r16, 0xD0	; 208
     484:	86 ef       	ldi	r24, 0xF6	; 246
     486:	18 02       	muls	r17, r24
     488:	c0 01       	movw	r24, r0
     48a:	11 24       	eor	r1, r1
     48c:	80 0f       	add	r24, r16
     48e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
}
     492:	1f 91       	pop	r17
     494:	0f 91       	pop	r16
     496:	08 95       	ret

00000498 <lcd_print_uint16>:

// print uint16 on LCD
void lcd_print_uint16(uint16_t no)
{
     498:	0f 93       	push	r16
     49a:	1f 93       	push	r17
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
     4a0:	8c 01       	movw	r16, r24
	uint16_t y;
	uint8_t	leading;
	leading=1;

	y=no/10000;
     4a2:	60 e1       	ldi	r22, 0x10	; 16
     4a4:	77 e2       	ldi	r23, 0x27	; 39
     4a6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
     4aa:	eb 01       	movw	r28, r22
	if(y>0)
     4ac:	61 15       	cp	r22, r1
     4ae:	71 05       	cpc	r23, r1
     4b0:	11 f4       	brne	.+4      	; 0x4b6 <lcd_print_uint16+0x1e>
     4b2:	21 e0       	ldi	r18, 0x01	; 1
     4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <lcd_print_uint16+0x2a>
	{
		lcd_data_write(y+'0');
     4b6:	9b 01       	movw	r18, r22
     4b8:	20 5d       	subi	r18, 0xD0	; 208
     4ba:	82 2f       	mov	r24, r18
     4bc:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     4c0:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	no=no-y*10000;
     4c2:	80 e1       	ldi	r24, 0x10	; 16
     4c4:	97 e2       	ldi	r25, 0x27	; 39
     4c6:	ac 01       	movw	r20, r24
     4c8:	c4 9f       	mul	r28, r20
     4ca:	c0 01       	movw	r24, r0
     4cc:	c5 9f       	mul	r28, r21
     4ce:	90 0d       	add	r25, r0
     4d0:	d4 9f       	mul	r29, r20
     4d2:	90 0d       	add	r25, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	08 1b       	sub	r16, r24
     4d8:	19 0b       	sbc	r17, r25

	y=no/1000;
     4da:	c8 01       	movw	r24, r16
     4dc:	68 ee       	ldi	r22, 0xE8	; 232
     4de:	73 e0       	ldi	r23, 0x03	; 3
     4e0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
     4e4:	eb 01       	movw	r28, r22
	if((y>0)||(leading==0))
     4e6:	61 15       	cp	r22, r1
     4e8:	71 05       	cpc	r23, r1
     4ea:	21 f4       	brne	.+8      	; 0x4f4 <lcd_print_uint16+0x5c>
     4ec:	22 23       	and	r18, r18
     4ee:	11 f0       	breq	.+4      	; 0x4f4 <lcd_print_uint16+0x5c>
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <lcd_print_uint16+0x68>
	{
		lcd_data_write(y+'0');
     4f4:	9e 01       	movw	r18, r28
     4f6:	20 5d       	subi	r18, 0xD0	; 208
     4f8:	82 2f       	mov	r24, r18
     4fa:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	no=no-y*1000;
     500:	88 ee       	ldi	r24, 0xE8	; 232
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	ac 01       	movw	r20, r24
     506:	c4 9f       	mul	r28, r20
     508:	c0 01       	movw	r24, r0
     50a:	c5 9f       	mul	r28, r21
     50c:	90 0d       	add	r25, r0
     50e:	d4 9f       	mul	r29, r20
     510:	90 0d       	add	r25, r0
     512:	11 24       	eor	r1, r1
     514:	08 1b       	sub	r16, r24
     516:	19 0b       	sbc	r17, r25

	y=no/100;
     518:	c8 01       	movw	r24, r16
     51a:	64 e6       	ldi	r22, 0x64	; 100
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
     522:	eb 01       	movw	r28, r22
	if((y>0)||(leading==0))
     524:	61 15       	cp	r22, r1
     526:	71 05       	cpc	r23, r1
     528:	21 f4       	brne	.+8      	; 0x532 <lcd_print_uint16+0x9a>
     52a:	22 23       	and	r18, r18
     52c:	11 f0       	breq	.+4      	; 0x532 <lcd_print_uint16+0x9a>
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	06 c0       	rjmp	.+12     	; 0x53e <lcd_print_uint16+0xa6>
	{
		lcd_data_write(y+'0');
     532:	9e 01       	movw	r18, r28
     534:	20 5d       	subi	r18, 0xD0	; 208
     536:	82 2f       	mov	r24, r18
     538:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     53c:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	no=no-y*100;
     53e:	84 e6       	ldi	r24, 0x64	; 100
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	ac 01       	movw	r20, r24
     544:	c4 9f       	mul	r28, r20
     546:	c0 01       	movw	r24, r0
     548:	c5 9f       	mul	r28, r21
     54a:	90 0d       	add	r25, r0
     54c:	d4 9f       	mul	r29, r20
     54e:	90 0d       	add	r25, r0
     550:	11 24       	eor	r1, r1
     552:	08 1b       	sub	r16, r24
     554:	19 0b       	sbc	r17, r25
	y=no/10;
     556:	c8 01       	movw	r24, r16
     558:	6a e0       	ldi	r22, 0x0A	; 10
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
     560:	eb 01       	movw	r28, r22
	if((y>0)||(leading==0))
     562:	61 15       	cp	r22, r1
     564:	71 05       	cpc	r23, r1
     566:	11 f4       	brne	.+4      	; 0x56c <lcd_print_uint16+0xd4>
     568:	22 23       	and	r18, r18
     56a:	29 f4       	brne	.+10     	; 0x576 <lcd_print_uint16+0xde>
	{
		lcd_data_write(y+'0');
     56c:	9e 01       	movw	r18, r28
     56e:	20 5d       	subi	r18, 0xD0	; 208
     570:	82 2f       	mov	r24, r18
     572:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
		leading=1;
	}
	no=no-y*10;
	lcd_data_write(no+'0');
     576:	ce 01       	movw	r24, r28
     578:	43 e0       	ldi	r20, 0x03	; 3
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	4a 95       	dec	r20
     580:	e1 f7       	brne	.-8      	; 0x57a <lcd_print_uint16+0xe2>
     582:	cc 0f       	add	r28, r28
     584:	dd 1f       	adc	r29, r29
     586:	8c 0f       	add	r24, r28
     588:	9d 1f       	adc	r25, r29
     58a:	08 1b       	sub	r16, r24
     58c:	19 0b       	sbc	r17, r25
     58e:	80 2f       	mov	r24, r16
     590:	80 5d       	subi	r24, 0xD0	; 208
     592:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	08 95       	ret

000005a0 <lcd_print_int16>:

// print int16 on LCD
void lcd_print_int16(int16_t no)
{
     5a0:	ef 92       	push	r14
     5a2:	ff 92       	push	r15
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	ec 01       	movw	r28, r24
	int16_t y;
	uint8_t	leading;
	leading=1;

	if(no<0)
     5ae:	97 ff       	sbrs	r25, 7
     5b0:	16 c0       	rjmp	.+44     	; 0x5de <lcd_print_int16+0x3e>
	{
		lcd_print_string("-");
     5b2:	80 e6       	ldi	r24, 0x60	; 96
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_print_string>
		y=no/(-10000);
     5ba:	ce 01       	movw	r24, r28
     5bc:	60 ef       	ldi	r22, 0xF0	; 240
     5be:	78 ed       	ldi	r23, 0xD8	; 216
     5c0:	0e 94 08 10 	call	0x2010	; 0x2010 <__divmodhi4>
     5c4:	9b 01       	movw	r18, r22
		no=-(no+y*10000);
     5c6:	80 ef       	ldi	r24, 0xF0	; 240
     5c8:	98 ed       	ldi	r25, 0xD8	; 216
     5ca:	68 9f       	mul	r22, r24
     5cc:	80 01       	movw	r16, r0
     5ce:	69 9f       	mul	r22, r25
     5d0:	10 0d       	add	r17, r0
     5d2:	78 9f       	mul	r23, r24
     5d4:	10 0d       	add	r17, r0
     5d6:	11 24       	eor	r1, r1
     5d8:	0c 1b       	sub	r16, r28
     5da:	1d 0b       	sbc	r17, r29
     5dc:	10 c0       	rjmp	.+32     	; 0x5fe <lcd_print_int16+0x5e>
	}
	else
	{
		y=no/10000;
     5de:	60 e1       	ldi	r22, 0x10	; 16
     5e0:	77 e2       	ldi	r23, 0x27	; 39
     5e2:	0e 94 08 10 	call	0x2010	; 0x2010 <__divmodhi4>
     5e6:	9b 01       	movw	r18, r22
		no=no-y*10000;
     5e8:	80 ef       	ldi	r24, 0xF0	; 240
     5ea:	98 ed       	ldi	r25, 0xD8	; 216
     5ec:	68 9f       	mul	r22, r24
     5ee:	80 01       	movw	r16, r0
     5f0:	69 9f       	mul	r22, r25
     5f2:	10 0d       	add	r17, r0
     5f4:	78 9f       	mul	r23, r24
     5f6:	10 0d       	add	r17, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	0c 0f       	add	r16, r28
     5fc:	1d 1f       	adc	r17, r29
	}

	if(y>0)
     5fe:	21 15       	cp	r18, r1
     600:	31 05       	cpc	r19, r1
     602:	11 f4       	brne	.+4      	; 0x608 <lcd_print_int16+0x68>
     604:	21 e0       	ldi	r18, 0x01	; 1
     606:	05 c0       	rjmp	.+10     	; 0x612 <lcd_print_int16+0x72>
	{
		lcd_data_write(y+'0');
     608:	82 2f       	mov	r24, r18
     60a:	80 5d       	subi	r24, 0xD0	; 208
     60c:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     610:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}

	y=no/1000;
     612:	c8 01       	movw	r24, r16
     614:	68 ee       	ldi	r22, 0xE8	; 232
     616:	73 e0       	ldi	r23, 0x03	; 3
     618:	0e 94 08 10 	call	0x2010	; 0x2010 <__divmodhi4>
     61c:	eb 01       	movw	r28, r22
	if((y>0)||(leading==0))
     61e:	16 16       	cp	r1, r22
     620:	17 06       	cpc	r1, r23
     622:	24 f0       	brlt	.+8      	; 0x62c <lcd_print_int16+0x8c>
     624:	22 23       	and	r18, r18
     626:	11 f0       	breq	.+4      	; 0x62c <lcd_print_int16+0x8c>
     628:	21 e0       	ldi	r18, 0x01	; 1
     62a:	06 c0       	rjmp	.+12     	; 0x638 <lcd_print_int16+0x98>
	{
		lcd_data_write(y+'0');
     62c:	9e 01       	movw	r18, r28
     62e:	20 5d       	subi	r18, 0xD0	; 208
     630:	82 2f       	mov	r24, r18
     632:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     636:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	no=no-y*1000;
     638:	88 e1       	ldi	r24, 0x18	; 24
     63a:	9c ef       	ldi	r25, 0xFC	; 252
     63c:	c8 9f       	mul	r28, r24
     63e:	70 01       	movw	r14, r0
     640:	c9 9f       	mul	r28, r25
     642:	f0 0c       	add	r15, r0
     644:	d8 9f       	mul	r29, r24
     646:	f0 0c       	add	r15, r0
     648:	11 24       	eor	r1, r1
     64a:	e0 0e       	add	r14, r16
     64c:	f1 1e       	adc	r15, r17

	y=no/100;
     64e:	c7 01       	movw	r24, r14
     650:	64 e6       	ldi	r22, 0x64	; 100
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	0e 94 08 10 	call	0x2010	; 0x2010 <__divmodhi4>
     658:	eb 01       	movw	r28, r22
	if((y>0)||(leading==0))
     65a:	16 16       	cp	r1, r22
     65c:	17 06       	cpc	r1, r23
     65e:	24 f0       	brlt	.+8      	; 0x668 <lcd_print_int16+0xc8>
     660:	22 23       	and	r18, r18
     662:	11 f0       	breq	.+4      	; 0x668 <lcd_print_int16+0xc8>
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	06 c0       	rjmp	.+12     	; 0x674 <lcd_print_int16+0xd4>
	{
		lcd_data_write(y+'0');
     668:	9e 01       	movw	r18, r28
     66a:	20 5d       	subi	r18, 0xD0	; 208
     66c:	82 2f       	mov	r24, r18
     66e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
     672:	20 e0       	ldi	r18, 0x00	; 0
		leading=0;
	}
	no=no-y*100;
     674:	8c e9       	ldi	r24, 0x9C	; 156
     676:	9f ef       	ldi	r25, 0xFF	; 255
     678:	c8 9f       	mul	r28, r24
     67a:	80 01       	movw	r16, r0
     67c:	c9 9f       	mul	r28, r25
     67e:	10 0d       	add	r17, r0
     680:	d8 9f       	mul	r29, r24
     682:	10 0d       	add	r17, r0
     684:	11 24       	eor	r1, r1
     686:	0e 0d       	add	r16, r14
     688:	1f 1d       	adc	r17, r15
	y=no/10;
     68a:	c8 01       	movw	r24, r16
     68c:	6a e0       	ldi	r22, 0x0A	; 10
     68e:	70 e0       	ldi	r23, 0x00	; 0
     690:	0e 94 08 10 	call	0x2010	; 0x2010 <__divmodhi4>
     694:	eb 01       	movw	r28, r22
	if((y>0)||(leading==0))
     696:	16 16       	cp	r1, r22
     698:	17 06       	cpc	r1, r23
     69a:	14 f0       	brlt	.+4      	; 0x6a0 <lcd_print_int16+0x100>
     69c:	22 23       	and	r18, r18
     69e:	29 f4       	brne	.+10     	; 0x6aa <lcd_print_int16+0x10a>
	{
		lcd_data_write(y+'0');
     6a0:	9e 01       	movw	r18, r28
     6a2:	20 5d       	subi	r18, 0xD0	; 208
     6a4:	82 2f       	mov	r24, r18
     6a6:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
		leading=1;
	}
	no=no-y*10;
	lcd_data_write(no+'0');
     6aa:	86 ef       	ldi	r24, 0xF6	; 246
     6ac:	9f ef       	ldi	r25, 0xFF	; 255
     6ae:	9c 01       	movw	r18, r24
     6b0:	c2 9f       	mul	r28, r18
     6b2:	c0 01       	movw	r24, r0
     6b4:	c3 9f       	mul	r28, r19
     6b6:	90 0d       	add	r25, r0
     6b8:	d2 9f       	mul	r29, r18
     6ba:	90 0d       	add	r25, r0
     6bc:	11 24       	eor	r1, r1
     6be:	80 0f       	add	r24, r16
     6c0:	91 1f       	adc	r25, r17
     6c2:	80 5d       	subi	r24, 0xD0	; 208
     6c4:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
}
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	1f 91       	pop	r17
     6ce:	0f 91       	pop	r16
     6d0:	ff 90       	pop	r15
     6d2:	ef 90       	pop	r14
     6d4:	08 95       	ret

000006d6 <ConvertCurrentSamplesToAmps>:




void ConvertCurrentSamplesToAmps(int *inputSample, float *amps, uint8_t gain)
{
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	e4 2e       	mov	r14, r20
     6e4:	ec 01       	movw	r28, r24
     6e6:	8b 01       	movw	r16, r22
     6e8:	ff 24       	eor	r15, r15
	for(uint8_t k = 0 ; k<75 ; k++)
	{
		if (inputSample[k] > 512)									//if sample taken is greater than 512 bits, do 2's compliment and make it negative
     6ea:	28 81       	ld	r18, Y
     6ec:	39 81       	ldd	r19, Y+1	; 0x01
     6ee:	82 e0       	ldi	r24, 0x02	; 2
     6f0:	21 30       	cpi	r18, 0x01	; 1
     6f2:	38 07       	cpc	r19, r24
     6f4:	54 f0       	brlt	.+20     	; 0x70a <ConvertCurrentSamplesToAmps+0x34>
		{
			int negative = (~(inputSample[k] - 1)) & 0x03FF;		//2's compliment of current samples
			inputSample[k] = -negative;
     6f6:	88 27       	eor	r24, r24
     6f8:	99 27       	eor	r25, r25
     6fa:	82 1b       	sub	r24, r18
     6fc:	93 0b       	sbc	r25, r19
     6fe:	93 70       	andi	r25, 0x03	; 3
     700:	90 95       	com	r25
     702:	81 95       	neg	r24
     704:	9f 4f       	sbci	r25, 0xFF	; 255
     706:	99 83       	std	Y+1, r25	; 0x01
     708:	88 83       	st	Y, r24
		}// end if

		
		if(gain == 10 || gain == 200)
     70a:	ea e0       	ldi	r30, 0x0A	; 10
     70c:	ee 16       	cp	r14, r30
     70e:	19 f0       	breq	.+6      	; 0x716 <ConvertCurrentSamplesToAmps+0x40>
     710:	f8 ec       	ldi	r31, 0xC8	; 200
     712:	ef 16       	cp	r14, r31
     714:	99 f4       	brne	.+38     	; 0x73c <ConvertCurrentSamplesToAmps+0x66>
			amps[k] = 0.00242*inputSample[k]-0.044699;
     716:	68 81       	ld	r22, Y
     718:	79 81       	ldd	r23, Y+1	; 0x01
     71a:	88 27       	eor	r24, r24
     71c:	77 fd       	sbrc	r23, 7
     71e:	80 95       	com	r24
     720:	98 2f       	mov	r25, r24
     722:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     726:	2d ed       	ldi	r18, 0xDD	; 221
     728:	38 e9       	ldi	r19, 0x98	; 152
     72a:	4e e1       	ldi	r20, 0x1E	; 30
     72c:	5b e3       	ldi	r21, 0x3B	; 59
     72e:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3>
     732:	2c e4       	ldi	r18, 0x4C	; 76
     734:	36 e1       	ldi	r19, 0x16	; 22
     736:	47 e3       	ldi	r20, 0x37	; 55
     738:	5d e3       	ldi	r21, 0x3D	; 61
     73a:	12 c0       	rjmp	.+36     	; 0x760 <ConvertCurrentSamplesToAmps+0x8a>
		else
			amps[k] = 0.084236*inputSample[k]- 0.368884;
     73c:	68 81       	ld	r22, Y
     73e:	79 81       	ldd	r23, Y+1	; 0x01
     740:	88 27       	eor	r24, r24
     742:	77 fd       	sbrc	r23, 7
     744:	80 95       	com	r24
     746:	98 2f       	mov	r25, r24
     748:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     74c:	2d ee       	ldi	r18, 0xED	; 237
     74e:	33 e8       	ldi	r19, 0x83	; 131
     750:	4c ea       	ldi	r20, 0xAC	; 172
     752:	5d e3       	ldi	r21, 0x3D	; 61
     754:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3>
     758:	2d e5       	ldi	r18, 0x5D	; 93
     75a:	3e ed       	ldi	r19, 0xDE	; 222
     75c:	4c eb       	ldi	r20, 0xBC	; 188
     75e:	5e e3       	ldi	r21, 0x3E	; 62
     760:	0e 94 0f 0a 	call	0x141e	; 0x141e <__subsf3>
     764:	f8 01       	movw	r30, r16
     766:	60 83       	st	Z, r22
     768:	71 83       	std	Z+1, r23	; 0x01
     76a:	82 83       	std	Z+2, r24	; 0x02
     76c:	93 83       	std	Z+3, r25	; 0x03



void ConvertCurrentSamplesToAmps(int *inputSample, float *amps, uint8_t gain)
{
	for(uint8_t k = 0 ; k<75 ; k++)
     76e:	f3 94       	inc	r15
     770:	22 96       	adiw	r28, 0x02	; 2
     772:	0c 5f       	subi	r16, 0xFC	; 252
     774:	1f 4f       	sbci	r17, 0xFF	; 255
     776:	fb e4       	ldi	r31, 0x4B	; 75
     778:	ff 16       	cp	r15, r31
     77a:	09 f0       	breq	.+2      	; 0x77e <ConvertCurrentSamplesToAmps+0xa8>
     77c:	b6 cf       	rjmp	.-148    	; 0x6ea <ConvertCurrentSamplesToAmps+0x14>
	//	dcOffset += amps[k];	
	//dcOffset = dcOffset/75;

	//for(int k = 0; k<75; k++)
	//	amps[k] = amps[k] - dcOffset;
}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	08 95       	ret

0000078c <FindNewGainValue>:

void FindNewGainValue(uint8_t* gain, int imax)
{
     78c:	fc 01       	movw	r30, r24
	if((*gain == 200) && (imax >= 479))		//if gain is at x200 and value is overflowing OR gain is x1 and value is too small
     78e:	80 81       	ld	r24, Z
     790:	88 3c       	cpi	r24, 0xC8	; 200
     792:	21 f4       	brne	.+8      	; 0x79c <FindNewGainValue+0x10>
     794:	6f 5d       	subi	r22, 0xDF	; 223
     796:	71 40       	sbci	r23, 0x01	; 1
     798:	ac f0       	brlt	.+42     	; 0x7c4 <FindNewGainValue+0x38>
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <FindNewGainValue+0x1a>
		*gain = 10;							//use x10 gain setting
	else if((*gain == 1) && (imax <= 49))
     79c:	81 30       	cpi	r24, 0x01	; 1
     79e:	29 f4       	brne	.+10     	; 0x7aa <FindNewGainValue+0x1e>
     7a0:	62 33       	cpi	r22, 0x32	; 50
     7a2:	71 05       	cpc	r23, r1
     7a4:	7c f4       	brge	.+30     	; 0x7c4 <FindNewGainValue+0x38>
		*gain =10; 
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <FindNewGainValue+0x2a>
	else if ((*gain == 10) && (imax <= 24))	//if gain is x10 and value is too small
     7aa:	8a 30       	cpi	r24, 0x0A	; 10
     7ac:	59 f4       	brne	.+22     	; 0x7c4 <FindNewGainValue+0x38>
     7ae:	69 31       	cpi	r22, 0x19	; 25
     7b0:	71 05       	cpc	r23, r1
     7b2:	1c f4       	brge	.+6      	; 0x7ba <FindNewGainValue+0x2e>
		*gain = 200;							//use x200 gain setting changed from 200 to 10 (may revmove 10 gain)
     7b4:	88 ec       	ldi	r24, 0xC8	; 200
     7b6:	80 83       	st	Z, r24
     7b8:	08 95       	ret
	else if((*gain == 10) && (imax >= 480))	//if gain is x10 and value is too large
     7ba:	60 5e       	subi	r22, 0xE0	; 224
     7bc:	71 40       	sbci	r23, 0x01	; 1
     7be:	14 f0       	brlt	.+4      	; 0x7c4 <FindNewGainValue+0x38>
		*gain = 1;							// use x1 gain setting
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	80 83       	st	Z, r24
     7c4:	08 95       	ret

000007c6 <TakeCurrentSample>:



int TakeCurrentSample(void)
{
	ADCSRA |= (1<<ADEN);								//re enable ADC
     7c6:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);								//ADC start conversion
     7c8:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1 << ADSC))							//waits until the conversion is completed before it continues and saves the value.
     7ca:	36 99       	sbic	0x06, 6	; 6
     7cc:	fe cf       	rjmp	.-4      	; 0x7ca <TakeCurrentSample+0x4>
		;
	int newCurrentSample= ADC;							//stores the current 'i' sample from the ADC
     7ce:	24 b1       	in	r18, 0x04	; 4
     7d0:	35 b1       	in	r19, 0x05	; 5
	return newCurrentSample;
}
     7d2:	c9 01       	movw	r24, r18
     7d4:	08 95       	ret

000007d6 <FindMaxCurrentSample>:



int FindMaxCurrentSample(int *currentSampleArray)					//subroutine for finding the maximum value of the top of the 3 periods
{
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	fc 01       	movw	r30, r24
     7e0:	e2 0f       	add	r30, r18
     7e2:	f3 1f       	adc	r31, r19
     7e4:	01 90       	ld	r0, Z+
     7e6:	f0 81       	ld	r31, Z
     7e8:	e0 2d       	mov	r30, r0
     7ea:	4e 17       	cp	r20, r30
     7ec:	5f 07       	cpc	r21, r31
     7ee:	0c f4       	brge	.+2      	; 0x7f2 <FindMaxCurrentSample+0x1c>
     7f0:	af 01       	movw	r20, r30
     7f2:	2e 5f       	subi	r18, 0xFE	; 254
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
	int imax = 0;								//this subroutine executes every 3 periods and clears the maximum every time
	for(uint8_t k=0; k<74; k++)
     7f6:	24 39       	cpi	r18, 0x94	; 148
     7f8:	31 05       	cpc	r19, r1
     7fa:	89 f7       	brne	.-30     	; 0x7de <FindMaxCurrentSample+0x8>
		if (imax < currentSampleArray[k])				//if current maximum is less than new maximum
			imax = currentSampleArray[k];				//save the new maximum sample
	return imax;
}//max finder function
     7fc:	ca 01       	movw	r24, r20
     7fe:	08 95       	ret

00000800 <SetADCMUX200GainCurrent>:



void SetADCMUX200GainCurrent(void)
{
	ADMUX = 0x40;											//clear admux keeping REFS0 high
     800:	80 e4       	ldi	r24, 0x40	; 64
     802:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0);	//setup ADMUX for x200 gain 01111
     804:	87 b1       	in	r24, 0x07	; 7
     806:	8f 60       	ori	r24, 0x0F	; 15
     808:	87 b9       	out	0x07, r24	; 7
}//end x200 ADC setup
     80a:	08 95       	ret

0000080c <SetADCMUX10GainCurrent>:



void SetADCMUX10GainCurrent(void)
{
	ADMUX = 0x40;											//clear admux keeping REFS0 high
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	87 b9       	out	0x07, r24	; 7
    ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX0);				//setup ADMUX for x10 gain 01101
     810:	87 b1       	in	r24, 0x07	; 7
     812:	8d 60       	ori	r24, 0x0D	; 13
     814:	87 b9       	out	0x07, r24	; 7
}//end x10 ADC setup
     816:	08 95       	ret

00000818 <SetADCMUX1GainCurrent>:


void SetADCMUX1GainCurrent(void)
{
	ADMUX = 0x40;											//clear admux keeping REFS0 high
     818:	80 e4       	ldi	r24, 0x40	; 64
     81a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX4) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);	//setup admux for x1 gain 11011
     81c:	87 b1       	in	r24, 0x07	; 7
     81e:	8b 61       	ori	r24, 0x1B	; 27
     820:	87 b9       	out	0x07, r24	; 7
}//end x1 ADC setup
     822:	08 95       	ret

00000824 <InitCurrentADC>:

void InitCurrentADC(uint8_t gain)				//subroutine for setting up ADC registers for current samples
{
	if(gain == 200)								//if gain is determined to be x200
     824:	88 3c       	cpi	r24, 0xC8	; 200
     826:	29 f4       	brne	.+10     	; 0x832 <InitCurrentADC+0xe>



void SetADCMUX200GainCurrent(void)
{
	ADMUX = 0x40;											//clear admux keeping REFS0 high
     828:	80 e4       	ldi	r24, 0x40	; 64
     82a:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0);	//setup ADMUX for x200 gain 01111
     82c:	87 b1       	in	r24, 0x07	; 7
     82e:	8f 60       	ori	r24, 0x0F	; 15
     830:	06 c0       	rjmp	.+12     	; 0x83e <InitCurrentADC+0x1a>

void InitCurrentADC(uint8_t gain)				//subroutine for setting up ADC registers for current samples
{
	if(gain == 200)								//if gain is determined to be x200
		SetADCMUX200GainCurrent();				//set up ADMUX for x200 changed to 10iadc
	else if (gain == 10)						//if gain is determined to be x10
     832:	8a 30       	cpi	r24, 0x0A	; 10
     834:	31 f4       	brne	.+12     	; 0x842 <InitCurrentADC+0x1e>



void SetADCMUX10GainCurrent(void)
{
	ADMUX = 0x40;											//clear admux keeping REFS0 high
     836:	80 e4       	ldi	r24, 0x40	; 64
     838:	87 b9       	out	0x07, r24	; 7
    ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX0);				//setup ADMUX for x10 gain 01101
     83a:	87 b1       	in	r24, 0x07	; 7
     83c:	8d 60       	ori	r24, 0x0D	; 13
     83e:	87 b9       	out	0x07, r24	; 7
     840:	08 95       	ret
{
	if(gain == 200)								//if gain is determined to be x200
		SetADCMUX200GainCurrent();				//set up ADMUX for x200 changed to 10iadc
	else if (gain == 10)						//if gain is determined to be x10
		SetADCMUX10GainCurrent();				//set up ADMUX for x10
	else if(gain == 1)							//if gain is determined to be x1
     842:	81 30       	cpi	r24, 0x01	; 1
     844:	29 f4       	brne	.+10     	; 0x850 <InitCurrentADC+0x2c>
}//end x10 ADC setup


void SetADCMUX1GainCurrent(void)
{
	ADMUX = 0x40;											//clear admux keeping REFS0 high
     846:	80 e4       	ldi	r24, 0x40	; 64
     848:	87 b9       	out	0x07, r24	; 7
	ADMUX |= (1<<MUX4) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);	//setup admux for x1 gain 11011
     84a:	87 b1       	in	r24, 0x07	; 7
     84c:	8b 61       	ori	r24, 0x1B	; 27
     84e:	87 b9       	out	0x07, r24	; 7
     850:	08 95       	ret

00000852 <initVoltageADC>:
#include <stdlib.h>


void initVoltageADC(void)										//subroutine intializing ADC registers for voltage samples
{
	ADMUX = 0x00;
     852:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x00;
     854:	16 b8       	out	0x06, r1	; 6
	ADMUX |= (1<<REFS0) | (1<<MUX4) | (1<<MUX3);				//setting up the admux for the "voltmeter" (AVCC reference w/ ext. cap. , ADCH most sig. bit , 1X Gain, diff. 
     856:	87 b1       	in	r24, 0x07	; 7
     858:	88 65       	ori	r24, 0x58	; 88
     85a:	87 b9       	out	0x07, r24	; 7
																	//input for ADC0 input ADC2 ref.)
	ADCSRA |= (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1);	//initializing the ADC status register,also adjusting prescaler to 64
     85c:	86 b1       	in	r24, 0x06	; 6
     85e:	8e 60       	ori	r24, 0x0E	; 14
     860:	86 b9       	out	0x06, r24	; 6
}//end ADC subroutine
     862:	08 95       	ret

00000864 <ConvertVoltageSamplesToVolts>:




void ConvertVoltageSamplesToVolts(int *inputSample, float *lineVoltage)
{
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
     878:	c0 e0       	ldi	r28, 0x00	; 0
     87a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t k = 0 ; k<75; k++)
	{	
		if (inputSample[k] > 512)			//if sample taken is greater than 512 bits, do 2's compliment and make it negative
     87c:	f7 01       	movw	r30, r14
     87e:	20 81       	ld	r18, Z
     880:	31 81       	ldd	r19, Z+1	; 0x01
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	21 30       	cpi	r18, 0x01	; 1
     886:	3f 07       	cpc	r19, r31
     888:	5c f0       	brlt	.+22     	; 0x8a0 <ConvertVoltageSamplesToVolts+0x3c>
		{
			inputSample[k] = (~((inputSample[k]) - 1)) & 0x03FF;		//2's compliment of voltage samples		
     88a:	88 27       	eor	r24, r24
     88c:	99 27       	eor	r25, r25
     88e:	82 1b       	sub	r24, r18
     890:	93 0b       	sbc	r25, r19
     892:	93 70       	andi	r25, 0x03	; 3
			inputSample[k] = -inputSample[k];
     894:	90 95       	com	r25
     896:	81 95       	neg	r24
     898:	9f 4f       	sbci	r25, 0xFF	; 255
     89a:	f7 01       	movw	r30, r14
     89c:	91 83       	std	Z+1, r25	; 0x01
     89e:	80 83       	st	Z, r24
		}

		lineVoltage[k] = 0.797*inputSample[k]-0.6369;
     8a0:	86 01       	movw	r16, r12
     8a2:	0c 0f       	add	r16, r28
     8a4:	1d 1f       	adc	r17, r29
     8a6:	f7 01       	movw	r30, r14
     8a8:	61 91       	ld	r22, Z+
     8aa:	71 91       	ld	r23, Z+
     8ac:	7f 01       	movw	r14, r30
     8ae:	88 27       	eor	r24, r24
     8b0:	77 fd       	sbrc	r23, 7
     8b2:	80 95       	com	r24
     8b4:	98 2f       	mov	r25, r24
     8b6:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     8ba:	21 e3       	ldi	r18, 0x31	; 49
     8bc:	38 e0       	ldi	r19, 0x08	; 8
     8be:	4c e4       	ldi	r20, 0x4C	; 76
     8c0:	5f e3       	ldi	r21, 0x3F	; 63
     8c2:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3>
     8c6:	21 ee       	ldi	r18, 0xE1	; 225
     8c8:	3b e0       	ldi	r19, 0x0B	; 11
     8ca:	43 e2       	ldi	r20, 0x23	; 35
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	0e 94 0f 0a 	call	0x141e	; 0x141e <__subsf3>
     8d2:	f8 01       	movw	r30, r16
     8d4:	60 83       	st	Z, r22
     8d6:	71 83       	std	Z+1, r23	; 0x01
     8d8:	82 83       	std	Z+2, r24	; 0x02
     8da:	93 83       	std	Z+3, r25	; 0x03
     8dc:	24 96       	adiw	r28, 0x04	; 4



void ConvertVoltageSamplesToVolts(int *inputSample, float *lineVoltage)
{
	for(uint8_t k = 0 ; k<75; k++)
     8de:	f1 e0       	ldi	r31, 0x01	; 1
     8e0:	cc 32       	cpi	r28, 0x2C	; 44
     8e2:	df 07       	cpc	r29, r31
     8e4:	59 f6       	brne	.-106    	; 0x87c <ConvertVoltageSamplesToVolts+0x18>
		}

		lineVoltage[k] = 0.797*inputSample[k]-0.6369;
	}//for loop
	return;
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	df 90       	pop	r13
     8f4:	cf 90       	pop	r12
     8f6:	08 95       	ret

000008f8 <initCounter>:
#include <stdlib.h>


void initCounter(void)		// Setup for Timer Counter registers
{
	TCCR0 |= (1<<COM00)|(1<<CS00)|(1<<CS01);	//Normal Mode, Toggle OCO on Compare Match, Clk Prescaller 64
     8f8:	83 b7       	in	r24, 0x33	; 51
     8fa:	83 61       	ori	r24, 0x13	; 19
     8fc:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<OCIE0);	//Enables Compare Match Interrupts
     8fe:	89 b7       	in	r24, 0x39	; 57
     900:	82 60       	ori	r24, 0x02	; 2
     902:	89 bf       	out	0x39, r24	; 57
	TIMSK &= ~(1<<TOIE0);
     904:	89 b7       	in	r24, 0x39	; 57
     906:	8e 7f       	andi	r24, 0xFE	; 254
     908:	89 bf       	out	0x39, r24	; 57
	OCR0 = 0b01010010;		// 82 gives 667us between periods 
     90a:	82 e5       	ldi	r24, 0x52	; 82
     90c:	8c bf       	out	0x3c, r24	; 60
}//end Timer counter subroutine
     90e:	08 95       	ret

00000910 <USART_init>:
#include <stdlib.h>


void USART_init( unsigned int baud ){
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
     910:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
     912:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
     914:	88 e1       	ldi	r24, 0x18	; 24
     916:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data,  1 stop bit */
	UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
     918:	86 e8       	ldi	r24, 0x86	; 134
     91a:	80 bd       	out	0x20, r24	; 32
	UCSRB |= (1 << RXCIE);//enable the Recieve USART Interrupt
     91c:	57 9a       	sbi	0x0a, 7	; 10
}//USART_Init
     91e:	08 95       	ret

00000920 <USART_tx>:


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     920:	5d 9b       	sbis	0x0b, 5	; 11
     922:	fe cf       	rjmp	.-4      	; 0x920 <USART_tx>
		;
	UDR = data;
     924:	8c b9       	out	0x0c, r24	; 12
}
     926:	08 95       	ret

00000928 <USART_rx>:


unsigned char USART_rx(void)
{
	while(!(UCSRA & (1<<RXC)))
     928:	5f 9b       	sbis	0x0b, 7	; 11
     92a:	fe cf       	rjmp	.-4      	; 0x928 <USART_rx>
		;
	return UDR;
     92c:	8c b1       	in	r24, 0x0c	; 12
}
     92e:	08 95       	ret

00000930 <__vector_13>:
unsigned int wirelessNew = 0;
unsigned int _TransmitDelay = 500;


ISR(USART_RXC_vect)
{
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
	cli();											//turn off interrupts so we can receive the whole packet
     942:	f8 94       	cli
	incomingPacket[0] = UDR;
     944:	8c b1       	in	r24, 0x0c	; 12
     946:	80 93 ca 05 	sts	0x05CA, r24
     94a:	eb ec       	ldi	r30, 0xCB	; 203
     94c:	f5 e0       	ldi	r31, 0x05	; 5
}


unsigned char USART_rx(void)
{
	while(!(UCSRA & (1<<RXC)))
     94e:	5f 9b       	sbis	0x0b, 7	; 11
     950:	fe cf       	rjmp	.-4      	; 0x94e <__vector_13+0x1e>
		;
	return UDR;
     952:	8c b1       	in	r24, 0x0c	; 12
	for(uint8_t k = 1; k<9; k++)
		incomingPacket[k] = USART_rx();
     954:	81 93       	st	Z+, r24

ISR(USART_RXC_vect)
{
	cli();											//turn off interrupts so we can receive the whole packet
	incomingPacket[0] = UDR;
	for(uint8_t k = 1; k<9; k++)
     956:	85 e0       	ldi	r24, 0x05	; 5
     958:	e3 3d       	cpi	r30, 0xD3	; 211
     95a:	f8 07       	cpc	r31, r24
     95c:	c1 f7       	brne	.-16     	; 0x94e <__vector_13+0x1e>
		incomingPacket[k] = USART_rx();
	wirelessNew = 1;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	90 93 d4 05 	sts	0x05D4, r25
     966:	80 93 d3 05 	sts	0x05D3, r24
	sei();
     96a:	78 94       	sei
}
     96c:	ff 91       	pop	r31
     96e:	ef 91       	pop	r30
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <__vector_16>:

ISR(ADC_vect)									//ADC conversion complete interrupt 
{
     97e:	1f 92       	push	r1
     980:	0f 92       	push	r0
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	0f 92       	push	r0
     986:	11 24       	eor	r1, r1
     988:	2f 93       	push	r18
     98a:	3f 93       	push	r19
     98c:	4f 93       	push	r20
     98e:	5f 93       	push	r21
     990:	6f 93       	push	r22
     992:	7f 93       	push	r23
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
     998:	af 93       	push	r26
     99a:	bf 93       	push	r27
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	ef 93       	push	r30
     9a2:	ff 93       	push	r31
	PORTB |= 0x04;
     9a4:	c2 9a       	sbi	0x18, 2	; 24
	cli();										//turns off interrupts
     9a6:	f8 94       	cli
	
	vsamples[v] = ADC;
     9a8:	84 b1       	in	r24, 0x04	; 4
     9aa:	95 b1       	in	r25, 0x05	; 5
     9ac:	e0 91 6a 00 	lds	r30, 0x006A
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	ee 0f       	add	r30, r30
     9b4:	ff 1f       	adc	r31, r31
     9b6:	e4 59       	subi	r30, 0x94	; 148
     9b8:	ff 4f       	sbci	r31, 0xFF	; 255
     9ba:	91 83       	std	Z+1, r25	; 0x01
     9bc:	80 83       	st	Z, r24

	ADCSRA &= ~(1<<ADEN);						//disables ADC
     9be:	37 98       	cbi	0x06, 7	; 6
	
	InitCurrentADC(gain);						//Sets up the ADC for Taking Current Samples
     9c0:	80 91 66 00 	lds	r24, 0x0066
     9c4:	0e 94 12 04 	call	0x824	; 0x824 <InitCurrentADC>
	isamples[i] = TakeCurrentSample();
     9c8:	80 91 6b 00 	lds	r24, 0x006B
     9cc:	c8 2f       	mov	r28, r24
     9ce:	d0 e0       	ldi	r29, 0x00	; 0
     9d0:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TakeCurrentSample>
     9d4:	cc 0f       	add	r28, r28
     9d6:	dd 1f       	adc	r29, r29
     9d8:	c0 5e       	subi	r28, 0xE0	; 224
     9da:	de 4f       	sbci	r29, 0xFE	; 254
     9dc:	99 83       	std	Y+1, r25	; 0x01
     9de:	88 83       	st	Y, r24
	ADCSRA &= ~(1<<ADEN);						//disables ADC
     9e0:	37 98       	cbi	0x06, 7	; 6
	
	initVoltageADC();							//initialize ADC
     9e2:	0e 94 29 04 	call	0x852	; 0x852 <initVoltageADC>
	//ADCSRA &= ~(1<<ADEN);
	v++;										//increment the sample indices
     9e6:	80 91 6a 00 	lds	r24, 0x006A
     9ea:	8f 5f       	subi	r24, 0xFF	; 255
     9ec:	80 93 6a 00 	sts	0x006A, r24
	i++;	
     9f0:	80 91 6b 00 	lds	r24, 0x006B
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	80 93 6b 00 	sts	0x006B, r24
	
	sei();
     9fa:	78 94       	sei
	PORTB &= ~0x04;
     9fc:	c2 98       	cbi	0x18, 2	; 24
	
}//end ADC ISR
     9fe:	ff 91       	pop	r31
     a00:	ef 91       	pop	r30
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	bf 91       	pop	r27
     a08:	af 91       	pop	r26
     a0a:	9f 91       	pop	r25
     a0c:	8f 91       	pop	r24
     a0e:	7f 91       	pop	r23
     a10:	6f 91       	pop	r22
     a12:	5f 91       	pop	r21
     a14:	4f 91       	pop	r20
     a16:	3f 91       	pop	r19
     a18:	2f 91       	pop	r18
     a1a:	0f 90       	pop	r0
     a1c:	0f be       	out	0x3f, r0	; 63
     a1e:	0f 90       	pop	r0
     a20:	1f 90       	pop	r1
     a22:	18 95       	reti

00000a24 <__vector_10>:

ISR(TIMER0_COMP_vect)		//timer counter compare match vector
{
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	0f 92       	push	r0
     a2c:	11 24       	eor	r1, r1
	TCNT0 = 0x00;			//resets the timer to start counting from zero
     a2e:	12 be       	out	0x32, r1	; 50
	//TIFR |=(1<<OCF0);		//clears the interrupt flag
	ADCSRA |= (1<<ADEN);
     a30:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1<<ADSC);	//**Note this is now in ADCSRA initialization
     a32:	36 9a       	sbi	0x06, 6	; 6
}//end Timer counter ISR
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <calculateavgpower>:
	}//end while
}//end main


float calculateavgpower(void)
{
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62
     a52:	cc 52       	subi	r28, 0x2C	; 44
     a54:	d1 40       	sbci	r29, 0x01	; 1
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	de bf       	out	0x3e, r29	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	cd bf       	out	0x3d, r28	; 61
	float avgpower=0;
	float instPower[75] = {0};
     a60:	fe 01       	movw	r30, r28
     a62:	31 96       	adiw	r30, 0x01	; 1
     a64:	8c e2       	ldi	r24, 0x2C	; 44
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	df 01       	movw	r26, r30
     a6a:	9c 01       	movw	r18, r24
     a6c:	1d 92       	st	X+, r1
     a6e:	21 50       	subi	r18, 0x01	; 1
     a70:	30 40       	sbci	r19, 0x00	; 0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <calculateavgpower+0x2e>
     a74:	ee 24       	eor	r14, r14
     a76:	ff 24       	eor	r15, r15

	for(int k=0; k<75; k++)
		instPower[k] = (vline[k]*iload[k]);
     a78:	6f 01       	movw	r12, r30
     a7a:	86 01       	movw	r16, r12
     a7c:	0e 0d       	add	r16, r14
     a7e:	1f 1d       	adc	r17, r15
     a80:	f7 01       	movw	r30, r14
     a82:	ec 52       	subi	r30, 0x2C	; 44
     a84:	fe 4f       	sbci	r31, 0xFE	; 254
     a86:	d7 01       	movw	r26, r14
     a88:	a0 50       	subi	r26, 0x00	; 0
     a8a:	bd 4f       	sbci	r27, 0xFD	; 253
     a8c:	60 81       	ld	r22, Z
     a8e:	71 81       	ldd	r23, Z+1	; 0x01
     a90:	82 81       	ldd	r24, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	2d 91       	ld	r18, X+
     a96:	3d 91       	ld	r19, X+
     a98:	4d 91       	ld	r20, X+
     a9a:	5c 91       	ld	r21, X
     a9c:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3>
     aa0:	d8 01       	movw	r26, r16
     aa2:	6d 93       	st	X+, r22
     aa4:	7d 93       	st	X+, r23
     aa6:	8d 93       	st	X+, r24
     aa8:	9c 93       	st	X, r25
     aaa:	13 97       	sbiw	r26, 0x03	; 3
     aac:	e4 e0       	ldi	r30, 0x04	; 4
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	ee 0e       	add	r14, r30
     ab2:	ff 1e       	adc	r15, r31
float calculateavgpower(void)
{
	float avgpower=0;
	float instPower[75] = {0};

	for(int k=0; k<75; k++)
     ab4:	fc e2       	ldi	r31, 0x2C	; 44
     ab6:	ef 16       	cp	r14, r31
     ab8:	f1 e0       	ldi	r31, 0x01	; 1
     aba:	ff 06       	cpc	r15, r31
     abc:	f1 f6       	brne	.-68     	; 0xa7a <calculateavgpower+0x3c>
     abe:	76 01       	movw	r14, r12
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
		instPower[k] = (vline[k]*iload[k]);
	

	for(int k=0; k<75; k++)
     ac8:	8e 01       	movw	r16, r28
     aca:	03 5d       	subi	r16, 0xD3	; 211
     acc:	1e 4f       	sbci	r17, 0xFE	; 254
		avgpower += instPower[k]; 		//add the divided samples 
     ace:	d7 01       	movw	r26, r14
     ad0:	2d 91       	ld	r18, X+
     ad2:	3d 91       	ld	r19, X+
     ad4:	4d 91       	ld	r20, X+
     ad6:	5d 91       	ld	r21, X+
     ad8:	7d 01       	movw	r14, r26
     ada:	0e 94 10 0a 	call	0x1420	; 0x1420 <__addsf3>

	for(int k=0; k<75; k++)
		instPower[k] = (vline[k]*iload[k]);
	

	for(int k=0; k<75; k++)
     ade:	e0 16       	cp	r14, r16
     ae0:	f1 06       	cpc	r15, r17
     ae2:	a9 f7       	brne	.-22     	; 0xace <calculateavgpower+0x90>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	46 e9       	ldi	r20, 0x96	; 150
     aea:	52 e4       	ldi	r21, 0x42	; 66
     aec:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
		avgpower += instPower[k]; 		//add the divided samples 
	
	avgpower = avgpower/75.0;
	
	return avgpower;
}
     af0:	c4 5d       	subi	r28, 0xD4	; 212
     af2:	de 4f       	sbci	r29, 0xFE	; 254
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	08 95       	ret

00000b10 <movingAveragePower>:

float movingAveragePower(float averagePower)
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	9b 01       	movw	r18, r22
     b16:	ac 01       	movw	r20, r24
     b18:	e4 eb       	ldi	r30, 0xB4	; 180
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
	for(uint8_t k = numberOfSetsInMovingAvgPower; k>1 ; k--)
		averagePowerArray[k-1] = averagePowerArray[k-2];
     b1c:	80 81       	ld	r24, Z
     b1e:	91 81       	ldd	r25, Z+1	; 0x01
     b20:	a2 81       	ldd	r26, Z+2	; 0x02
     b22:	b3 81       	ldd	r27, Z+3	; 0x03
     b24:	84 83       	std	Z+4, r24	; 0x04
     b26:	95 83       	std	Z+5, r25	; 0x05
     b28:	a6 83       	std	Z+6, r26	; 0x06
     b2a:	b7 83       	std	Z+7, r27	; 0x07
     b2c:	34 97       	sbiw	r30, 0x04	; 4
	return avgpower;
}

float movingAveragePower(float averagePower)
{
	for(uint8_t k = numberOfSetsInMovingAvgPower; k>1 ; k--)
     b2e:	84 e0       	ldi	r24, 0x04	; 4
     b30:	e8 32       	cpi	r30, 0x28	; 40
     b32:	f8 07       	cpc	r31, r24
     b34:	99 f7       	brne	.-26     	; 0xb1c <movingAveragePower+0xc>
		averagePowerArray[k-1] = averagePowerArray[k-2];
	
	averagePowerArray[0] = averagePower;
     b36:	24 83       	std	Z+4, r18	; 0x04
     b38:	35 83       	std	Z+5, r19	; 0x05
     b3a:	46 83       	std	Z+6, r20	; 0x06
     b3c:	57 83       	std	Z+7, r21	; 0x07
     b3e:	ef 01       	movw	r28, r30
     b40:	24 96       	adiw	r28, 0x04	; 4
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
	
	float sumOfAverages = 0;
	for(uint8_t k = 0; k <numberOfSetsInMovingAvgPower ; k++)
	{
		sumOfAverages +=averagePowerArray[k];
     b4a:	29 91       	ld	r18, Y+
     b4c:	39 91       	ld	r19, Y+
     b4e:	49 91       	ld	r20, Y+
     b50:	59 91       	ld	r21, Y+
     b52:	0e 94 10 0a 	call	0x1420	; 0x1420 <__addsf3>
		averagePowerArray[k-1] = averagePowerArray[k-2];
	
	averagePowerArray[0] = averagePower;
	
	float sumOfAverages = 0;
	for(uint8_t k = 0; k <numberOfSetsInMovingAvgPower ; k++)
     b56:	25 e0       	ldi	r18, 0x05	; 5
     b58:	cc 3b       	cpi	r28, 0xBC	; 188
     b5a:	d2 07       	cpc	r29, r18
     b5c:	b1 f7       	brne	.-20     	; 0xb4a <movingAveragePower+0x3a>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	48 ec       	ldi	r20, 0xC8	; 200
     b64:	52 e4       	ldi	r21, 0x42	; 66
     b66:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
	}

	sumOfAverages = sumOfAverages/(float)numberOfSetsInMovingAvgPower;

	return sumOfAverages;
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <TransmitConvertedValues>:
	return;
}


void TransmitConvertedValues(float *ConvertedSampleArray)
{
     b70:	9f 92       	push	r9
     b72:	af 92       	push	r10
     b74:	bf 92       	push	r11
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	df 93       	push	r29
     b84:	cf 93       	push	r28
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	29 97       	sbiw	r28, 0x09	; 9
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	6c 01       	movw	r12, r24
	char ConvertedCharArray[9] = {0};// - 3digits . 3 digits
     b98:	fe 01       	movw	r30, r28
     b9a:	31 96       	adiw	r30, 0x01	; 1
     b9c:	89 e0       	ldi	r24, 0x09	; 9
     b9e:	df 01       	movw	r26, r30
     ba0:	1d 92       	st	X+, r1
     ba2:	8a 95       	dec	r24
     ba4:	e9 f7       	brne	.-6      	; 0xba0 <TransmitConvertedValues+0x30>
     ba6:	ee 24       	eor	r14, r14
     ba8:	ff 24       	eor	r15, r15

	for (int k = 0; k<75; k++) //for each of the passed samples
	{	//http://www.nongnu.org/avr-libc/user-manual/group__avr__stdlib.html#ga060c998e77fb5fc0d3168b3ce8771d42

		//		Value					, width	, precision , string
		dtostrf(ConvertedSampleArray[k], 5		,3			,ConvertedCharArray ); //converts float to string
     baa:	5f 01       	movw	r10, r30

void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
		;
	UDR = data;
     bac:	7c e2       	ldi	r23, 0x2C	; 44
     bae:	97 2e       	mov	r9, r23
     bb0:	f6 01       	movw	r30, r12
     bb2:	ee 0d       	add	r30, r14
     bb4:	ff 1d       	adc	r31, r15
     bb6:	60 81       	ld	r22, Z
     bb8:	71 81       	ldd	r23, Z+1	; 0x01
     bba:	82 81       	ldd	r24, Z+2	; 0x02
     bbc:	93 81       	ldd	r25, Z+3	; 0x03
     bbe:	45 e0       	ldi	r20, 0x05	; 5
     bc0:	23 e0       	ldi	r18, 0x03	; 3
     bc2:	85 01       	movw	r16, r10
     bc4:	0e 94 ca 09 	call	0x1394	; 0x1394 <dtostrf>
		
		USART_tx(ConvertedCharArray[0]); //sends each bit of the sample
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     bca:	5d 9b       	sbis	0x0b, 5	; 11
     bcc:	fe cf       	rjmp	.-4      	; 0xbca <TransmitConvertedValues+0x5a>
		;
	UDR = data;
     bce:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[1]); //sends each bit of the sample
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     bd2:	5d 9b       	sbis	0x0b, 5	; 11
     bd4:	fe cf       	rjmp	.-4      	; 0xbd2 <TransmitConvertedValues+0x62>
		;
	UDR = data;
     bd6:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[2]); //sends each bit of the sample
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     bda:	5d 9b       	sbis	0x0b, 5	; 11
     bdc:	fe cf       	rjmp	.-4      	; 0xbda <TransmitConvertedValues+0x6a>
		;
	UDR = data;
     bde:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[3]); //sends each bit of the sample
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     be2:	5d 9b       	sbis	0x0b, 5	; 11
     be4:	fe cf       	rjmp	.-4      	; 0xbe2 <TransmitConvertedValues+0x72>
		;
	UDR = data;
     be6:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[4]); //sends each bit of the sample
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     bea:	5d 9b       	sbis	0x0b, 5	; 11
     bec:	fe cf       	rjmp	.-4      	; 0xbea <TransmitConvertedValues+0x7a>
		;
	UDR = data;
     bee:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[5]); //sends each bit of the sample
     bf0:	8e 81       	ldd	r24, Y+6	; 0x06
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     bf2:	5d 9b       	sbis	0x0b, 5	; 11
     bf4:	fe cf       	rjmp	.-4      	; 0xbf2 <TransmitConvertedValues+0x82>
		;
	UDR = data;
     bf6:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[6]); //sends each bit of the sample
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     bfa:	5d 9b       	sbis	0x0b, 5	; 11
     bfc:	fe cf       	rjmp	.-4      	; 0xbfa <TransmitConvertedValues+0x8a>
		;
	UDR = data;
     bfe:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[7]); //sends each bit of the sample
     c00:	88 85       	ldd	r24, Y+8	; 0x08
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     c02:	5d 9b       	sbis	0x0b, 5	; 11
     c04:	fe cf       	rjmp	.-4      	; 0xc02 <TransmitConvertedValues+0x92>
		;
	UDR = data;
     c06:	8c b9       	out	0x0c, r24	; 12
		USART_tx(ConvertedCharArray[8]); //sends each bit of the sample
     c08:	89 85       	ldd	r24, Y+9	; 0x09
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     c0a:	5d 9b       	sbis	0x0b, 5	; 11
     c0c:	fe cf       	rjmp	.-4      	; 0xc0a <TransmitConvertedValues+0x9a>
		;
	UDR = data;
     c0e:	8c b9       	out	0x0c, r24	; 12
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     c10:	5d 9b       	sbis	0x0b, 5	; 11
     c12:	fe cf       	rjmp	.-4      	; 0xc10 <TransmitConvertedValues+0xa0>
		;
	UDR = data;
     c14:	9c b8       	out	0x0c, r9	; 12
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	e8 0e       	add	r14, r24
     c1c:	f9 1e       	adc	r15, r25

void TransmitConvertedValues(float *ConvertedSampleArray)
{
	char ConvertedCharArray[9] = {0};// - 3digits . 3 digits

	for (int k = 0; k<75; k++) //for each of the passed samples
     c1e:	9c e2       	ldi	r25, 0x2C	; 44
     c20:	e9 16       	cp	r14, r25
     c22:	91 e0       	ldi	r25, 0x01	; 1
     c24:	f9 06       	cpc	r15, r25
     c26:	21 f6       	brne	.-120    	; 0xbb0 <TransmitConvertedValues+0x40>
		USART_tx(ConvertedCharArray[7]); //sends each bit of the sample
		USART_tx(ConvertedCharArray[8]); //sends each bit of the sample
		USART_tx(',');
	}

}
     c28:	29 96       	adiw	r28, 0x09	; 9
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ff 90       	pop	r15
     c3e:	ef 90       	pop	r14
     c40:	df 90       	pop	r13
     c42:	cf 90       	pop	r12
     c44:	bf 90       	pop	r11
     c46:	af 90       	pop	r10
     c48:	9f 90       	pop	r9
     c4a:	08 95       	ret

00000c4c <TransmitAllSamples>:

	return sumOfAverages;
}
 
void TransmitAllSamples(int* sampleArray) 
{
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <TransmitAllSamples+0x18>
     c64:	00 d0       	rcall	.+0      	; 0xc66 <TransmitAllSamples+0x1a>
     c66:	0f 92       	push	r0
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	char sampleCharArray[5] = {0}; 	//biggest possible sample is 2^9 plus signed bit so -512 is 4 digits
     c6c:	fe 01       	movw	r30, r28
     c6e:	31 96       	adiw	r30, 0x01	; 1
     c70:	25 e0       	ldi	r18, 0x05	; 5
     c72:	df 01       	movw	r26, r30
     c74:	1d 92       	st	X+, r1
     c76:	2a 95       	dec	r18
     c78:	e9 f7       	brne	.-6      	; 0xc74 <TransmitAllSamples+0x28>
     c7a:	8c 01       	movw	r16, r24
     c7c:	ee 24       	eor	r14, r14
     c7e:	ff 24       	eor	r15, r15
			int negative = (~(sampleArray[k] - 1)) & 0x03FF;		//2's compliment of current samples
			sampleArray[k] = -negative;
		}// end if


		itoa(sampleArray[k], sampleCharArray, 10); //converts sample from signed int to string
     c80:	6f 01       	movw	r12, r30

		for(int k = 0; k<5; k++)
     c82:	f6 e0       	ldi	r31, 0x06	; 6
     c84:	af 2e       	mov	r10, r31
     c86:	b1 2c       	mov	r11, r1
     c88:	ac 0e       	add	r10, r28
     c8a:	bd 1e       	adc	r11, r29
     c8c:	ec e2       	ldi	r30, 0x2C	; 44
     c8e:	9e 2e       	mov	r9, r30
{
	char sampleCharArray[5] = {0}; 	//biggest possible sample is 2^9 plus signed bit so -512 is 4 digits

	for (int k = 0; k<75; k++) 		//for each of the passed samples
	{
		if (sampleArray[k] > 512)									//if sample taken is greater than 512 bits, do 2's compliment and make it negative
     c90:	f8 01       	movw	r30, r16
     c92:	20 81       	ld	r18, Z
     c94:	31 81       	ldd	r19, Z+1	; 0x01
     c96:	f2 e0       	ldi	r31, 0x02	; 2
     c98:	21 30       	cpi	r18, 0x01	; 1
     c9a:	3f 07       	cpc	r19, r31
     c9c:	5c f0       	brlt	.+22     	; 0xcb4 <TransmitAllSamples+0x68>
		{
			int negative = (~(sampleArray[k] - 1)) & 0x03FF;		//2's compliment of current samples
			sampleArray[k] = -negative;
     c9e:	88 27       	eor	r24, r24
     ca0:	99 27       	eor	r25, r25
     ca2:	82 1b       	sub	r24, r18
     ca4:	93 0b       	sbc	r25, r19
     ca6:	93 70       	andi	r25, 0x03	; 3
     ca8:	90 95       	com	r25
     caa:	81 95       	neg	r24
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	d8 01       	movw	r26, r16
     cb0:	8d 93       	st	X+, r24
     cb2:	9c 93       	st	X, r25
		}// end if


		itoa(sampleArray[k], sampleCharArray, 10); //converts sample from signed int to string
     cb4:	f8 01       	movw	r30, r16
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	b6 01       	movw	r22, r12
     cbc:	4a e0       	ldi	r20, 0x0A	; 10
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <itoa>
     cc4:	f6 01       	movw	r30, r12

		for(int k = 0; k<5; k++)
			USART_tx(sampleCharArray[k]); //sends each bit of the sample
     cc6:	80 81       	ld	r24, Z
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     cc8:	5d 9b       	sbis	0x0b, 5	; 11
     cca:	fe cf       	rjmp	.-4      	; 0xcc8 <TransmitAllSamples+0x7c>
		;
	UDR = data;
     ccc:	8c b9       	out	0x0c, r24	; 12
     cce:	31 96       	adiw	r30, 0x01	; 1
		}// end if


		itoa(sampleArray[k], sampleCharArray, 10); //converts sample from signed int to string

		for(int k = 0; k<5; k++)
     cd0:	ea 15       	cp	r30, r10
     cd2:	fb 05       	cpc	r31, r11
     cd4:	c1 f7       	brne	.-16     	; 0xcc6 <TransmitAllSamples+0x7a>
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     cd6:	5d 9b       	sbis	0x0b, 5	; 11
     cd8:	fe cf       	rjmp	.-4      	; 0xcd6 <TransmitAllSamples+0x8a>
		;
	UDR = data;
     cda:	9c b8       	out	0x0c, r9	; 12
 
void TransmitAllSamples(int* sampleArray) 
{
	char sampleCharArray[5] = {0}; 	//biggest possible sample is 2^9 plus signed bit so -512 is 4 digits

	for (int k = 0; k<75; k++) 		//for each of the passed samples
     cdc:	08 94       	sec
     cde:	e1 1c       	adc	r14, r1
     ce0:	f1 1c       	adc	r15, r1
     ce2:	0e 5f       	subi	r16, 0xFE	; 254
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	fb e4       	ldi	r31, 0x4B	; 75
     ce8:	ef 16       	cp	r14, r31
     cea:	f1 04       	cpc	r15, r1
     cec:	89 f6       	brne	.-94     	; 0xc90 <TransmitAllSamples+0x44>
		for(int k = 0; k<5; k++)
			USART_tx(sampleCharArray[k]); //sends each bit of the sample
		USART_tx(',');
	}
	return;
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	08 95       	ret

00000d10 <sendPowerUsage>:
		;
	return UDR;
}

void sendPowerUsage(float newAverage)
{
     d10:	6f 92       	push	r6
     d12:	7f 92       	push	r7
     d14:	8f 92       	push	r8
     d16:	9f 92       	push	r9
     d18:	af 92       	push	r10
     d1a:	bf 92       	push	r11
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	27 97       	sbiw	r28, 0x07	; 7
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	3b 01       	movw	r6, r22
     d3e:	4c 01       	movw	r8, r24
//	char *UsageString[7]  = {0};
	uint8_t digits[7] = {0};
     d40:	8e 01       	movw	r16, r28
     d42:	0f 5f       	subi	r16, 0xFF	; 255
     d44:	1f 4f       	sbci	r17, 0xFF	; 255
     d46:	87 e0       	ldi	r24, 0x07	; 7
     d48:	f8 01       	movw	r30, r16
     d4a:	11 92       	st	Z+, r1
     d4c:	8a 95       	dec	r24
     d4e:	e9 f7       	brne	.-6      	; 0xd4a <sendPowerUsage+0x3a>
	int e = log10(newAverage);
     d50:	c4 01       	movw	r24, r8
     d52:	b3 01       	movw	r22, r6
     d54:	0e 94 c3 0b 	call	0x1786	; 0x1786 <log10>
     d58:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__fixsfsi>
     d5c:	5b 01       	movw	r10, r22
     d5e:	68 01       	movw	r12, r16
     d60:	78 01       	movw	r14, r16
     d62:	03 e0       	ldi	r16, 0x03	; 3
     d64:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t index = 0;
	for(int k = 3; k>-3 ; k--)
	{
		if(e == k)
     d66:	a0 16       	cp	r10, r16
     d68:	b1 06       	cpc	r11, r17
     d6a:	e9 f4       	brne	.+58     	; 0xda6 <sendPowerUsage+0x96>
		{
			digits[index] = newAverage/pow(10,e);
     d6c:	b5 01       	movw	r22, r10
     d6e:	88 27       	eor	r24, r24
     d70:	77 fd       	sbrc	r23, 7
     d72:	80 95       	com	r24
     d74:	98 2f       	mov	r25, r24
     d76:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e2       	ldi	r24, 0x20	; 32
     d84:	91 e4       	ldi	r25, 0x41	; 65
     d86:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <pow>
     d8a:	9b 01       	movw	r18, r22
     d8c:	ac 01       	movw	r20, r24
     d8e:	c4 01       	movw	r24, r8
     d90:	b3 01       	movw	r22, r6
     d92:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
     d96:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fixunssfsi>
     d9a:	f7 01       	movw	r30, r14
     d9c:	60 83       	st	Z, r22
			e--;
     d9e:	08 94       	sec
     da0:	a1 08       	sbc	r10, r1
     da2:	b1 08       	sbc	r11, r1
     da4:	02 c0       	rjmp	.+4      	; 0xdaa <sendPowerUsage+0x9a>
		}
		else
			digits[index] = 0;
     da6:	f7 01       	movw	r30, r14
     da8:	10 82       	st	Z, r1
//	char *UsageString[7]  = {0};
	uint8_t digits[7] = {0};
	int e = log10(newAverage);

	uint8_t index = 0;
	for(int k = 3; k>-3 ; k--)
     daa:	01 50       	subi	r16, 0x01	; 1
     dac:	10 40       	sbci	r17, 0x00	; 0
     dae:	08 94       	sec
     db0:	e1 1c       	adc	r14, r1
     db2:	f1 1c       	adc	r15, r1
     db4:	ff ef       	ldi	r31, 0xFF	; 255
     db6:	0d 3f       	cpi	r16, 0xFD	; 253
     db8:	1f 07       	cpc	r17, r31
     dba:	a9 f6       	brne	.-86     	; 0xd66 <sendPowerUsage+0x56>
		else
			digits[index] = 0;
		index++;
	}

	for (uint8_t k = 0; k< 7; k++)
     dbc:	9e 01       	movw	r18, r28
     dbe:	28 5f       	subi	r18, 0xF8	; 248
     dc0:	3f 4f       	sbci	r19, 0xFF	; 255
		USART_tx(digits[k]);
     dc2:	f6 01       	movw	r30, r12
     dc4:	80 81       	ld	r24, Z
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     dc6:	5d 9b       	sbis	0x0b, 5	; 11
     dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <sendPowerUsage+0xb6>
		;
	UDR = data;
     dca:	8c b9       	out	0x0c, r24	; 12
     dcc:	08 94       	sec
     dce:	c1 1c       	adc	r12, r1
     dd0:	d1 1c       	adc	r13, r1
		else
			digits[index] = 0;
		index++;
	}

	for (uint8_t k = 0; k< 7; k++)
     dd2:	c2 16       	cp	r12, r18
     dd4:	d3 06       	cpc	r13, r19
     dd6:	a9 f7       	brne	.-22     	; 0xdc2 <sendPowerUsage+0xb2>
		USART_tx(digits[k]);
}
     dd8:	27 96       	adiw	r28, 0x07	; 7
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	f8 94       	cli
     dde:	de bf       	out	0x3e, r29	; 62
     de0:	0f be       	out	0x3f, r0	; 63
     de2:	cd bf       	out	0x3d, r28	; 61
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	af 90       	pop	r10
     df8:	9f 90       	pop	r9
     dfa:	8f 90       	pop	r8
     dfc:	7f 90       	pop	r7
     dfe:	6f 90       	pop	r6
     e00:	08 95       	ret

00000e02 <lcd_print_float>:

// prints float on LCD
void lcd_print_float(float no)
{
     e02:	8f 92       	push	r8
     e04:	9f 92       	push	r9
     e06:	af 92       	push	r10
     e08:	bf 92       	push	r11
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	5b 01       	movw	r10, r22
     e18:	6c 01       	movw	r12, r24
	uint8_t	x,i;
	int8_t	e;
	float	y;

	if(no<0)
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <__cmpsf2>
     e26:	88 23       	and	r24, r24
     e28:	44 f4       	brge	.+16     	; 0xe3a <lcd_print_float+0x38>
	{
		lcd_print_string("-");
     e2a:	80 e6       	ldi	r24, 0x60	; 96
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_print_string>
		no=(-no);
     e32:	d7 fa       	bst	r13, 7
     e34:	d0 94       	com	r13
     e36:	d7 f8       	bld	r13, 7
     e38:	d0 94       	com	r13
	}
	e=log10(no);
     e3a:	c6 01       	movw	r24, r12
     e3c:	b5 01       	movw	r22, r10
     e3e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <log10>
     e42:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <__fixsfsi>
     e46:	86 2e       	mov	r8, r22

	if(e!=0)
     e48:	66 23       	and	r22, r22
     e4a:	d9 f0       	breq	.+54     	; 0xe82 <lcd_print_float+0x80>
	{
		x=no/(pow(10,e));
     e4c:	77 27       	eor	r23, r23
     e4e:	67 fd       	sbrc	r22, 7
     e50:	70 95       	com	r23
     e52:	87 2f       	mov	r24, r23
     e54:	97 2f       	mov	r25, r23
     e56:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	91 e4       	ldi	r25, 0x41	; 65
     e66:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <pow>
     e6a:	9b 01       	movw	r18, r22
     e6c:	ac 01       	movw	r20, r24
     e6e:	c6 01       	movw	r24, r12
     e70:	b5 01       	movw	r22, r10
     e72:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
     e76:	7b 01       	movw	r14, r22
     e78:	8c 01       	movw	r16, r24
     e7a:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fixunssfsi>
     e7e:	96 2e       	mov	r9, r22
     e80:	07 c0       	rjmp	.+14     	; 0xe90 <lcd_print_float+0x8e>
		y=no/(pow(10,e));
	}
	else
	{
		x=no;
     e82:	c6 01       	movw	r24, r12
     e84:	b5 01       	movw	r22, r10
     e86:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fixunssfsi>
     e8a:	96 2e       	mov	r9, r22
     e8c:	86 01       	movw	r16, r12
     e8e:	75 01       	movw	r14, r10
		y=no;
	}
	if(x<1)
     e90:	99 20       	and	r9, r9
     e92:	e1 f4       	brne	.+56     	; 0xecc <lcd_print_float+0xca>
	{
		e--;
     e94:	8a 94       	dec	r8
		x=no/(pow(10,e));
     e96:	68 2d       	mov	r22, r8
     e98:	77 27       	eor	r23, r23
     e9a:	67 fd       	sbrc	r22, 7
     e9c:	70 95       	com	r23
     e9e:	87 2f       	mov	r24, r23
     ea0:	97 2f       	mov	r25, r23
     ea2:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e2       	ldi	r24, 0x20	; 32
     eb0:	91 e4       	ldi	r25, 0x41	; 65
     eb2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <pow>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c6 01       	movw	r24, r12
     ebc:	b5 01       	movw	r22, r10
     ebe:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <__divsf3>
     ec2:	7b 01       	movw	r14, r22
     ec4:	8c 01       	movw	r16, r24
     ec6:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fixunssfsi>
     eca:	96 2e       	mov	r9, r22
		y=no/(pow(10,e));
	}
	lcd_print_uint8(x);
     ecc:	89 2d       	mov	r24, r9
     ece:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_print_uint8>
	lcd_print_string(".");
     ed2:	82 e6       	ldi	r24, 0x62	; 98
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_print_string>
     eda:	dd 24       	eor	r13, r13

	for(i=0;i<5;i++)
	{
		y=(y-x)*10;
     edc:	69 2d       	mov	r22, r9
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	88 27       	eor	r24, r24
     ee2:	77 fd       	sbrc	r23, 7
     ee4:	80 95       	com	r24
     ee6:	98 2f       	mov	r25, r24
     ee8:	0e 94 13 0b 	call	0x1626	; 0x1626 <__floatsisf>
     eec:	9b 01       	movw	r18, r22
     eee:	ac 01       	movw	r20, r24
     ef0:	c8 01       	movw	r24, r16
     ef2:	b7 01       	movw	r22, r14
     ef4:	0e 94 0f 0a 	call	0x141e	; 0x141e <__subsf3>
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e2       	ldi	r20, 0x20	; 32
     efe:	51 e4       	ldi	r21, 0x41	; 65
     f00:	0e 94 0e 0c 	call	0x181c	; 0x181c <__mulsf3>
     f04:	7b 01       	movw	r14, r22
     f06:	8c 01       	movw	r16, r24
		x=y;
     f08:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	98 2e       	mov	r9, r24
		lcd_print_uint8(x);
     f12:	0e 94 dd 01 	call	0x3ba	; 0x3ba <lcd_print_uint8>
		y=no/(pow(10,e));
	}
	lcd_print_uint8(x);
	lcd_print_string(".");

	for(i=0;i<5;i++)
     f16:	d3 94       	inc	r13
     f18:	85 e0       	ldi	r24, 0x05	; 5
     f1a:	d8 16       	cp	r13, r24
     f1c:	f9 f6       	brne	.-66     	; 0xedc <lcd_print_float+0xda>
		x=y;
		lcd_print_uint8(x);
		
	}

	lcd_print_string("E");
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_print_string>
	lcd_print_int8(e);
     f26:	88 2d       	mov	r24, r8
     f28:	0e 94 0d 02 	call	0x41a	; 0x41a <lcd_print_int8>

}
     f2c:	1f 91       	pop	r17
     f2e:	0f 91       	pop	r16
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	08 95       	ret

00000f42 <main>:
}//end Timer counter ISR



int main(void)				//Main program start
{
     f42:	2f 92       	push	r2
     f44:	3f 92       	push	r3
     f46:	4f 92       	push	r4
     f48:	5f 92       	push	r5
     f4a:	6f 92       	push	r6
     f4c:	7f 92       	push	r7
     f4e:	8f 92       	push	r8
     f50:	9f 92       	push	r9
     f52:	af 92       	push	r10
     f54:	bf 92       	push	r11
     f56:	cf 92       	push	r12
     f58:	df 92       	push	r13
     f5a:	ef 92       	push	r14
     f5c:	ff 92       	push	r15
     f5e:	0f 93       	push	r16
     f60:	1f 93       	push	r17
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
     f6a:	29 97       	sbiw	r28, 0x09	; 9
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;			//PORTB output for flasing led test
     f76:	8f ef       	ldi	r24, 0xFF	; 255
     f78:	87 bb       	out	0x17, r24	; 23
	lcd_init();				//initialize lcd
     f7a:	0e 94 66 01 	call	0x2cc	; 0x2cc <lcd_init>
	initCounter();			//initialize counter
     f7e:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <initCounter>
	initVoltageADC();		//initialize ADC
     f82:	0e 94 29 04 	call	0x852	; 0x852 <initVoltageADC>
	USART_init(51);			//usart initialize with 9600baud
     f86:	83 e3       	ldi	r24, 0x33	; 51
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	0e 94 88 04 	call	0x910	; 0x910 <USART_init>
	sei();					//enables all interrups
     f8e:	78 94       	sei
     f90:	dd 24       	eor	r13, r13
     f92:	0f 2e       	mov	r0, r31
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ef 2e       	mov	r14, r31
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ff 2e       	mov	r15, r31
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	0f 2f       	mov	r16, r31
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	1f 2f       	mov	r17, r31
     fa4:	f0 2d       	mov	r31, r0
				powerUsage = calculateavgpower();
				newAverage = movingAveragePower(powerUsage);
				
				for (uint8_t k =0; k<75; k++)
				{
					vline[k]=0;			//return all arrays to zero
     fa6:	47 01       	movw	r8, r14
     fa8:	58 01       	movw	r10, r16
						for(uint8_t k = 0; k<5; k++)
							priceCharArray[k] = incomingPacket[k+1];
						
						//set flag to say we have a full price at outlet
						transmitPriceReply[0] = 'P';
						transmitPriceReply[1] = '1';
     faa:	91 e3       	ldi	r25, 0x31	; 49
     fac:	79 2e       	mov	r7, r25
						for(uint8_t k = 0; k<5; k++)
							transmitPriceReply[k+2] = priceCharArray[k];
						transmitPriceReply[7] = '0';
     fae:	80 e3       	ldi	r24, 0x30	; 48
     fb0:	c8 2e       	mov	r12, r24
					break;

				case _PRICE:
					if(incomingPacket[1] == _RequestChar)	//if it is a REQUEST
					{
						if(_ThisOutlet == incomingPacket[2])	//if we are the WHO
     fb2:	1e 01       	movw	r2, r28
     fb4:	08 94       	sec
     fb6:	21 1c       	adc	r2, r1
     fb8:	31 1c       	adc	r3, r1
						{
							for(uint8_t k = 0; k<9; k++)
     fba:	ba e0       	ldi	r27, 0x0A	; 10
     fbc:	4b 2e       	mov	r4, r27
     fbe:	51 2c       	mov	r5, r1
     fc0:	4c 0e       	add	r4, r28
     fc2:	5d 1e       	adc	r5, r29

void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
		;
	UDR = data;
     fc4:	a4 e4       	ldi	r26, 0x44	; 68
     fc6:	6a 2e       	mov	r6, r26
	uint8_t numberOfSetsTaken = 0;
	float newAverage = 0;
	
	while(1)
	{	
		if( numberOfSetsTaken < numberOfSetsInMovingAvgPower)
     fc8:	43 e6       	ldi	r20, 0x63	; 99
     fca:	4d 15       	cp	r20, r13
     fcc:	08 f4       	brcc	.+2      	; 0xfd0 <main+0x8e>
     fce:	66 c0       	rjmp	.+204    	; 0x109c <main+0x15a>
		{
			
			//waiting for 75 samples
			
			if(v == 75)
     fd0:	80 91 6a 00 	lds	r24, 0x006A
     fd4:	8b 34       	cpi	r24, 0x4B	; 75
     fd6:	09 f0       	breq	.+2      	; 0xfda <main+0x98>
     fd8:	75 c0       	rjmp	.+234    	; 0x10c4 <main+0x182>
			{
				
				TIMSK &= ~(1<<OCIE0);
     fda:	89 b7       	in	r24, 0x39	; 57
     fdc:	8d 7f       	andi	r24, 0xFD	; 253
     fde:	89 bf       	out	0x39, r24	; 57

				
				//TransmitAllSamples(isamples);
				//USART_tx('I');
				TransmitAllSamples(vsamples);
     fe0:	8c e6       	ldi	r24, 0x6C	; 108
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 26 06 	call	0xc4c	; 0xc4c <TransmitAllSamples>
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
     fe8:	5d 9b       	sbis	0x0b, 5	; 11
     fea:	fe cf       	rjmp	.-4      	; 0xfe8 <main+0xa6>
		;
	UDR = data;
     fec:	86 e5       	ldi	r24, 0x56	; 86
     fee:	8c b9       	out	0x0c, r24	; 12
				USART_tx('V');
				
				int newCurrentSampleMax = FindMaxCurrentSample(isamples);		//go to averaging function to get a single average of current
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <FindMaxCurrentSample>
     ff8:	bc 01       	movw	r22, r24
				FindNewGainValue(&gain, newCurrentSampleMax);					//Sets new Gain Value 1, 10 or 200, based on 75 previous Current Samples 
     ffa:	86 e6       	ldi	r24, 0x66	; 102
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	0e 94 c6 03 	call	0x78c	; 0x78c <FindNewGainValue>
					

				ConvertCurrentSamplesToAmps(isamples, iload, gain);
    1002:	80 e2       	ldi	r24, 0x20	; 32
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	73 e0       	ldi	r23, 0x03	; 3
    100a:	40 91 66 00 	lds	r20, 0x0066
    100e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <ConvertCurrentSamplesToAmps>
				ConvertVoltageSamplesToVolts(vsamples, vline);
    1012:	8c e6       	ldi	r24, 0x6C	; 108
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	64 ed       	ldi	r22, 0xD4	; 212
    1018:	71 e0       	ldi	r23, 0x01	; 1
    101a:	0e 94 32 04 	call	0x864	; 0x864 <ConvertVoltageSamplesToVolts>

				//TransmitConvertedValues(iload);
				//USART_tx('i');
				TransmitConvertedValues(vline);
    101e:	84 ed       	ldi	r24, 0xD4	; 212
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	0e 94 b8 05 	call	0xb70	; 0xb70 <TransmitConvertedValues>
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    1026:	5d 9b       	sbis	0x0b, 5	; 11
    1028:	fe cf       	rjmp	.-4      	; 0x1026 <main+0xe4>
		;
	UDR = data;
    102a:	e6 e7       	ldi	r30, 0x76	; 118
    102c:	ec b9       	out	0x0c, r30	; 12
				USART_tx('v');


				powerUsage = calculateavgpower();
    102e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <calculateavgpower>
    1032:	60 93 c0 05 	sts	0x05C0, r22
    1036:	70 93 c1 05 	sts	0x05C1, r23
    103a:	80 93 c2 05 	sts	0x05C2, r24
    103e:	90 93 c3 05 	sts	0x05C3, r25
				newAverage = movingAveragePower(powerUsage);
    1042:	0e 94 88 05 	call	0xb10	; 0xb10 <movingAveragePower>
    1046:	7b 01       	movw	r14, r22
    1048:	8c 01       	movw	r16, r24
    104a:	a4 ed       	ldi	r26, 0xD4	; 212
    104c:	b1 e0       	ldi	r27, 0x01	; 1
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	33 e0       	ldi	r19, 0x03	; 3
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
				
				for (uint8_t k =0; k<75; k++)
				{
					vline[k]=0;			//return all arrays to zero
    1056:	8d 92       	st	X+, r8
    1058:	9d 92       	st	X+, r9
    105a:	ad 92       	st	X+, r10
    105c:	bd 92       	st	X+, r11
					iload[k]=0;
    105e:	f9 01       	movw	r30, r18
    1060:	81 92       	st	Z+, r8
    1062:	91 92       	st	Z+, r9
    1064:	a1 92       	st	Z+, r10
    1066:	b1 92       	st	Z+, r11
    1068:	9f 01       	movw	r18, r30
					vsamples[k]=0;
    106a:	fc 01       	movw	r30, r24
    106c:	e4 59       	subi	r30, 0x94	; 148
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	11 82       	std	Z+1, r1	; 0x01
    1072:	10 82       	st	Z, r1
					isamples[k]=0;
    1074:	fc 01       	movw	r30, r24
    1076:	e0 5e       	subi	r30, 0xE0	; 224
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	11 82       	std	Z+1, r1	; 0x01
    107c:	10 82       	st	Z, r1
    107e:	02 96       	adiw	r24, 0x02	; 2


				powerUsage = calculateavgpower();
				newAverage = movingAveragePower(powerUsage);
				
				for (uint8_t k =0; k<75; k++)
    1080:	f3 e0       	ldi	r31, 0x03	; 3
    1082:	a0 30       	cpi	r26, 0x00	; 0
    1084:	bf 07       	cpc	r27, r31
    1086:	39 f7       	brne	.-50     	; 0x1056 <main+0x114>
					iload[k]=0;
					vsamples[k]=0;
					isamples[k]=0;
				}
				
				v = 0;      //reset sample indices to zero
    1088:	10 92 6a 00 	sts	0x006A, r1
				i = 0;
    108c:	10 92 6b 00 	sts	0x006B, r1
				numberOfSetsTaken++;
    1090:	d3 94       	inc	r13
				TCNT0 = 0x00;			//resets the timer to start counting from zero
    1092:	12 be       	out	0x32, r1	; 50
				TIMSK |= (1<<OCIE0);
    1094:	89 b7       	in	r24, 0x39	; 57
    1096:	82 60       	ori	r24, 0x02	; 2
    1098:	89 bf       	out	0x39, r24	; 57
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <main+0x182>

			}//if(v==74)
		}
		else
		{
			TIMSK &= ~(1<<OCIE0);
    109c:	89 b7       	in	r24, 0x39	; 57
    109e:	8d 7f       	andi	r24, 0xFD	; 253
    10a0:	89 bf       	out	0x39, r24	; 57
			lcd_home();
    10a2:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_home>
			lcd_clear();
    10a6:	0e 94 ad 01 	call	0x35a	; 0x35a <lcd_clear>
			lcd_print_float(newAverage);
    10aa:	c8 01       	movw	r24, r16
    10ac:	b7 01       	movw	r22, r14
    10ae:	0e 94 01 07 	call	0xe02	; 0xe02 <lcd_print_float>
			delay_ms(5000);
    10b2:	88 e8       	ldi	r24, 0x88	; 136
    10b4:	93 e1       	ldi	r25, 0x13	; 19
    10b6:	0e 94 1d 01 	call	0x23a	; 0x23a <delay_ms>
			numberOfSetsTaken = 0;
			TCNT0 = 0x00;			//resets the timer to start counting from zero
    10ba:	12 be       	out	0x32, r1	; 50
			TIMSK |= (1<<OCIE0);		//turns time counter back on
    10bc:	89 b7       	in	r24, 0x39	; 57
    10be:	82 60       	ori	r24, 0x02	; 2
    10c0:	89 bf       	out	0x39, r24	; 57
    10c2:	dd 24       	eor	r13, r13
		
		
		
		//***** Wireless Data Being Handled *****
		char transmitPriceReply[9];
		if(wirelessNew == 1)
    10c4:	80 91 d3 05 	lds	r24, 0x05D3
    10c8:	90 91 d4 05 	lds	r25, 0x05D4
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <main+0x190>
    10d0:	7b cf       	rjmp	.-266    	; 0xfc8 <main+0x86>
		{
			TIMSK &= ~(1<<OCIE0);
    10d2:	89 b7       	in	r24, 0x39	; 57
    10d4:	8d 7f       	andi	r24, 0xFD	; 253
    10d6:	89 bf       	out	0x39, r24	; 57
			switch (incomingPacket[0])
    10d8:	80 91 ca 05 	lds	r24, 0x05CA
    10dc:	80 35       	cpi	r24, 0x50	; 80
    10de:	d1 f1       	breq	.+116    	; 0x1154 <main+0x212>
    10e0:	82 35       	cpi	r24, 0x52	; 82
    10e2:	c1 f0       	breq	.+48     	; 0x1114 <main+0x1d2>
    10e4:	84 34       	cpi	r24, 0x44	; 68
    10e6:	09 f0       	breq	.+2      	; 0x10ea <main+0x1a8>
    10e8:	63 c0       	rjmp	.+198    	; 0x11b0 <main+0x26e>
			{
				case _DATA:
					if(_ThisOutlet == incomingPacket[1])	//if we are the WHO
    10ea:	80 91 cb 05 	lds	r24, 0x05CB
    10ee:	81 33       	cpi	r24, 0x31	; 49
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <main+0x1b2>
    10f2:	5e c0       	rjmp	.+188    	; 0x11b0 <main+0x26e>
					{
						if(_RequestChar == incomingPacket[2])	//if REQUEST (should always be true)
    10f4:	80 91 cc 05 	lds	r24, 0x05CC
    10f8:	81 35       	cpi	r24, 0x51	; 81
    10fa:	09 f0       	breq	.+2      	; 0x10fe <main+0x1bc>
    10fc:	59 c0       	rjmp	.+178    	; 0x11b0 <main+0x26e>
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    10fe:	5d 9b       	sbis	0x0b, 5	; 11
    1100:	fe cf       	rjmp	.-4      	; 0x10fe <main+0x1bc>
		;
	UDR = data;
    1102:	6c b8       	out	0x0c, r6	; 12
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    1104:	5d 9b       	sbis	0x0b, 5	; 11
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <main+0x1c2>
		;
	UDR = data;
    1108:	7c b8       	out	0x0c, r7	; 12
						{
							USART_tx(_DATA);//reply data
							USART_tx(_ThisOutlet);//who
							sendPowerUsage(newAverage);
    110a:	c8 01       	movw	r24, r16
    110c:	b7 01       	movw	r22, r14
    110e:	0e 94 88 06 	call	0xd10	; 0xd10 <sendPowerUsage>
    1112:	4e c0       	rjmp	.+156    	; 0x11b0 <main+0x26e>
						}//if
					}//if
					break;

				case _RELAY:
					if(_ThisOutlet == incomingPacket[1])	//if we are the WHO
    1114:	80 91 cb 05 	lds	r24, 0x05CB
    1118:	81 33       	cpi	r24, 0x31	; 49
    111a:	09 f0       	breq	.+2      	; 0x111e <main+0x1dc>
    111c:	49 c0       	rjmp	.+146    	; 0x11b0 <main+0x26e>
					{
						//read button was pushed
						if(incomingPacket[2] == _RequestChar)	//if is a REQUEST
    111e:	80 91 cc 05 	lds	r24, 0x05CC
    1122:	81 35       	cpi	r24, 0x51	; 81
    1124:	a1 f4       	brne	.+40     	; 0x114e <main+0x20c>
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    1126:	5d 9b       	sbis	0x0b, 5	; 11
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <main+0x1e4>
		;
	UDR = data;
    112a:	42 e5       	ldi	r20, 0x52	; 82
    112c:	4c b9       	out	0x0c, r20	; 12
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    112e:	5d 9b       	sbis	0x0b, 5	; 11
    1130:	fe cf       	rjmp	.-4      	; 0x112e <main+0x1ec>
		;
	UDR = data;
    1132:	7c b8       	out	0x0c, r7	; 12
						{
							USART_tx(_RELAY);		//reply relay
							USART_tx(_ThisOutlet);		//who
							USART_tx(OnOff);	//on/off current status
    1134:	80 91 c4 05 	lds	r24, 0x05C4
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    1138:	5d 9b       	sbis	0x0b, 5	; 11
    113a:	fe cf       	rjmp	.-4      	; 0x1138 <main+0x1f6>
		;
	UDR = data;
    113c:	8c b9       	out	0x0c, r24	; 12
    113e:	80 e0       	ldi	r24, 0x00	; 0
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    1140:	5d 9b       	sbis	0x0b, 5	; 11
    1142:	fe cf       	rjmp	.-4      	; 0x1140 <main+0x1fe>
		;
	UDR = data;
    1144:	cc b8       	out	0x0c, r12	; 12
							
							for(uint8_t k = 0; k<6; k++)
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	86 30       	cpi	r24, 0x06	; 6
    114a:	d1 f7       	brne	.-12     	; 0x1140 <main+0x1fe>
    114c:	31 c0       	rjmp	.+98     	; 0x11b0 <main+0x26e>
								USART_tx('0');
						}//if
						//commit button was pushed
						else
						{
							OnOff = incomingPacket[2];
    114e:	80 93 c4 05 	sts	0x05C4, r24
    1152:	2e c0       	rjmp	.+92     	; 0x11b0 <main+0x26e>
						}//else
					}//if
					break;

				case _PRICE:
					if(incomingPacket[1] == _RequestChar)	//if it is a REQUEST
    1154:	80 91 cb 05 	lds	r24, 0x05CB
    1158:	81 35       	cpi	r24, 0x51	; 81
    115a:	71 f4       	brne	.+28     	; 0x1178 <main+0x236>
					{
						if(_ThisOutlet == incomingPacket[2])	//if we are the WHO
    115c:	80 91 cc 05 	lds	r24, 0x05CC
    1160:	81 33       	cpi	r24, 0x31	; 49
    1162:	31 f5       	brne	.+76     	; 0x11b0 <main+0x26e>
    1164:	f1 01       	movw	r30, r2
						{
							for(uint8_t k = 0; k<9; k++)
								USART_tx(transmitPriceReply[k]);
    1166:	80 81       	ld	r24, Z
}//USART_Init


void USART_tx(unsigned char data)
{
	while(!(UCSRA & (1<<UDRE)))
    1168:	5d 9b       	sbis	0x0b, 5	; 11
    116a:	fe cf       	rjmp	.-4      	; 0x1168 <main+0x226>
		;
	UDR = data;
    116c:	8c b9       	out	0x0c, r24	; 12
    116e:	31 96       	adiw	r30, 0x01	; 1
				case _PRICE:
					if(incomingPacket[1] == _RequestChar)	//if it is a REQUEST
					{
						if(_ThisOutlet == incomingPacket[2])	//if we are the WHO
						{
							for(uint8_t k = 0; k<9; k++)
    1170:	e4 15       	cp	r30, r4
    1172:	f5 05       	cpc	r31, r5
    1174:	c1 f7       	brne	.-16     	; 0x1166 <main+0x224>
    1176:	1c c0       	rjmp	.+56     	; 0x11b0 <main+0x26e>
    1178:	4b ec       	ldi	r20, 0xCB	; 203
    117a:	55 e0       	ldi	r21, 0x05	; 5
    117c:	a5 ec       	ldi	r26, 0xC5	; 197
    117e:	b5 e0       	ldi	r27, 0x05	; 5
    1180:	9d 01       	movw	r18, r26
					//if the second char received isn't a REQUEST, it is
					//automatically defined as a broadcasted price ->save it
					else
					{
						for(uint8_t k = 0; k<5; k++)
							priceCharArray[k] = incomingPacket[k+1];
    1182:	fa 01       	movw	r30, r20
    1184:	81 91       	ld	r24, Z+
    1186:	af 01       	movw	r20, r30
    1188:	f9 01       	movw	r30, r18
    118a:	81 93       	st	Z+, r24
    118c:	9f 01       	movw	r18, r30
		
					//if the second char received isn't a REQUEST, it is
					//automatically defined as a broadcasted price ->save it
					else
					{
						for(uint8_t k = 0; k<5; k++)
    118e:	f5 e0       	ldi	r31, 0x05	; 5
    1190:	40 3d       	cpi	r20, 0xD0	; 208
    1192:	5f 07       	cpc	r21, r31
    1194:	b1 f7       	brne	.-20     	; 0x1182 <main+0x240>
							priceCharArray[k] = incomingPacket[k+1];
						
						//set flag to say we have a full price at outlet
						transmitPriceReply[0] = 'P';
    1196:	40 e5       	ldi	r20, 0x50	; 80
    1198:	49 83       	std	Y+1, r20	; 0x01
						transmitPriceReply[1] = '1';
    119a:	7a 82       	std	Y+2, r7	; 0x02
    119c:	fe 01       	movw	r30, r28
    119e:	33 96       	adiw	r30, 0x03	; 3
						for(uint8_t k = 0; k<5; k++)
							transmitPriceReply[k+2] = priceCharArray[k];
    11a0:	8d 91       	ld	r24, X+
    11a2:	81 93       	st	Z+, r24
							priceCharArray[k] = incomingPacket[k+1];
						
						//set flag to say we have a full price at outlet
						transmitPriceReply[0] = 'P';
						transmitPriceReply[1] = '1';
						for(uint8_t k = 0; k<5; k++)
    11a4:	85 e0       	ldi	r24, 0x05	; 5
    11a6:	aa 3c       	cpi	r26, 0xCA	; 202
    11a8:	b8 07       	cpc	r27, r24
    11aa:	d1 f7       	brne	.-12     	; 0x11a0 <main+0x25e>
							transmitPriceReply[k+2] = priceCharArray[k];
						transmitPriceReply[7] = '0';
    11ac:	c8 86       	std	Y+8, r12	; 0x08
						transmitPriceReply[8] = '0';
    11ae:	c9 86       	std	Y+9, r12	; 0x09
					break;

				default:
					break;
			}//end packetID switch
			wirelessNew = 0;		//sets that there is no New wireless packet
    11b0:	10 92 d4 05 	sts	0x05D4, r1
    11b4:	10 92 d3 05 	sts	0x05D3, r1
    11b8:	ea ec       	ldi	r30, 0xCA	; 202
    11ba:	f5 e0       	ldi	r31, 0x05	; 5
			for(uint8_t k = 0; k<9; k++)
				incomingPacket[k] = 0;	//clears packet so we know its fresh data
    11bc:	11 92       	st	Z+, r1

				default:
					break;
			}//end packetID switch
			wirelessNew = 0;		//sets that there is no New wireless packet
			for(uint8_t k = 0; k<9; k++)
    11be:	45 e0       	ldi	r20, 0x05	; 5
    11c0:	e3 3d       	cpi	r30, 0xD3	; 211
    11c2:	f4 07       	cpc	r31, r20
    11c4:	d9 f7       	brne	.-10     	; 0x11bc <main+0x27a>
				incomingPacket[k] = 0;	//clears packet so we know its fresh data

			TCNT0 = 0x00;			//resets the timer to start counting from zero
    11c6:	12 be       	out	0x32, r1	; 50
			TIMSK |= (1<<OCIE0);		//turns time counter back on
    11c8:	89 b7       	in	r24, 0x39	; 57
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	89 bf       	out	0x39, r24	; 57
    11ce:	fc ce       	rjmp	.-520    	; 0xfc8 <main+0x86>

000011d0 <lcd_printf>:
//  same for gcc for the AVR
// no formatting is implemented
// \n \t etc not yet supported
//
void lcd_printf(char *fmt, ...)
{
    11d0:	af 92       	push	r10
    11d2:	bf 92       	push	r11
    11d4:	cf 92       	push	r12
    11d6:	df 92       	push	r13
    11d8:	ef 92       	push	r14
    11da:	ff 92       	push	r15
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	60 97       	sbiw	r28, 0x10	; 16
    11ea:	0f b6       	in	r0, 0x3f	; 63
    11ec:	f8 94       	cli
    11ee:	de bf       	out	0x3e, r29	; 62
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	cd bf       	out	0x3d, r28	; 61
    11f4:	5f e1       	ldi	r21, 0x1F	; 31
    11f6:	e5 2e       	mov	r14, r21
    11f8:	f1 2c       	mov	r15, r1
    11fa:	ec 0e       	add	r14, r28
    11fc:	fd 1e       	adc	r15, r29
	double dval;
	uint16_t base,uval;
	int8_t scratch[16];

	va_start(ap,fmt);
	for(p=fmt;*p;p++)
    11fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1200:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1202:	9c 01       	movw	r18, r24
    1204:	69 01       	movw	r12, r18

			case 'x':
			case 'X':
				base = 16;
				sval = scratch + 16;
				*--sval = 0;
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	a4 2e       	mov	r10, r20
    120a:	b1 2c       	mov	r11, r1
    120c:	ac 0e       	add	r10, r28
    120e:	bd 1e       	adc	r11, r29
    1210:	ab c0       	rjmp	.+342    	; 0x1368 <lcd_printf+0x198>
	int8_t scratch[16];

	va_start(ap,fmt);
	for(p=fmt;*p;p++)
	{
		if(*p!='%')
    1212:	85 32       	cpi	r24, 0x25	; 37
    1214:	51 f0       	breq	.+20     	; 0x122a <lcd_printf+0x5a>
		{
			if(*p=='\n')
    1216:	8a 30       	cpi	r24, 0x0A	; 10
    1218:	09 f4       	brne	.+2      	; 0x121c <lcd_printf+0x4c>
    121a:	a3 c0       	rjmp	.+326    	; 0x1362 <lcd_printf+0x192>
			;
			else if(*p=='\t')
    121c:	89 30       	cpi	r24, 0x09	; 9
    121e:	09 f4       	brne	.+2      	; 0x1222 <lcd_printf+0x52>
    1220:	a0 c0       	rjmp	.+320    	; 0x1362 <lcd_printf+0x192>
			;
			else if(*p=='\b')
    1222:	88 30       	cpi	r24, 0x08	; 8
    1224:	09 f4       	brne	.+2      	; 0x1228 <lcd_printf+0x58>
    1226:	9d c0       	rjmp	.+314    	; 0x1362 <lcd_printf+0x192>
    1228:	9a c0       	rjmp	.+308    	; 0x135e <lcd_printf+0x18e>
			else
				lcd_print_char(*p);
			continue;
		}

		switch(*++p)
    122a:	08 94       	sec
    122c:	c1 1c       	adc	r12, r1
    122e:	d1 1c       	adc	r13, r1
    1230:	d6 01       	movw	r26, r12
    1232:	8c 91       	ld	r24, X
    1234:	89 36       	cpi	r24, 0x69	; 105
    1236:	f9 f0       	breq	.+62     	; 0x1276 <lcd_printf+0xa6>
    1238:	8a 36       	cpi	r24, 0x6A	; 106
    123a:	74 f4       	brge	.+28     	; 0x1258 <lcd_printf+0x88>
    123c:	83 36       	cpi	r24, 0x63	; 99
    123e:	21 f1       	breq	.+72     	; 0x1288 <lcd_printf+0xb8>
    1240:	84 36       	cpi	r24, 0x64	; 100
    1242:	24 f4       	brge	.+8      	; 0x124c <lcd_printf+0x7c>
    1244:	88 35       	cpi	r24, 0x58	; 88
    1246:	09 f0       	breq	.+2      	; 0x124a <lcd_printf+0x7a>
    1248:	8a c0       	rjmp	.+276    	; 0x135e <lcd_printf+0x18e>
    124a:	38 c0       	rjmp	.+112    	; 0x12bc <lcd_printf+0xec>
    124c:	84 36       	cpi	r24, 0x64	; 100
    124e:	99 f0       	breq	.+38     	; 0x1276 <lcd_printf+0xa6>
    1250:	86 36       	cpi	r24, 0x66	; 102
    1252:	09 f0       	breq	.+2      	; 0x1256 <lcd_printf+0x86>
    1254:	84 c0       	rjmp	.+264    	; 0x135e <lcd_printf+0x18e>
    1256:	20 c0       	rjmp	.+64     	; 0x1298 <lcd_printf+0xc8>
    1258:	83 37       	cpi	r24, 0x73	; 115
    125a:	49 f1       	breq	.+82     	; 0x12ae <lcd_printf+0xde>
    125c:	84 37       	cpi	r24, 0x74	; 116
    125e:	24 f4       	brge	.+8      	; 0x1268 <lcd_printf+0x98>
    1260:	8f 36       	cpi	r24, 0x6F	; 111
    1262:	09 f0       	breq	.+2      	; 0x1266 <lcd_printf+0x96>
    1264:	7c c0       	rjmp	.+248    	; 0x135e <lcd_printf+0x18e>
    1266:	44 c0       	rjmp	.+136    	; 0x12f0 <lcd_printf+0x120>
    1268:	85 37       	cpi	r24, 0x75	; 117
    126a:	09 f4       	brne	.+2      	; 0x126e <lcd_printf+0x9e>
    126c:	57 c0       	rjmp	.+174    	; 0x131c <lcd_printf+0x14c>
    126e:	88 37       	cpi	r24, 0x78	; 120
    1270:	09 f0       	breq	.+2      	; 0x1274 <lcd_printf+0xa4>
    1272:	75 c0       	rjmp	.+234    	; 0x135e <lcd_printf+0x18e>
    1274:	23 c0       	rjmp	.+70     	; 0x12bc <lcd_printf+0xec>
		{
			case 'd':
			case 'i':
				ival=va_arg(ap,int16_t);
    1276:	87 01       	movw	r16, r14
    1278:	0e 5f       	subi	r16, 0xFE	; 254
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
				lcd_print_int16(ival);
    127c:	f7 01       	movw	r30, r14
    127e:	80 81       	ld	r24, Z
    1280:	91 81       	ldd	r25, Z+1	; 0x01
    1282:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <lcd_print_int16>
    1286:	69 c0       	rjmp	.+210    	; 0x135a <lcd_printf+0x18a>
				break;

			case 'c':
				cval=va_arg(ap,int16_t);		// this is not clean does not work with int8_t
    1288:	87 01       	movw	r16, r14
    128a:	0e 5f       	subi	r16, 0xFE	; 254
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
}

// prints a char
void lcd_print_char(uint8_t symbol)
{
	lcd_data_write(symbol);
    128e:	d7 01       	movw	r26, r14
    1290:	8c 91       	ld	r24, X
    1292:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
    1296:	61 c0       	rjmp	.+194    	; 0x135a <lcd_printf+0x18a>
				cval=va_arg(ap,int16_t);		// this is not clean does not work with int8_t
				lcd_print_char(cval);			// this seems to be a problem
				break;							// with the va_arg macro

			case 'f':
				dval=va_arg(ap,double);
    1298:	87 01       	movw	r16, r14
    129a:	0c 5f       	subi	r16, 0xFC	; 252
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
				lcd_print_float(dval);
    129e:	f7 01       	movw	r30, r14
    12a0:	60 81       	ld	r22, Z
    12a2:	71 81       	ldd	r23, Z+1	; 0x01
    12a4:	82 81       	ldd	r24, Z+2	; 0x02
    12a6:	93 81       	ldd	r25, Z+3	; 0x03
    12a8:	0e 94 01 07 	call	0xe02	; 0xe02 <lcd_print_float>
    12ac:	56 c0       	rjmp	.+172    	; 0x135a <lcd_printf+0x18a>
				break;

			case 's':
				sval = va_arg(ap,char *);
    12ae:	87 01       	movw	r16, r14
    12b0:	0e 5f       	subi	r16, 0xFE	; 254
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
				lcd_print_string(sval);
    12b4:	d7 01       	movw	r26, r14
    12b6:	8d 91       	ld	r24, X+
    12b8:	9c 91       	ld	r25, X
    12ba:	4d c0       	rjmp	.+154    	; 0x1356 <lcd_printf+0x186>

			case 'x':
			case 'X':
				base = 16;
				sval = scratch + 16;
				*--sval = 0;
    12bc:	f5 01       	movw	r30, r10
    12be:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
    12c0:	87 01       	movw	r16, r14
    12c2:	0e 5f       	subi	r16, 0xFE	; 254
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	d7 01       	movw	r26, r14
    12c8:	6d 91       	ld	r22, X+
    12ca:	7c 91       	ld	r23, X
				do {
					char ch = uval % base + '0';
    12cc:	9b 01       	movw	r18, r22
    12ce:	2f 70       	andi	r18, 0x0F	; 15
    12d0:	30 70       	andi	r19, 0x00	; 0
    12d2:	82 2f       	mov	r24, r18
    12d4:	80 5d       	subi	r24, 0xD0	; 208
					if (ch > '9')
    12d6:	8a 33       	cpi	r24, 0x3A	; 58
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <lcd_printf+0x10c>
						ch += 'a' - '9' - 1;
    12da:	89 5d       	subi	r24, 0xD9	; 217
					*--sval = ch;
    12dc:	82 93       	st	-Z, r24
					uval /= base;
    12de:	34 e0       	ldi	r19, 0x04	; 4
    12e0:	76 95       	lsr	r23
    12e2:	67 95       	ror	r22
    12e4:	3a 95       	dec	r19
    12e6:	e1 f7       	brne	.-8      	; 0x12e0 <lcd_printf+0x110>
				} while (uval);
    12e8:	61 15       	cp	r22, r1
    12ea:	71 05       	cpc	r23, r1
    12ec:	79 f7       	brne	.-34     	; 0x12cc <lcd_printf+0xfc>
    12ee:	32 c0       	rjmp	.+100    	; 0x1354 <lcd_printf+0x184>
				break;

			case 'o':
				base = 8;
				sval = scratch + 16;
				*--sval = 0;
    12f0:	f5 01       	movw	r30, r10
    12f2:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
    12f4:	87 01       	movw	r16, r14
    12f6:	0e 5f       	subi	r16, 0xFE	; 254
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	d7 01       	movw	r26, r14
    12fc:	6d 91       	ld	r22, X+
    12fe:	7c 91       	ld	r23, X
				do {
					char ch = uval % base + '0';
					if (ch > '9')
					ch += 'a' - '9' - 1;
					*--sval = ch;
    1300:	cb 01       	movw	r24, r22
    1302:	87 70       	andi	r24, 0x07	; 7
    1304:	90 70       	andi	r25, 0x00	; 0
    1306:	80 5d       	subi	r24, 0xD0	; 208
    1308:	82 93       	st	-Z, r24
					uval /= base;
    130a:	23 e0       	ldi	r18, 0x03	; 3
    130c:	76 95       	lsr	r23
    130e:	67 95       	ror	r22
    1310:	2a 95       	dec	r18
    1312:	e1 f7       	brne	.-8      	; 0x130c <lcd_printf+0x13c>
				} while (uval);
    1314:	61 15       	cp	r22, r1
    1316:	71 05       	cpc	r23, r1
    1318:	99 f7       	brne	.-26     	; 0x1300 <lcd_printf+0x130>
    131a:	1c c0       	rjmp	.+56     	; 0x1354 <lcd_printf+0x184>
				break;

			case 'u':
				base = 10;
				sval = scratch + 16;
				*--sval = 0;
    131c:	f5 01       	movw	r30, r10
    131e:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
    1320:	87 01       	movw	r16, r14
    1322:	0e 5f       	subi	r16, 0xFE	; 254
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	d7 01       	movw	r26, r14
    1328:	2d 91       	ld	r18, X+
    132a:	3c 91       	ld	r19, X
				do {
					char ch = uval % base + '0';
    132c:	c9 01       	movw	r24, r18
    132e:	6a e0       	ldi	r22, 0x0A	; 10
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
    1336:	98 2f       	mov	r25, r24
    1338:	90 5d       	subi	r25, 0xD0	; 208
					if (ch > '9')
    133a:	9a 33       	cpi	r25, 0x3A	; 58
    133c:	08 f0       	brcs	.+2      	; 0x1340 <lcd_printf+0x170>
						ch += 'a' - '9' - 1;
    133e:	99 5d       	subi	r25, 0xD9	; 217
					*--sval = ch;
    1340:	92 93       	st	-Z, r25
					uval /= base;
    1342:	c9 01       	movw	r24, r18
    1344:	6a e0       	ldi	r22, 0x0A	; 10
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
    134c:	9b 01       	movw	r18, r22
				} while (uval);
    134e:	61 15       	cp	r22, r1
    1350:	71 05       	cpc	r23, r1
    1352:	61 f7       	brne	.-40     	; 0x132c <lcd_printf+0x15c>
				lcd_print_string(sval);
    1354:	cf 01       	movw	r24, r30
    1356:	0e 94 b8 01 	call	0x370	; 0x370 <lcd_print_string>
    135a:	78 01       	movw	r14, r16
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <lcd_printf+0x192>
}

// prints a char
void lcd_print_char(uint8_t symbol)
{
	lcd_data_write(symbol);
    135e:	0e 94 82 01 	call	0x304	; 0x304 <lcd_data_write>
	double dval;
	uint16_t base,uval;
	int8_t scratch[16];

	va_start(ap,fmt);
	for(p=fmt;*p;p++)
    1362:	08 94       	sec
    1364:	c1 1c       	adc	r12, r1
    1366:	d1 1c       	adc	r13, r1
    1368:	f6 01       	movw	r30, r12
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	09 f0       	breq	.+2      	; 0x1372 <lcd_printf+0x1a2>
    1370:	50 cf       	rjmp	.-352    	; 0x1212 <lcd_printf+0x42>
				lcd_print_char(*p);
				break;
		}
	}
	va_end(ap);
}
    1372:	60 96       	adiw	r28, 0x10	; 16
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	ff 90       	pop	r15
    1388:	ef 90       	pop	r14
    138a:	df 90       	pop	r13
    138c:	cf 90       	pop	r12
    138e:	bf 90       	pop	r11
    1390:	af 90       	pop	r10
    1392:	08 95       	ret

00001394 <dtostrf>:
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	f2 2f       	mov	r31, r18
    139e:	f0 2e       	mov	r15, r16
    13a0:	47 fd       	sbrc	r20, 7
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <dtostrf+0x14>
    13a4:	e4 e0       	ldi	r30, 0x04	; 4
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <dtostrf+0x16>
    13a8:	e4 e1       	ldi	r30, 0x14	; 20
    13aa:	24 2f       	mov	r18, r20
    13ac:	33 27       	eor	r19, r19
    13ae:	27 fd       	sbrc	r18, 7
    13b0:	30 95       	com	r19
    13b2:	37 ff       	sbrs	r19, 7
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <dtostrf+0x28>
    13b6:	30 95       	com	r19
    13b8:	21 95       	neg	r18
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	4f 2d       	mov	r20, r15
    13be:	51 2f       	mov	r21, r17
    13c0:	0f 2f       	mov	r16, r31
    13c2:	ee 2e       	mov	r14, r30
    13c4:	0e 94 bd 0c 	call	0x197a	; 0x197a <dtoa_prf>
    13c8:	8f 2d       	mov	r24, r15
    13ca:	91 2f       	mov	r25, r17
    13cc:	1f 91       	pop	r17
    13ce:	0f 91       	pop	r16
    13d0:	ff 90       	pop	r15
    13d2:	ef 90       	pop	r14
    13d4:	08 95       	ret

000013d6 <exit>:
    13d6:	f8 94       	cli
    13d8:	0c 94 52 10 	jmp	0x20a4	; 0x20a4 <_exit>

000013dc <itoa>:
    13dc:	fb 01       	movw	r30, r22
    13de:	9f 01       	movw	r18, r30
    13e0:	e8 94       	clt
    13e2:	42 30       	cpi	r20, 0x02	; 2
    13e4:	c4 f0       	brlt	.+48     	; 0x1416 <itoa+0x3a>
    13e6:	45 32       	cpi	r20, 0x25	; 37
    13e8:	b4 f4       	brge	.+44     	; 0x1416 <itoa+0x3a>
    13ea:	4a 30       	cpi	r20, 0x0A	; 10
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <itoa+0x1c>
    13ee:	97 fb       	bst	r25, 7
    13f0:	1e f4       	brtc	.+6      	; 0x13f8 <itoa+0x1c>
    13f2:	90 95       	com	r25
    13f4:	81 95       	neg	r24
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	64 2f       	mov	r22, r20
    13fa:	77 27       	eor	r23, r23
    13fc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodhi4>
    1400:	80 5d       	subi	r24, 0xD0	; 208
    1402:	8a 33       	cpi	r24, 0x3A	; 58
    1404:	0c f0       	brlt	.+2      	; 0x1408 <itoa+0x2c>
    1406:	89 5d       	subi	r24, 0xD9	; 217
    1408:	81 93       	st	Z+, r24
    140a:	cb 01       	movw	r24, r22
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	a1 f7       	brne	.-24     	; 0x13f8 <itoa+0x1c>
    1410:	16 f4       	brtc	.+4      	; 0x1416 <itoa+0x3a>
    1412:	5d e2       	ldi	r21, 0x2D	; 45
    1414:	51 93       	st	Z+, r21
    1416:	10 82       	st	Z, r1
    1418:	c9 01       	movw	r24, r18
    141a:	0c 94 f7 0e 	jmp	0x1dee	; 0x1dee <strrev>

0000141e <__subsf3>:
    141e:	50 58       	subi	r21, 0x80	; 128

00001420 <__addsf3>:
    1420:	bb 27       	eor	r27, r27
    1422:	aa 27       	eor	r26, r26
    1424:	0e d0       	rcall	.+28     	; 0x1442 <__addsf3x>
    1426:	75 c1       	rjmp	.+746    	; 0x1712 <__fp_round>
    1428:	66 d1       	rcall	.+716    	; 0x16f6 <__fp_pscA>
    142a:	30 f0       	brcs	.+12     	; 0x1438 <__addsf3+0x18>
    142c:	6b d1       	rcall	.+726    	; 0x1704 <__fp_pscB>
    142e:	20 f0       	brcs	.+8      	; 0x1438 <__addsf3+0x18>
    1430:	31 f4       	brne	.+12     	; 0x143e <__addsf3+0x1e>
    1432:	9f 3f       	cpi	r25, 0xFF	; 255
    1434:	11 f4       	brne	.+4      	; 0x143a <__addsf3+0x1a>
    1436:	1e f4       	brtc	.+6      	; 0x143e <__addsf3+0x1e>
    1438:	5b c1       	rjmp	.+694    	; 0x16f0 <__fp_nan>
    143a:	0e f4       	brtc	.+2      	; 0x143e <__addsf3+0x1e>
    143c:	e0 95       	com	r30
    143e:	e7 fb       	bst	r30, 7
    1440:	51 c1       	rjmp	.+674    	; 0x16e4 <__fp_inf>

00001442 <__addsf3x>:
    1442:	e9 2f       	mov	r30, r25
    1444:	77 d1       	rcall	.+750    	; 0x1734 <__fp_split3>
    1446:	80 f3       	brcs	.-32     	; 0x1428 <__addsf3+0x8>
    1448:	ba 17       	cp	r27, r26
    144a:	62 07       	cpc	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	84 07       	cpc	r24, r20
    1450:	95 07       	cpc	r25, r21
    1452:	18 f0       	brcs	.+6      	; 0x145a <__addsf3x+0x18>
    1454:	71 f4       	brne	.+28     	; 0x1472 <__addsf3x+0x30>
    1456:	9e f5       	brtc	.+102    	; 0x14be <__addsf3x+0x7c>
    1458:	8f c1       	rjmp	.+798    	; 0x1778 <__fp_zero>
    145a:	0e f4       	brtc	.+2      	; 0x145e <__addsf3x+0x1c>
    145c:	e0 95       	com	r30
    145e:	0b 2e       	mov	r0, r27
    1460:	ba 2f       	mov	r27, r26
    1462:	a0 2d       	mov	r26, r0
    1464:	0b 01       	movw	r0, r22
    1466:	b9 01       	movw	r22, r18
    1468:	90 01       	movw	r18, r0
    146a:	0c 01       	movw	r0, r24
    146c:	ca 01       	movw	r24, r20
    146e:	a0 01       	movw	r20, r0
    1470:	11 24       	eor	r1, r1
    1472:	ff 27       	eor	r31, r31
    1474:	59 1b       	sub	r21, r25
    1476:	99 f0       	breq	.+38     	; 0x149e <__addsf3x+0x5c>
    1478:	59 3f       	cpi	r21, 0xF9	; 249
    147a:	50 f4       	brcc	.+20     	; 0x1490 <__addsf3x+0x4e>
    147c:	50 3e       	cpi	r21, 0xE0	; 224
    147e:	68 f1       	brcs	.+90     	; 0x14da <__addsf3x+0x98>
    1480:	1a 16       	cp	r1, r26
    1482:	f0 40       	sbci	r31, 0x00	; 0
    1484:	a2 2f       	mov	r26, r18
    1486:	23 2f       	mov	r18, r19
    1488:	34 2f       	mov	r19, r20
    148a:	44 27       	eor	r20, r20
    148c:	58 5f       	subi	r21, 0xF8	; 248
    148e:	f3 cf       	rjmp	.-26     	; 0x1476 <__addsf3x+0x34>
    1490:	46 95       	lsr	r20
    1492:	37 95       	ror	r19
    1494:	27 95       	ror	r18
    1496:	a7 95       	ror	r26
    1498:	f0 40       	sbci	r31, 0x00	; 0
    149a:	53 95       	inc	r21
    149c:	c9 f7       	brne	.-14     	; 0x1490 <__addsf3x+0x4e>
    149e:	7e f4       	brtc	.+30     	; 0x14be <__addsf3x+0x7c>
    14a0:	1f 16       	cp	r1, r31
    14a2:	ba 0b       	sbc	r27, r26
    14a4:	62 0b       	sbc	r22, r18
    14a6:	73 0b       	sbc	r23, r19
    14a8:	84 0b       	sbc	r24, r20
    14aa:	ba f0       	brmi	.+46     	; 0x14da <__addsf3x+0x98>
    14ac:	91 50       	subi	r25, 0x01	; 1
    14ae:	a1 f0       	breq	.+40     	; 0x14d8 <__addsf3x+0x96>
    14b0:	ff 0f       	add	r31, r31
    14b2:	bb 1f       	adc	r27, r27
    14b4:	66 1f       	adc	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	88 1f       	adc	r24, r24
    14ba:	c2 f7       	brpl	.-16     	; 0x14ac <__addsf3x+0x6a>
    14bc:	0e c0       	rjmp	.+28     	; 0x14da <__addsf3x+0x98>
    14be:	ba 0f       	add	r27, r26
    14c0:	62 1f       	adc	r22, r18
    14c2:	73 1f       	adc	r23, r19
    14c4:	84 1f       	adc	r24, r20
    14c6:	48 f4       	brcc	.+18     	; 0x14da <__addsf3x+0x98>
    14c8:	87 95       	ror	r24
    14ca:	77 95       	ror	r23
    14cc:	67 95       	ror	r22
    14ce:	b7 95       	ror	r27
    14d0:	f7 95       	ror	r31
    14d2:	9e 3f       	cpi	r25, 0xFE	; 254
    14d4:	08 f0       	brcs	.+2      	; 0x14d8 <__addsf3x+0x96>
    14d6:	b3 cf       	rjmp	.-154    	; 0x143e <__addsf3+0x1e>
    14d8:	93 95       	inc	r25
    14da:	88 0f       	add	r24, r24
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <__addsf3x+0x9e>
    14de:	99 27       	eor	r25, r25
    14e0:	ee 0f       	add	r30, r30
    14e2:	97 95       	ror	r25
    14e4:	87 95       	ror	r24
    14e6:	08 95       	ret

000014e8 <__cmpsf2>:
    14e8:	d9 d0       	rcall	.+434    	; 0x169c <__fp_cmp>
    14ea:	08 f4       	brcc	.+2      	; 0x14ee <__cmpsf2+0x6>
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	08 95       	ret

000014f0 <__divsf3>:
    14f0:	0c d0       	rcall	.+24     	; 0x150a <__divsf3x>
    14f2:	0f c1       	rjmp	.+542    	; 0x1712 <__fp_round>
    14f4:	07 d1       	rcall	.+526    	; 0x1704 <__fp_pscB>
    14f6:	40 f0       	brcs	.+16     	; 0x1508 <__divsf3+0x18>
    14f8:	fe d0       	rcall	.+508    	; 0x16f6 <__fp_pscA>
    14fa:	30 f0       	brcs	.+12     	; 0x1508 <__divsf3+0x18>
    14fc:	21 f4       	brne	.+8      	; 0x1506 <__divsf3+0x16>
    14fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1500:	19 f0       	breq	.+6      	; 0x1508 <__divsf3+0x18>
    1502:	f0 c0       	rjmp	.+480    	; 0x16e4 <__fp_inf>
    1504:	51 11       	cpse	r21, r1
    1506:	39 c1       	rjmp	.+626    	; 0x177a <__fp_szero>
    1508:	f3 c0       	rjmp	.+486    	; 0x16f0 <__fp_nan>

0000150a <__divsf3x>:
    150a:	14 d1       	rcall	.+552    	; 0x1734 <__fp_split3>
    150c:	98 f3       	brcs	.-26     	; 0x14f4 <__divsf3+0x4>

0000150e <__divsf3_pse>:
    150e:	99 23       	and	r25, r25
    1510:	c9 f3       	breq	.-14     	; 0x1504 <__divsf3+0x14>
    1512:	55 23       	and	r21, r21
    1514:	b1 f3       	breq	.-20     	; 0x1502 <__divsf3+0x12>
    1516:	95 1b       	sub	r25, r21
    1518:	55 0b       	sbc	r21, r21
    151a:	bb 27       	eor	r27, r27
    151c:	aa 27       	eor	r26, r26
    151e:	62 17       	cp	r22, r18
    1520:	73 07       	cpc	r23, r19
    1522:	84 07       	cpc	r24, r20
    1524:	38 f0       	brcs	.+14     	; 0x1534 <__divsf3_pse+0x26>
    1526:	9f 5f       	subi	r25, 0xFF	; 255
    1528:	5f 4f       	sbci	r21, 0xFF	; 255
    152a:	22 0f       	add	r18, r18
    152c:	33 1f       	adc	r19, r19
    152e:	44 1f       	adc	r20, r20
    1530:	aa 1f       	adc	r26, r26
    1532:	a9 f3       	breq	.-22     	; 0x151e <__divsf3_pse+0x10>
    1534:	33 d0       	rcall	.+102    	; 0x159c <__divsf3_pse+0x8e>
    1536:	0e 2e       	mov	r0, r30
    1538:	3a f0       	brmi	.+14     	; 0x1548 <__divsf3_pse+0x3a>
    153a:	e0 e8       	ldi	r30, 0x80	; 128
    153c:	30 d0       	rcall	.+96     	; 0x159e <__divsf3_pse+0x90>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	50 40       	sbci	r21, 0x00	; 0
    1542:	e6 95       	lsr	r30
    1544:	00 1c       	adc	r0, r0
    1546:	ca f7       	brpl	.-14     	; 0x153a <__divsf3_pse+0x2c>
    1548:	29 d0       	rcall	.+82     	; 0x159c <__divsf3_pse+0x8e>
    154a:	fe 2f       	mov	r31, r30
    154c:	27 d0       	rcall	.+78     	; 0x159c <__divsf3_pse+0x8e>
    154e:	66 0f       	add	r22, r22
    1550:	77 1f       	adc	r23, r23
    1552:	88 1f       	adc	r24, r24
    1554:	bb 1f       	adc	r27, r27
    1556:	26 17       	cp	r18, r22
    1558:	37 07       	cpc	r19, r23
    155a:	48 07       	cpc	r20, r24
    155c:	ab 07       	cpc	r26, r27
    155e:	b0 e8       	ldi	r27, 0x80	; 128
    1560:	09 f0       	breq	.+2      	; 0x1564 <__divsf3_pse+0x56>
    1562:	bb 0b       	sbc	r27, r27
    1564:	80 2d       	mov	r24, r0
    1566:	bf 01       	movw	r22, r30
    1568:	ff 27       	eor	r31, r31
    156a:	93 58       	subi	r25, 0x83	; 131
    156c:	5f 4f       	sbci	r21, 0xFF	; 255
    156e:	2a f0       	brmi	.+10     	; 0x157a <__divsf3_pse+0x6c>
    1570:	9e 3f       	cpi	r25, 0xFE	; 254
    1572:	51 05       	cpc	r21, r1
    1574:	68 f0       	brcs	.+26     	; 0x1590 <__divsf3_pse+0x82>
    1576:	b6 c0       	rjmp	.+364    	; 0x16e4 <__fp_inf>
    1578:	00 c1       	rjmp	.+512    	; 0x177a <__fp_szero>
    157a:	5f 3f       	cpi	r21, 0xFF	; 255
    157c:	ec f3       	brlt	.-6      	; 0x1578 <__divsf3_pse+0x6a>
    157e:	98 3e       	cpi	r25, 0xE8	; 232
    1580:	dc f3       	brlt	.-10     	; 0x1578 <__divsf3_pse+0x6a>
    1582:	86 95       	lsr	r24
    1584:	77 95       	ror	r23
    1586:	67 95       	ror	r22
    1588:	b7 95       	ror	r27
    158a:	f7 95       	ror	r31
    158c:	9f 5f       	subi	r25, 0xFF	; 255
    158e:	c9 f7       	brne	.-14     	; 0x1582 <__divsf3_pse+0x74>
    1590:	88 0f       	add	r24, r24
    1592:	91 1d       	adc	r25, r1
    1594:	96 95       	lsr	r25
    1596:	87 95       	ror	r24
    1598:	97 f9       	bld	r25, 7
    159a:	08 95       	ret
    159c:	e1 e0       	ldi	r30, 0x01	; 1
    159e:	66 0f       	add	r22, r22
    15a0:	77 1f       	adc	r23, r23
    15a2:	88 1f       	adc	r24, r24
    15a4:	bb 1f       	adc	r27, r27
    15a6:	62 17       	cp	r22, r18
    15a8:	73 07       	cpc	r23, r19
    15aa:	84 07       	cpc	r24, r20
    15ac:	ba 07       	cpc	r27, r26
    15ae:	20 f0       	brcs	.+8      	; 0x15b8 <__divsf3_pse+0xaa>
    15b0:	62 1b       	sub	r22, r18
    15b2:	73 0b       	sbc	r23, r19
    15b4:	84 0b       	sbc	r24, r20
    15b6:	ba 0b       	sbc	r27, r26
    15b8:	ee 1f       	adc	r30, r30
    15ba:	88 f7       	brcc	.-30     	; 0x159e <__divsf3_pse+0x90>
    15bc:	e0 95       	com	r30
    15be:	08 95       	ret

000015c0 <__fixsfsi>:
    15c0:	04 d0       	rcall	.+8      	; 0x15ca <__fixunssfsi>
    15c2:	68 94       	set
    15c4:	b1 11       	cpse	r27, r1
    15c6:	d9 c0       	rjmp	.+434    	; 0x177a <__fp_szero>
    15c8:	08 95       	ret

000015ca <__fixunssfsi>:
    15ca:	bc d0       	rcall	.+376    	; 0x1744 <__fp_splitA>
    15cc:	88 f0       	brcs	.+34     	; 0x15f0 <__fixunssfsi+0x26>
    15ce:	9f 57       	subi	r25, 0x7F	; 127
    15d0:	90 f0       	brcs	.+36     	; 0x15f6 <__fixunssfsi+0x2c>
    15d2:	b9 2f       	mov	r27, r25
    15d4:	99 27       	eor	r25, r25
    15d6:	b7 51       	subi	r27, 0x17	; 23
    15d8:	a0 f0       	brcs	.+40     	; 0x1602 <__fixunssfsi+0x38>
    15da:	d1 f0       	breq	.+52     	; 0x1610 <__fixunssfsi+0x46>
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	1a f0       	brmi	.+6      	; 0x15ec <__fixunssfsi+0x22>
    15e6:	ba 95       	dec	r27
    15e8:	c9 f7       	brne	.-14     	; 0x15dc <__fixunssfsi+0x12>
    15ea:	12 c0       	rjmp	.+36     	; 0x1610 <__fixunssfsi+0x46>
    15ec:	b1 30       	cpi	r27, 0x01	; 1
    15ee:	81 f0       	breq	.+32     	; 0x1610 <__fixunssfsi+0x46>
    15f0:	c3 d0       	rcall	.+390    	; 0x1778 <__fp_zero>
    15f2:	b1 e0       	ldi	r27, 0x01	; 1
    15f4:	08 95       	ret
    15f6:	c0 c0       	rjmp	.+384    	; 0x1778 <__fp_zero>
    15f8:	67 2f       	mov	r22, r23
    15fa:	78 2f       	mov	r23, r24
    15fc:	88 27       	eor	r24, r24
    15fe:	b8 5f       	subi	r27, 0xF8	; 248
    1600:	39 f0       	breq	.+14     	; 0x1610 <__fixunssfsi+0x46>
    1602:	b9 3f       	cpi	r27, 0xF9	; 249
    1604:	cc f3       	brlt	.-14     	; 0x15f8 <__fixunssfsi+0x2e>
    1606:	86 95       	lsr	r24
    1608:	77 95       	ror	r23
    160a:	67 95       	ror	r22
    160c:	b3 95       	inc	r27
    160e:	d9 f7       	brne	.-10     	; 0x1606 <__fixunssfsi+0x3c>
    1610:	3e f4       	brtc	.+14     	; 0x1620 <__fixunssfsi+0x56>
    1612:	90 95       	com	r25
    1614:	80 95       	com	r24
    1616:	70 95       	com	r23
    1618:	61 95       	neg	r22
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__floatunsisf>:
    1622:	e8 94       	clt
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <__floatsisf+0x12>

00001626 <__floatsisf>:
    1626:	97 fb       	bst	r25, 7
    1628:	3e f4       	brtc	.+14     	; 0x1638 <__floatsisf+0x12>
    162a:	90 95       	com	r25
    162c:	80 95       	com	r24
    162e:	70 95       	com	r23
    1630:	61 95       	neg	r22
    1632:	7f 4f       	sbci	r23, 0xFF	; 255
    1634:	8f 4f       	sbci	r24, 0xFF	; 255
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	99 23       	and	r25, r25
    163a:	a9 f0       	breq	.+42     	; 0x1666 <__floatsisf+0x40>
    163c:	f9 2f       	mov	r31, r25
    163e:	96 e9       	ldi	r25, 0x96	; 150
    1640:	bb 27       	eor	r27, r27
    1642:	93 95       	inc	r25
    1644:	f6 95       	lsr	r31
    1646:	87 95       	ror	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b7 95       	ror	r27
    164e:	f1 11       	cpse	r31, r1
    1650:	f8 cf       	rjmp	.-16     	; 0x1642 <__floatsisf+0x1c>
    1652:	fa f4       	brpl	.+62     	; 0x1692 <__floatsisf+0x6c>
    1654:	bb 0f       	add	r27, r27
    1656:	11 f4       	brne	.+4      	; 0x165c <__floatsisf+0x36>
    1658:	60 ff       	sbrs	r22, 0
    165a:	1b c0       	rjmp	.+54     	; 0x1692 <__floatsisf+0x6c>
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	16 c0       	rjmp	.+44     	; 0x1692 <__floatsisf+0x6c>
    1666:	88 23       	and	r24, r24
    1668:	11 f0       	breq	.+4      	; 0x166e <__floatsisf+0x48>
    166a:	96 e9       	ldi	r25, 0x96	; 150
    166c:	11 c0       	rjmp	.+34     	; 0x1690 <__floatsisf+0x6a>
    166e:	77 23       	and	r23, r23
    1670:	21 f0       	breq	.+8      	; 0x167a <__floatsisf+0x54>
    1672:	9e e8       	ldi	r25, 0x8E	; 142
    1674:	87 2f       	mov	r24, r23
    1676:	76 2f       	mov	r23, r22
    1678:	05 c0       	rjmp	.+10     	; 0x1684 <__floatsisf+0x5e>
    167a:	66 23       	and	r22, r22
    167c:	71 f0       	breq	.+28     	; 0x169a <__floatsisf+0x74>
    167e:	96 e8       	ldi	r25, 0x86	; 134
    1680:	86 2f       	mov	r24, r22
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	2a f0       	brmi	.+10     	; 0x1692 <__floatsisf+0x6c>
    1688:	9a 95       	dec	r25
    168a:	66 0f       	add	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	88 1f       	adc	r24, r24
    1690:	da f7       	brpl	.-10     	; 0x1688 <__floatsisf+0x62>
    1692:	88 0f       	add	r24, r24
    1694:	96 95       	lsr	r25
    1696:	87 95       	ror	r24
    1698:	97 f9       	bld	r25, 7
    169a:	08 95       	ret

0000169c <__fp_cmp>:
    169c:	99 0f       	add	r25, r25
    169e:	00 08       	sbc	r0, r0
    16a0:	55 0f       	add	r21, r21
    16a2:	aa 0b       	sbc	r26, r26
    16a4:	e0 e8       	ldi	r30, 0x80	; 128
    16a6:	fe ef       	ldi	r31, 0xFE	; 254
    16a8:	16 16       	cp	r1, r22
    16aa:	17 06       	cpc	r1, r23
    16ac:	e8 07       	cpc	r30, r24
    16ae:	f9 07       	cpc	r31, r25
    16b0:	c0 f0       	brcs	.+48     	; 0x16e2 <__fp_cmp+0x46>
    16b2:	12 16       	cp	r1, r18
    16b4:	13 06       	cpc	r1, r19
    16b6:	e4 07       	cpc	r30, r20
    16b8:	f5 07       	cpc	r31, r21
    16ba:	98 f0       	brcs	.+38     	; 0x16e2 <__fp_cmp+0x46>
    16bc:	62 1b       	sub	r22, r18
    16be:	73 0b       	sbc	r23, r19
    16c0:	84 0b       	sbc	r24, r20
    16c2:	95 0b       	sbc	r25, r21
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <__fp_cmp+0x38>
    16c6:	0a 26       	eor	r0, r26
    16c8:	61 f0       	breq	.+24     	; 0x16e2 <__fp_cmp+0x46>
    16ca:	23 2b       	or	r18, r19
    16cc:	24 2b       	or	r18, r20
    16ce:	25 2b       	or	r18, r21
    16d0:	21 f4       	brne	.+8      	; 0x16da <__fp_cmp+0x3e>
    16d2:	08 95       	ret
    16d4:	0a 26       	eor	r0, r26
    16d6:	09 f4       	brne	.+2      	; 0x16da <__fp_cmp+0x3e>
    16d8:	a1 40       	sbci	r26, 0x01	; 1
    16da:	a6 95       	lsr	r26
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	81 1d       	adc	r24, r1
    16e0:	81 1d       	adc	r24, r1
    16e2:	08 95       	ret

000016e4 <__fp_inf>:
    16e4:	97 f9       	bld	r25, 7
    16e6:	9f 67       	ori	r25, 0x7F	; 127
    16e8:	80 e8       	ldi	r24, 0x80	; 128
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	08 95       	ret

000016f0 <__fp_nan>:
    16f0:	9f ef       	ldi	r25, 0xFF	; 255
    16f2:	80 ec       	ldi	r24, 0xC0	; 192
    16f4:	08 95       	ret

000016f6 <__fp_pscA>:
    16f6:	00 24       	eor	r0, r0
    16f8:	0a 94       	dec	r0
    16fa:	16 16       	cp	r1, r22
    16fc:	17 06       	cpc	r1, r23
    16fe:	18 06       	cpc	r1, r24
    1700:	09 06       	cpc	r0, r25
    1702:	08 95       	ret

00001704 <__fp_pscB>:
    1704:	00 24       	eor	r0, r0
    1706:	0a 94       	dec	r0
    1708:	12 16       	cp	r1, r18
    170a:	13 06       	cpc	r1, r19
    170c:	14 06       	cpc	r1, r20
    170e:	05 06       	cpc	r0, r21
    1710:	08 95       	ret

00001712 <__fp_round>:
    1712:	09 2e       	mov	r0, r25
    1714:	03 94       	inc	r0
    1716:	00 0c       	add	r0, r0
    1718:	11 f4       	brne	.+4      	; 0x171e <__fp_round+0xc>
    171a:	88 23       	and	r24, r24
    171c:	52 f0       	brmi	.+20     	; 0x1732 <__fp_round+0x20>
    171e:	bb 0f       	add	r27, r27
    1720:	40 f4       	brcc	.+16     	; 0x1732 <__fp_round+0x20>
    1722:	bf 2b       	or	r27, r31
    1724:	11 f4       	brne	.+4      	; 0x172a <__fp_round+0x18>
    1726:	60 ff       	sbrs	r22, 0
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <__fp_round+0x20>
    172a:	6f 5f       	subi	r22, 0xFF	; 255
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	8f 4f       	sbci	r24, 0xFF	; 255
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	08 95       	ret

00001734 <__fp_split3>:
    1734:	57 fd       	sbrc	r21, 7
    1736:	90 58       	subi	r25, 0x80	; 128
    1738:	44 0f       	add	r20, r20
    173a:	55 1f       	adc	r21, r21
    173c:	59 f0       	breq	.+22     	; 0x1754 <__fp_splitA+0x10>
    173e:	5f 3f       	cpi	r21, 0xFF	; 255
    1740:	71 f0       	breq	.+28     	; 0x175e <__fp_splitA+0x1a>
    1742:	47 95       	ror	r20

00001744 <__fp_splitA>:
    1744:	88 0f       	add	r24, r24
    1746:	97 fb       	bst	r25, 7
    1748:	99 1f       	adc	r25, r25
    174a:	61 f0       	breq	.+24     	; 0x1764 <__fp_splitA+0x20>
    174c:	9f 3f       	cpi	r25, 0xFF	; 255
    174e:	79 f0       	breq	.+30     	; 0x176e <__fp_splitA+0x2a>
    1750:	87 95       	ror	r24
    1752:	08 95       	ret
    1754:	12 16       	cp	r1, r18
    1756:	13 06       	cpc	r1, r19
    1758:	14 06       	cpc	r1, r20
    175a:	55 1f       	adc	r21, r21
    175c:	f2 cf       	rjmp	.-28     	; 0x1742 <__fp_split3+0xe>
    175e:	46 95       	lsr	r20
    1760:	f1 df       	rcall	.-30     	; 0x1744 <__fp_splitA>
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <__fp_splitA+0x30>
    1764:	16 16       	cp	r1, r22
    1766:	17 06       	cpc	r1, r23
    1768:	18 06       	cpc	r1, r24
    176a:	99 1f       	adc	r25, r25
    176c:	f1 cf       	rjmp	.-30     	; 0x1750 <__fp_splitA+0xc>
    176e:	86 95       	lsr	r24
    1770:	71 05       	cpc	r23, r1
    1772:	61 05       	cpc	r22, r1
    1774:	08 94       	sec
    1776:	08 95       	ret

00001778 <__fp_zero>:
    1778:	e8 94       	clt

0000177a <__fp_szero>:
    177a:	bb 27       	eor	r27, r27
    177c:	66 27       	eor	r22, r22
    177e:	77 27       	eor	r23, r23
    1780:	cb 01       	movw	r24, r22
    1782:	97 f9       	bld	r25, 7
    1784:	08 95       	ret

00001786 <log10>:
    1786:	0a d0       	rcall	.+20     	; 0x179c <log>
    1788:	29 ed       	ldi	r18, 0xD9	; 217
    178a:	3b e5       	ldi	r19, 0x5B	; 91
    178c:	4e ed       	ldi	r20, 0xDE	; 222
    178e:	5e e3       	ldi	r21, 0x3E	; 62
    1790:	45 c0       	rjmp	.+138    	; 0x181c <__mulsf3>
    1792:	0e f0       	brts	.+2      	; 0x1796 <log10+0x10>
    1794:	6d c3       	rjmp	.+1754   	; 0x1e70 <__fp_mpack>
    1796:	ac cf       	rjmp	.-168    	; 0x16f0 <__fp_nan>
    1798:	68 94       	set
    179a:	a4 cf       	rjmp	.-184    	; 0x16e4 <__fp_inf>

0000179c <log>:
    179c:	d3 df       	rcall	.-90     	; 0x1744 <__fp_splitA>
    179e:	c8 f3       	brcs	.-14     	; 0x1792 <log10+0xc>
    17a0:	99 23       	and	r25, r25
    17a2:	d1 f3       	breq	.-12     	; 0x1798 <log10+0x12>
    17a4:	c6 f3       	brts	.-16     	; 0x1796 <log10+0x10>
    17a6:	df 93       	push	r29
    17a8:	cf 93       	push	r28
    17aa:	1f 93       	push	r17
    17ac:	0f 93       	push	r16
    17ae:	ff 92       	push	r15
    17b0:	c9 2f       	mov	r28, r25
    17b2:	dd 27       	eor	r29, r29
    17b4:	88 23       	and	r24, r24
    17b6:	2a f0       	brmi	.+10     	; 0x17c2 <log+0x26>
    17b8:	21 97       	sbiw	r28, 0x01	; 1
    17ba:	66 0f       	add	r22, r22
    17bc:	77 1f       	adc	r23, r23
    17be:	88 1f       	adc	r24, r24
    17c0:	da f7       	brpl	.-10     	; 0x17b8 <log+0x1c>
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f eb       	ldi	r21, 0xBF	; 191
    17ca:	9f e3       	ldi	r25, 0x3F	; 63
    17cc:	88 39       	cpi	r24, 0x98	; 152
    17ce:	20 f0       	brcs	.+8      	; 0x17d8 <log+0x3c>
    17d0:	80 3e       	cpi	r24, 0xE0	; 224
    17d2:	30 f0       	brcs	.+12     	; 0x17e0 <log+0x44>
    17d4:	21 96       	adiw	r28, 0x01	; 1
    17d6:	8f 77       	andi	r24, 0x7F	; 127
    17d8:	23 de       	rcall	.-954    	; 0x1420 <__addsf3>
    17da:	e4 e5       	ldi	r30, 0x54	; 84
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	03 c0       	rjmp	.+6      	; 0x17e6 <log+0x4a>
    17e0:	1f de       	rcall	.-962    	; 0x1420 <__addsf3>
    17e2:	e1 e8       	ldi	r30, 0x81	; 129
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	52 d3       	rcall	.+1700   	; 0x1e8c <__fp_powser>
    17e8:	8b 01       	movw	r16, r22
    17ea:	be 01       	movw	r22, r28
    17ec:	ec 01       	movw	r28, r24
    17ee:	fb 2e       	mov	r15, r27
    17f0:	6f 57       	subi	r22, 0x7F	; 127
    17f2:	71 09       	sbc	r23, r1
    17f4:	75 95       	asr	r23
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 0b       	sbc	r24, r24
    17fa:	99 0b       	sbc	r25, r25
    17fc:	14 df       	rcall	.-472    	; 0x1626 <__floatsisf>
    17fe:	28 e1       	ldi	r18, 0x18	; 24
    1800:	32 e7       	ldi	r19, 0x72	; 114
    1802:	41 e3       	ldi	r20, 0x31	; 49
    1804:	5f e3       	ldi	r21, 0x3F	; 63
    1806:	16 d0       	rcall	.+44     	; 0x1834 <__mulsf3x>
    1808:	af 2d       	mov	r26, r15
    180a:	98 01       	movw	r18, r16
    180c:	ae 01       	movw	r20, r28
    180e:	ff 90       	pop	r15
    1810:	0f 91       	pop	r16
    1812:	1f 91       	pop	r17
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	14 de       	rcall	.-984    	; 0x1442 <__addsf3x>
    181a:	7b cf       	rjmp	.-266    	; 0x1712 <__fp_round>

0000181c <__mulsf3>:
    181c:	0b d0       	rcall	.+22     	; 0x1834 <__mulsf3x>
    181e:	79 cf       	rjmp	.-270    	; 0x1712 <__fp_round>
    1820:	6a df       	rcall	.-300    	; 0x16f6 <__fp_pscA>
    1822:	28 f0       	brcs	.+10     	; 0x182e <__mulsf3+0x12>
    1824:	6f df       	rcall	.-290    	; 0x1704 <__fp_pscB>
    1826:	18 f0       	brcs	.+6      	; 0x182e <__mulsf3+0x12>
    1828:	95 23       	and	r25, r21
    182a:	09 f0       	breq	.+2      	; 0x182e <__mulsf3+0x12>
    182c:	5b cf       	rjmp	.-330    	; 0x16e4 <__fp_inf>
    182e:	60 cf       	rjmp	.-320    	; 0x16f0 <__fp_nan>
    1830:	11 24       	eor	r1, r1
    1832:	a3 cf       	rjmp	.-186    	; 0x177a <__fp_szero>

00001834 <__mulsf3x>:
    1834:	7f df       	rcall	.-258    	; 0x1734 <__fp_split3>
    1836:	a0 f3       	brcs	.-24     	; 0x1820 <__mulsf3+0x4>

00001838 <__mulsf3_pse>:
    1838:	95 9f       	mul	r25, r21
    183a:	d1 f3       	breq	.-12     	; 0x1830 <__mulsf3+0x14>
    183c:	95 0f       	add	r25, r21
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	55 1f       	adc	r21, r21
    1842:	62 9f       	mul	r22, r18
    1844:	f0 01       	movw	r30, r0
    1846:	72 9f       	mul	r23, r18
    1848:	bb 27       	eor	r27, r27
    184a:	f0 0d       	add	r31, r0
    184c:	b1 1d       	adc	r27, r1
    184e:	63 9f       	mul	r22, r19
    1850:	aa 27       	eor	r26, r26
    1852:	f0 0d       	add	r31, r0
    1854:	b1 1d       	adc	r27, r1
    1856:	aa 1f       	adc	r26, r26
    1858:	64 9f       	mul	r22, r20
    185a:	66 27       	eor	r22, r22
    185c:	b0 0d       	add	r27, r0
    185e:	a1 1d       	adc	r26, r1
    1860:	66 1f       	adc	r22, r22
    1862:	82 9f       	mul	r24, r18
    1864:	22 27       	eor	r18, r18
    1866:	b0 0d       	add	r27, r0
    1868:	a1 1d       	adc	r26, r1
    186a:	62 1f       	adc	r22, r18
    186c:	73 9f       	mul	r23, r19
    186e:	b0 0d       	add	r27, r0
    1870:	a1 1d       	adc	r26, r1
    1872:	62 1f       	adc	r22, r18
    1874:	83 9f       	mul	r24, r19
    1876:	a0 0d       	add	r26, r0
    1878:	61 1d       	adc	r22, r1
    187a:	22 1f       	adc	r18, r18
    187c:	74 9f       	mul	r23, r20
    187e:	33 27       	eor	r19, r19
    1880:	a0 0d       	add	r26, r0
    1882:	61 1d       	adc	r22, r1
    1884:	23 1f       	adc	r18, r19
    1886:	84 9f       	mul	r24, r20
    1888:	60 0d       	add	r22, r0
    188a:	21 1d       	adc	r18, r1
    188c:	82 2f       	mov	r24, r18
    188e:	76 2f       	mov	r23, r22
    1890:	6a 2f       	mov	r22, r26
    1892:	11 24       	eor	r1, r1
    1894:	9f 57       	subi	r25, 0x7F	; 127
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	8a f0       	brmi	.+34     	; 0x18bc <__mulsf3_pse+0x84>
    189a:	e1 f0       	breq	.+56     	; 0x18d4 <__mulsf3_pse+0x9c>
    189c:	88 23       	and	r24, r24
    189e:	4a f0       	brmi	.+18     	; 0x18b2 <__mulsf3_pse+0x7a>
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	bb 1f       	adc	r27, r27
    18a6:	66 1f       	adc	r22, r22
    18a8:	77 1f       	adc	r23, r23
    18aa:	88 1f       	adc	r24, r24
    18ac:	91 50       	subi	r25, 0x01	; 1
    18ae:	50 40       	sbci	r21, 0x00	; 0
    18b0:	a9 f7       	brne	.-22     	; 0x189c <__mulsf3_pse+0x64>
    18b2:	9e 3f       	cpi	r25, 0xFE	; 254
    18b4:	51 05       	cpc	r21, r1
    18b6:	70 f0       	brcs	.+28     	; 0x18d4 <__mulsf3_pse+0x9c>
    18b8:	15 cf       	rjmp	.-470    	; 0x16e4 <__fp_inf>
    18ba:	5f cf       	rjmp	.-322    	; 0x177a <__fp_szero>
    18bc:	5f 3f       	cpi	r21, 0xFF	; 255
    18be:	ec f3       	brlt	.-6      	; 0x18ba <__mulsf3_pse+0x82>
    18c0:	98 3e       	cpi	r25, 0xE8	; 232
    18c2:	dc f3       	brlt	.-10     	; 0x18ba <__mulsf3_pse+0x82>
    18c4:	86 95       	lsr	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b7 95       	ror	r27
    18cc:	f7 95       	ror	r31
    18ce:	e7 95       	ror	r30
    18d0:	9f 5f       	subi	r25, 0xFF	; 255
    18d2:	c1 f7       	brne	.-16     	; 0x18c4 <__mulsf3_pse+0x8c>
    18d4:	fe 2b       	or	r31, r30
    18d6:	88 0f       	add	r24, r24
    18d8:	91 1d       	adc	r25, r1
    18da:	96 95       	lsr	r25
    18dc:	87 95       	ror	r24
    18de:	97 f9       	bld	r25, 7
    18e0:	08 95       	ret

000018e2 <pow>:
    18e2:	fa 01       	movw	r30, r20
    18e4:	ee 0f       	add	r30, r30
    18e6:	ff 1f       	adc	r31, r31
    18e8:	30 96       	adiw	r30, 0x00	; 0
    18ea:	21 05       	cpc	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	99 f1       	breq	.+102    	; 0x1956 <pow+0x74>
    18f0:	61 15       	cp	r22, r1
    18f2:	71 05       	cpc	r23, r1
    18f4:	61 f4       	brne	.+24     	; 0x190e <pow+0x2c>
    18f6:	80 38       	cpi	r24, 0x80	; 128
    18f8:	bf e3       	ldi	r27, 0x3F	; 63
    18fa:	9b 07       	cpc	r25, r27
    18fc:	49 f1       	breq	.+82     	; 0x1950 <pow+0x6e>
    18fe:	68 94       	set
    1900:	90 38       	cpi	r25, 0x80	; 128
    1902:	81 05       	cpc	r24, r1
    1904:	61 f0       	breq	.+24     	; 0x191e <pow+0x3c>
    1906:	80 38       	cpi	r24, 0x80	; 128
    1908:	bf ef       	ldi	r27, 0xFF	; 255
    190a:	9b 07       	cpc	r25, r27
    190c:	41 f0       	breq	.+16     	; 0x191e <pow+0x3c>
    190e:	99 23       	and	r25, r25
    1910:	42 f5       	brpl	.+80     	; 0x1962 <pow+0x80>
    1912:	ff 3f       	cpi	r31, 0xFF	; 255
    1914:	e1 05       	cpc	r30, r1
    1916:	31 05       	cpc	r19, r1
    1918:	21 05       	cpc	r18, r1
    191a:	11 f1       	breq	.+68     	; 0x1960 <pow+0x7e>
    191c:	e8 94       	clt
    191e:	08 94       	sec
    1920:	e7 95       	ror	r30
    1922:	d9 01       	movw	r26, r18
    1924:	aa 23       	and	r26, r26
    1926:	29 f4       	brne	.+10     	; 0x1932 <pow+0x50>
    1928:	ab 2f       	mov	r26, r27
    192a:	be 2f       	mov	r27, r30
    192c:	f8 5f       	subi	r31, 0xF8	; 248
    192e:	d0 f3       	brcs	.-12     	; 0x1924 <pow+0x42>
    1930:	10 c0       	rjmp	.+32     	; 0x1952 <pow+0x70>
    1932:	ff 5f       	subi	r31, 0xFF	; 255
    1934:	70 f4       	brcc	.+28     	; 0x1952 <pow+0x70>
    1936:	a6 95       	lsr	r26
    1938:	e0 f7       	brcc	.-8      	; 0x1932 <pow+0x50>
    193a:	f7 39       	cpi	r31, 0x97	; 151
    193c:	50 f0       	brcs	.+20     	; 0x1952 <pow+0x70>
    193e:	19 f0       	breq	.+6      	; 0x1946 <pow+0x64>
    1940:	ff 3a       	cpi	r31, 0xAF	; 175
    1942:	38 f4       	brcc	.+14     	; 0x1952 <pow+0x70>
    1944:	9f 77       	andi	r25, 0x7F	; 127
    1946:	9f 93       	push	r25
    1948:	0c d0       	rcall	.+24     	; 0x1962 <pow+0x80>
    194a:	0f 90       	pop	r0
    194c:	07 fc       	sbrc	r0, 7
    194e:	90 58       	subi	r25, 0x80	; 128
    1950:	08 95       	ret
    1952:	3e f0       	brts	.+14     	; 0x1962 <pow+0x80>
    1954:	cd ce       	rjmp	.-614    	; 0x16f0 <__fp_nan>
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	80 e8       	ldi	r24, 0x80	; 128
    195c:	9f e3       	ldi	r25, 0x3F	; 63
    195e:	08 95       	ret
    1960:	4f e7       	ldi	r20, 0x7F	; 127
    1962:	9f 77       	andi	r25, 0x7F	; 127
    1964:	5f 93       	push	r21
    1966:	4f 93       	push	r20
    1968:	3f 93       	push	r19
    196a:	2f 93       	push	r18
    196c:	17 df       	rcall	.-466    	; 0x179c <log>
    196e:	2f 91       	pop	r18
    1970:	3f 91       	pop	r19
    1972:	4f 91       	pop	r20
    1974:	5f 91       	pop	r21
    1976:	52 df       	rcall	.-348    	; 0x181c <__mulsf3>
    1978:	4f c2       	rjmp	.+1182   	; 0x1e18 <exp>

0000197a <dtoa_prf>:
    197a:	a9 e0       	ldi	r26, 0x09	; 9
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e3 ec       	ldi	r30, 0xC3	; 195
    1980:	fc e0       	ldi	r31, 0x0C	; 12
    1982:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__prologue_saves__+0x8>
    1986:	6a 01       	movw	r12, r20
    1988:	12 2f       	mov	r17, r18
    198a:	a0 2e       	mov	r10, r16
    198c:	be 2c       	mov	r11, r14
    198e:	2b e3       	ldi	r18, 0x3B	; 59
    1990:	20 17       	cp	r18, r16
    1992:	18 f4       	brcc	.+6      	; 0x199a <dtoa_prf+0x20>
    1994:	2c e3       	ldi	r18, 0x3C	; 60
    1996:	92 2e       	mov	r9, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <dtoa_prf+0x24>
    199a:	90 2e       	mov	r9, r16
    199c:	93 94       	inc	r9
    199e:	ae 01       	movw	r20, r28
    19a0:	4f 5f       	subi	r20, 0xFF	; 255
    19a2:	5f 4f       	sbci	r21, 0xFF	; 255
    19a4:	27 e0       	ldi	r18, 0x07	; 7
    19a6:	09 2d       	mov	r16, r9
    19a8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <__ftoa_engine>
    19ac:	bc 01       	movw	r22, r24
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	e8 2e       	mov	r14, r24
    19b2:	ff 24       	eor	r15, r15
    19b4:	c7 01       	movw	r24, r14
    19b6:	89 70       	andi	r24, 0x09	; 9
    19b8:	90 70       	andi	r25, 0x00	; 0
    19ba:	01 97       	sbiw	r24, 0x01	; 1
    19bc:	11 f4       	brne	.+4      	; 0x19c2 <dtoa_prf+0x48>
    19be:	ad e2       	ldi	r26, 0x2D	; 45
    19c0:	09 c0       	rjmp	.+18     	; 0x19d4 <dtoa_prf+0x5a>
    19c2:	b1 fe       	sbrs	r11, 1
    19c4:	02 c0       	rjmp	.+4      	; 0x19ca <dtoa_prf+0x50>
    19c6:	ab e2       	ldi	r26, 0x2B	; 43
    19c8:	05 c0       	rjmp	.+10     	; 0x19d4 <dtoa_prf+0x5a>
    19ca:	b0 fc       	sbrc	r11, 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <dtoa_prf+0x58>
    19ce:	a0 e0       	ldi	r26, 0x00	; 0
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <dtoa_prf+0x5a>
    19d2:	a0 e2       	ldi	r26, 0x20	; 32
    19d4:	e3 fe       	sbrs	r14, 3
    19d6:	3b c0       	rjmp	.+118    	; 0x1a4e <dtoa_prf+0xd4>
    19d8:	aa 23       	and	r26, r26
    19da:	11 f4       	brne	.+4      	; 0x19e0 <dtoa_prf+0x66>
    19dc:	23 e0       	ldi	r18, 0x03	; 3
    19de:	01 c0       	rjmp	.+2      	; 0x19e2 <dtoa_prf+0x68>
    19e0:	24 e0       	ldi	r18, 0x04	; 4
    19e2:	21 17       	cp	r18, r17
    19e4:	10 f0       	brcs	.+4      	; 0x19ea <dtoa_prf+0x70>
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <dtoa_prf+0x74>
    19ea:	12 1b       	sub	r17, r18
    19ec:	21 2f       	mov	r18, r17
    19ee:	eb 2c       	mov	r14, r11
    19f0:	b4 fe       	sbrs	r11, 4
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <dtoa_prf+0x7e>
    19f4:	32 2f       	mov	r19, r18
    19f6:	0a c0       	rjmp	.+20     	; 0x1a0c <dtoa_prf+0x92>
    19f8:	f6 01       	movw	r30, r12
    19fa:	32 2f       	mov	r19, r18
    19fc:	80 e2       	ldi	r24, 0x20	; 32
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <dtoa_prf+0x8a>
    1a00:	81 93       	st	Z+, r24
    1a02:	31 50       	subi	r19, 0x01	; 1
    1a04:	33 23       	and	r19, r19
    1a06:	e1 f7       	brne	.-8      	; 0x1a00 <dtoa_prf+0x86>
    1a08:	c2 0e       	add	r12, r18
    1a0a:	d1 1c       	adc	r13, r1
    1a0c:	aa 23       	and	r26, r26
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <dtoa_prf+0x9c>
    1a10:	f6 01       	movw	r30, r12
    1a12:	a1 93       	st	Z+, r26
    1a14:	6f 01       	movw	r12, r30
    1a16:	f6 01       	movw	r30, r12
    1a18:	31 96       	adiw	r30, 0x01	; 1
    1a1a:	e2 fe       	sbrs	r14, 2
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <dtoa_prf+0xae>
    1a1e:	9e e4       	ldi	r25, 0x4E	; 78
    1a20:	d6 01       	movw	r26, r12
    1a22:	9c 93       	st	X, r25
    1a24:	81 e4       	ldi	r24, 0x41	; 65
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <dtoa_prf+0xb6>
    1a28:	9e e6       	ldi	r25, 0x6E	; 110
    1a2a:	d6 01       	movw	r26, r12
    1a2c:	9c 93       	st	X, r25
    1a2e:	81 e6       	ldi	r24, 0x61	; 97
    1a30:	11 96       	adiw	r26, 0x01	; 1
    1a32:	8c 93       	st	X, r24
    1a34:	91 83       	std	Z+1, r25	; 0x01
    1a36:	32 96       	adiw	r30, 0x02	; 2
    1a38:	df 01       	movw	r26, r30
    1a3a:	83 2f       	mov	r24, r19
    1a3c:	90 e2       	ldi	r25, 0x20	; 32
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <dtoa_prf+0xca>
    1a40:	9d 93       	st	X+, r25
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	88 23       	and	r24, r24
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <dtoa_prf+0xc6>
    1a48:	e3 0f       	add	r30, r19
    1a4a:	f1 1d       	adc	r31, r1
    1a4c:	40 c0       	rjmp	.+128    	; 0x1ace <dtoa_prf+0x154>
    1a4e:	e2 fe       	sbrs	r14, 2
    1a50:	42 c0       	rjmp	.+132    	; 0x1ad6 <dtoa_prf+0x15c>
    1a52:	aa 23       	and	r26, r26
    1a54:	11 f4       	brne	.+4      	; 0x1a5a <dtoa_prf+0xe0>
    1a56:	23 e0       	ldi	r18, 0x03	; 3
    1a58:	01 c0       	rjmp	.+2      	; 0x1a5c <dtoa_prf+0xe2>
    1a5a:	24 e0       	ldi	r18, 0x04	; 4
    1a5c:	21 17       	cp	r18, r17
    1a5e:	10 f0       	brcs	.+4      	; 0x1a64 <dtoa_prf+0xea>
    1a60:	20 e0       	ldi	r18, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <dtoa_prf+0xee>
    1a64:	12 1b       	sub	r17, r18
    1a66:	21 2f       	mov	r18, r17
    1a68:	eb 2c       	mov	r14, r11
    1a6a:	b4 fe       	sbrs	r11, 4
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <dtoa_prf+0xf8>
    1a6e:	92 2f       	mov	r25, r18
    1a70:	0a c0       	rjmp	.+20     	; 0x1a86 <dtoa_prf+0x10c>
    1a72:	f6 01       	movw	r30, r12
    1a74:	92 2f       	mov	r25, r18
    1a76:	80 e2       	ldi	r24, 0x20	; 32
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <dtoa_prf+0x104>
    1a7a:	81 93       	st	Z+, r24
    1a7c:	91 50       	subi	r25, 0x01	; 1
    1a7e:	99 23       	and	r25, r25
    1a80:	e1 f7       	brne	.-8      	; 0x1a7a <dtoa_prf+0x100>
    1a82:	c2 0e       	add	r12, r18
    1a84:	d1 1c       	adc	r13, r1
    1a86:	aa 23       	and	r26, r26
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <dtoa_prf+0x116>
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	a1 93       	st	Z+, r26
    1a8e:	6f 01       	movw	r12, r30
    1a90:	f6 01       	movw	r30, r12
    1a92:	31 96       	adiw	r30, 0x01	; 1
    1a94:	e2 fe       	sbrs	r14, 2
    1a96:	08 c0       	rjmp	.+16     	; 0x1aa8 <dtoa_prf+0x12e>
    1a98:	89 e4       	ldi	r24, 0x49	; 73
    1a9a:	d6 01       	movw	r26, r12
    1a9c:	8c 93       	st	X, r24
    1a9e:	8e e4       	ldi	r24, 0x4E	; 78
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	8c 93       	st	X, r24
    1aa4:	86 e4       	ldi	r24, 0x46	; 70
    1aa6:	07 c0       	rjmp	.+14     	; 0x1ab6 <dtoa_prf+0x13c>
    1aa8:	89 e6       	ldi	r24, 0x69	; 105
    1aaa:	d6 01       	movw	r26, r12
    1aac:	8c 93       	st	X, r24
    1aae:	8e e6       	ldi	r24, 0x6E	; 110
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	8c 93       	st	X, r24
    1ab4:	86 e6       	ldi	r24, 0x66	; 102
    1ab6:	81 83       	std	Z+1, r24	; 0x01
    1ab8:	32 96       	adiw	r30, 0x02	; 2
    1aba:	df 01       	movw	r26, r30
    1abc:	89 2f       	mov	r24, r25
    1abe:	20 e2       	ldi	r18, 0x20	; 32
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <dtoa_prf+0x14c>
    1ac2:	2d 93       	st	X+, r18
    1ac4:	81 50       	subi	r24, 0x01	; 1
    1ac6:	88 23       	and	r24, r24
    1ac8:	e1 f7       	brne	.-8      	; 0x1ac2 <dtoa_prf+0x148>
    1aca:	e9 0f       	add	r30, r25
    1acc:	f1 1d       	adc	r31, r1
    1ace:	10 82       	st	Z, r1
    1ad0:	2e ef       	ldi	r18, 0xFE	; 254
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	af c0       	rjmp	.+350    	; 0x1c34 <dtoa_prf+0x2ba>
    1ad6:	16 16       	cp	r1, r22
    1ad8:	17 06       	cpc	r1, r23
    1ada:	1c f0       	brlt	.+6      	; 0x1ae2 <dtoa_prf+0x168>
    1adc:	41 e0       	ldi	r20, 0x01	; 1
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	03 c0       	rjmp	.+6      	; 0x1ae8 <dtoa_prf+0x16e>
    1ae2:	ab 01       	movw	r20, r22
    1ae4:	4f 5f       	subi	r20, 0xFF	; 255
    1ae6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae8:	aa 20       	and	r10, r10
    1aea:	19 f4       	brne	.+6      	; 0x1af2 <dtoa_prf+0x178>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	03 c0       	rjmp	.+6      	; 0x1af8 <dtoa_prf+0x17e>
    1af2:	8a 2d       	mov	r24, r10
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	aa 23       	and	r26, r26
    1afe:	11 f0       	breq	.+4      	; 0x1b04 <dtoa_prf+0x18a>
    1b00:	21 e0       	ldi	r18, 0x01	; 1
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	24 0f       	add	r18, r20
    1b06:	35 1f       	adc	r19, r21
    1b08:	28 0f       	add	r18, r24
    1b0a:	39 1f       	adc	r19, r25
    1b0c:	81 2f       	mov	r24, r17
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	28 17       	cp	r18, r24
    1b12:	39 07       	cpc	r19, r25
    1b14:	14 f0       	brlt	.+4      	; 0x1b1a <dtoa_prf+0x1a0>
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <dtoa_prf+0x1a4>
    1b1a:	12 1b       	sub	r17, r18
    1b1c:	21 2f       	mov	r18, r17
    1b1e:	4b 2d       	mov	r20, r11
    1b20:	50 e0       	ldi	r21, 0x00	; 0
    1b22:	ca 01       	movw	r24, r20
    1b24:	80 71       	andi	r24, 0x10	; 16
    1b26:	90 70       	andi	r25, 0x00	; 0
    1b28:	b4 fc       	sbrc	r11, 4
    1b2a:	0d c0       	rjmp	.+26     	; 0x1b46 <dtoa_prf+0x1cc>
    1b2c:	b3 fc       	sbrc	r11, 3
    1b2e:	0b c0       	rjmp	.+22     	; 0x1b46 <dtoa_prf+0x1cc>
    1b30:	f6 01       	movw	r30, r12
    1b32:	32 2f       	mov	r19, r18
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <dtoa_prf+0x1c2>
    1b38:	41 93       	st	Z+, r20
    1b3a:	31 50       	subi	r19, 0x01	; 1
    1b3c:	33 23       	and	r19, r19
    1b3e:	e1 f7       	brne	.-8      	; 0x1b38 <dtoa_prf+0x1be>
    1b40:	c2 0e       	add	r12, r18
    1b42:	d1 1c       	adc	r13, r1
    1b44:	01 c0       	rjmp	.+2      	; 0x1b48 <dtoa_prf+0x1ce>
    1b46:	32 2f       	mov	r19, r18
    1b48:	aa 23       	and	r26, r26
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <dtoa_prf+0x1d8>
    1b4c:	f6 01       	movw	r30, r12
    1b4e:	a1 93       	st	Z+, r26
    1b50:	6f 01       	movw	r12, r30
    1b52:	89 2b       	or	r24, r25
    1b54:	11 f0       	breq	.+4      	; 0x1b5a <dtoa_prf+0x1e0>
    1b56:	13 2f       	mov	r17, r19
    1b58:	0a c0       	rjmp	.+20     	; 0x1b6e <dtoa_prf+0x1f4>
    1b5a:	f6 01       	movw	r30, r12
    1b5c:	13 2f       	mov	r17, r19
    1b5e:	80 e3       	ldi	r24, 0x30	; 48
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <dtoa_prf+0x1ec>
    1b62:	81 93       	st	Z+, r24
    1b64:	11 50       	subi	r17, 0x01	; 1
    1b66:	11 23       	and	r17, r17
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <dtoa_prf+0x1e8>
    1b6a:	c3 0e       	add	r12, r19
    1b6c:	d1 1c       	adc	r13, r1
    1b6e:	09 2d       	mov	r16, r9
    1b70:	06 0f       	add	r16, r22
    1b72:	ba 80       	ldd	r11, Y+2	; 0x02
    1b74:	90 e1       	ldi	r25, 0x10	; 16
    1b76:	89 2e       	mov	r8, r25
    1b78:	91 2c       	mov	r9, r1
    1b7a:	8e 20       	and	r8, r14
    1b7c:	9f 20       	and	r9, r15
    1b7e:	e4 fe       	sbrs	r14, 4
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <dtoa_prf+0x210>
    1b82:	f1 e3       	ldi	r31, 0x31	; 49
    1b84:	bf 16       	cp	r11, r31
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <dtoa_prf+0x210>
    1b88:	01 50       	subi	r16, 0x01	; 1
    1b8a:	10 16       	cp	r1, r16
    1b8c:	14 f0       	brlt	.+4      	; 0x1b92 <dtoa_prf+0x218>
    1b8e:	01 e0       	ldi	r16, 0x01	; 1
    1b90:	03 c0       	rjmp	.+6      	; 0x1b98 <dtoa_prf+0x21e>
    1b92:	09 30       	cpi	r16, 0x09	; 9
    1b94:	08 f0       	brcs	.+2      	; 0x1b98 <dtoa_prf+0x21e>
    1b96:	08 e0       	ldi	r16, 0x08	; 8
    1b98:	9b 01       	movw	r18, r22
    1b9a:	77 ff       	sbrs	r23, 7
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <dtoa_prf+0x228>
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	82 1b       	sub	r24, r18
    1ba8:	93 0b       	sbc	r25, r19
    1baa:	fe 01       	movw	r30, r28
    1bac:	31 96       	adiw	r30, 0x01	; 1
    1bae:	e8 0f       	add	r30, r24
    1bb0:	f9 1f       	adc	r31, r25
    1bb2:	8e e2       	ldi	r24, 0x2E	; 46
    1bb4:	f8 2e       	mov	r15, r24
    1bb6:	3b 01       	movw	r6, r22
    1bb8:	60 1a       	sub	r6, r16
    1bba:	71 08       	sbc	r7, r1
    1bbc:	8a 2d       	mov	r24, r10
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	44 27       	eor	r20, r20
    1bc2:	55 27       	eor	r21, r21
    1bc4:	48 1b       	sub	r20, r24
    1bc6:	59 0b       	sbc	r21, r25
    1bc8:	8f ef       	ldi	r24, 0xFF	; 255
    1bca:	2f 3f       	cpi	r18, 0xFF	; 255
    1bcc:	38 07       	cpc	r19, r24
    1bce:	19 f4       	brne	.+6      	; 0x1bd6 <dtoa_prf+0x25c>
    1bd0:	d6 01       	movw	r26, r12
    1bd2:	fd 92       	st	X+, r15
    1bd4:	6d 01       	movw	r12, r26
    1bd6:	62 17       	cp	r22, r18
    1bd8:	73 07       	cpc	r23, r19
    1bda:	2c f0       	brlt	.+10     	; 0x1be6 <dtoa_prf+0x26c>
    1bdc:	62 16       	cp	r6, r18
    1bde:	73 06       	cpc	r7, r19
    1be0:	14 f4       	brge	.+4      	; 0x1be6 <dtoa_prf+0x26c>
    1be2:	80 81       	ld	r24, Z
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <dtoa_prf+0x26e>
    1be6:	80 e3       	ldi	r24, 0x30	; 48
    1be8:	21 50       	subi	r18, 0x01	; 1
    1bea:	30 40       	sbci	r19, 0x00	; 0
    1bec:	31 96       	adiw	r30, 0x01	; 1
    1bee:	24 17       	cp	r18, r20
    1bf0:	35 07       	cpc	r19, r21
    1bf2:	24 f0       	brlt	.+8      	; 0x1bfc <dtoa_prf+0x282>
    1bf4:	d6 01       	movw	r26, r12
    1bf6:	8d 93       	st	X+, r24
    1bf8:	6d 01       	movw	r12, r26
    1bfa:	e6 cf       	rjmp	.-52     	; 0x1bc8 <dtoa_prf+0x24e>
    1bfc:	26 17       	cp	r18, r22
    1bfe:	37 07       	cpc	r19, r23
    1c00:	49 f4       	brne	.+18     	; 0x1c14 <dtoa_prf+0x29a>
    1c02:	b5 e3       	ldi	r27, 0x35	; 53
    1c04:	bb 15       	cp	r27, r11
    1c06:	28 f0       	brcs	.+10     	; 0x1c12 <dtoa_prf+0x298>
    1c08:	bb 16       	cp	r11, r27
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <dtoa_prf+0x29a>
    1c0c:	81 14       	cp	r8, r1
    1c0e:	91 04       	cpc	r9, r1
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <dtoa_prf+0x29a>
    1c12:	81 e3       	ldi	r24, 0x31	; 49
    1c14:	f6 01       	movw	r30, r12
    1c16:	81 93       	st	Z+, r24
    1c18:	d6 01       	movw	r26, r12
    1c1a:	81 2f       	mov	r24, r17
    1c1c:	90 e2       	ldi	r25, 0x20	; 32
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <dtoa_prf+0x2aa>
    1c20:	9c 93       	st	X, r25
    1c22:	81 50       	subi	r24, 0x01	; 1
    1c24:	11 96       	adiw	r26, 0x01	; 1
    1c26:	88 23       	and	r24, r24
    1c28:	d9 f7       	brne	.-10     	; 0x1c20 <dtoa_prf+0x2a6>
    1c2a:	e1 0f       	add	r30, r17
    1c2c:	f1 1d       	adc	r31, r1
    1c2e:	10 82       	st	Z, r1
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	c9 01       	movw	r24, r18
    1c36:	29 96       	adiw	r28, 0x09	; 9
    1c38:	ee e0       	ldi	r30, 0x0E	; 14
    1c3a:	0c 94 3b 10 	jmp	0x2076	; 0x2076 <__epilogue_restores__+0x8>

00001c3e <__ftoa_engine>:
    1c3e:	28 30       	cpi	r18, 0x08	; 8
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__ftoa_engine+0x6>
    1c42:	27 e0       	ldi	r18, 0x07	; 7
    1c44:	33 27       	eor	r19, r19
    1c46:	da 01       	movw	r26, r20
    1c48:	99 0f       	add	r25, r25
    1c4a:	31 1d       	adc	r19, r1
    1c4c:	87 fd       	sbrc	r24, 7
    1c4e:	91 60       	ori	r25, 0x01	; 1
    1c50:	00 96       	adiw	r24, 0x00	; 0
    1c52:	61 05       	cpc	r22, r1
    1c54:	71 05       	cpc	r23, r1
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <__ftoa_engine+0x28>
    1c58:	32 60       	ori	r19, 0x02	; 2
    1c5a:	2e 5f       	subi	r18, 0xFE	; 254
    1c5c:	3d 93       	st	X+, r19
    1c5e:	30 e3       	ldi	r19, 0x30	; 48
    1c60:	2a 95       	dec	r18
    1c62:	e1 f7       	brne	.-8      	; 0x1c5c <__ftoa_engine+0x1e>
    1c64:	08 95       	ret
    1c66:	9f 3f       	cpi	r25, 0xFF	; 255
    1c68:	30 f0       	brcs	.+12     	; 0x1c76 <__ftoa_engine+0x38>
    1c6a:	80 38       	cpi	r24, 0x80	; 128
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	61 05       	cpc	r22, r1
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <__ftoa_engine+0x36>
    1c72:	3c 5f       	subi	r19, 0xFC	; 252
    1c74:	3c 5f       	subi	r19, 0xFC	; 252
    1c76:	3d 93       	st	X+, r19
    1c78:	91 30       	cpi	r25, 0x01	; 1
    1c7a:	08 f0       	brcs	.+2      	; 0x1c7e <__ftoa_engine+0x40>
    1c7c:	80 68       	ori	r24, 0x80	; 128
    1c7e:	91 1d       	adc	r25, r1
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	1f 93       	push	r17
    1c86:	0f 93       	push	r16
    1c88:	ff 92       	push	r15
    1c8a:	ef 92       	push	r14
    1c8c:	19 2f       	mov	r17, r25
    1c8e:	98 7f       	andi	r25, 0xF8	; 248
    1c90:	96 95       	lsr	r25
    1c92:	e9 2f       	mov	r30, r25
    1c94:	96 95       	lsr	r25
    1c96:	96 95       	lsr	r25
    1c98:	e9 0f       	add	r30, r25
    1c9a:	ff 27       	eor	r31, r31
    1c9c:	e0 5d       	subi	r30, 0xD0	; 208
    1c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca0:	99 27       	eor	r25, r25
    1ca2:	33 27       	eor	r19, r19
    1ca4:	ee 24       	eor	r14, r14
    1ca6:	ff 24       	eor	r15, r15
    1ca8:	a7 01       	movw	r20, r14
    1caa:	e7 01       	movw	r28, r14
    1cac:	05 90       	lpm	r0, Z+
    1cae:	08 94       	sec
    1cb0:	07 94       	ror	r0
    1cb2:	28 f4       	brcc	.+10     	; 0x1cbe <__ftoa_engine+0x80>
    1cb4:	36 0f       	add	r19, r22
    1cb6:	e7 1e       	adc	r14, r23
    1cb8:	f8 1e       	adc	r15, r24
    1cba:	49 1f       	adc	r20, r25
    1cbc:	51 1d       	adc	r21, r1
    1cbe:	66 0f       	add	r22, r22
    1cc0:	77 1f       	adc	r23, r23
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	06 94       	lsr	r0
    1cc8:	a1 f7       	brne	.-24     	; 0x1cb2 <__ftoa_engine+0x74>
    1cca:	05 90       	lpm	r0, Z+
    1ccc:	07 94       	ror	r0
    1cce:	28 f4       	brcc	.+10     	; 0x1cda <__ftoa_engine+0x9c>
    1cd0:	e7 0e       	add	r14, r23
    1cd2:	f8 1e       	adc	r15, r24
    1cd4:	49 1f       	adc	r20, r25
    1cd6:	56 1f       	adc	r21, r22
    1cd8:	c1 1d       	adc	r28, r1
    1cda:	77 0f       	add	r23, r23
    1cdc:	88 1f       	adc	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	66 1f       	adc	r22, r22
    1ce2:	06 94       	lsr	r0
    1ce4:	a1 f7       	brne	.-24     	; 0x1cce <__ftoa_engine+0x90>
    1ce6:	05 90       	lpm	r0, Z+
    1ce8:	07 94       	ror	r0
    1cea:	28 f4       	brcc	.+10     	; 0x1cf6 <__ftoa_engine+0xb8>
    1cec:	f8 0e       	add	r15, r24
    1cee:	49 1f       	adc	r20, r25
    1cf0:	56 1f       	adc	r21, r22
    1cf2:	c7 1f       	adc	r28, r23
    1cf4:	d1 1d       	adc	r29, r1
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	66 1f       	adc	r22, r22
    1cfc:	77 1f       	adc	r23, r23
    1cfe:	06 94       	lsr	r0
    1d00:	a1 f7       	brne	.-24     	; 0x1cea <__ftoa_engine+0xac>
    1d02:	05 90       	lpm	r0, Z+
    1d04:	07 94       	ror	r0
    1d06:	20 f4       	brcc	.+8      	; 0x1d10 <__ftoa_engine+0xd2>
    1d08:	49 0f       	add	r20, r25
    1d0a:	56 1f       	adc	r21, r22
    1d0c:	c7 1f       	adc	r28, r23
    1d0e:	d8 1f       	adc	r29, r24
    1d10:	99 0f       	add	r25, r25
    1d12:	66 1f       	adc	r22, r22
    1d14:	77 1f       	adc	r23, r23
    1d16:	88 1f       	adc	r24, r24
    1d18:	06 94       	lsr	r0
    1d1a:	a9 f7       	brne	.-22     	; 0x1d06 <__ftoa_engine+0xc8>
    1d1c:	84 91       	lpm	r24, Z+
    1d1e:	10 95       	com	r17
    1d20:	17 70       	andi	r17, 0x07	; 7
    1d22:	41 f0       	breq	.+16     	; 0x1d34 <__ftoa_engine+0xf6>
    1d24:	d6 95       	lsr	r29
    1d26:	c7 95       	ror	r28
    1d28:	57 95       	ror	r21
    1d2a:	47 95       	ror	r20
    1d2c:	f7 94       	ror	r15
    1d2e:	e7 94       	ror	r14
    1d30:	1a 95       	dec	r17
    1d32:	c1 f7       	brne	.-16     	; 0x1d24 <__ftoa_engine+0xe6>
    1d34:	e6 ed       	ldi	r30, 0xD6	; 214
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	68 94       	set
    1d3a:	15 90       	lpm	r1, Z+
    1d3c:	15 91       	lpm	r17, Z+
    1d3e:	35 91       	lpm	r19, Z+
    1d40:	65 91       	lpm	r22, Z+
    1d42:	95 91       	lpm	r25, Z+
    1d44:	05 90       	lpm	r0, Z+
    1d46:	7f e2       	ldi	r23, 0x2F	; 47
    1d48:	73 95       	inc	r23
    1d4a:	e1 18       	sub	r14, r1
    1d4c:	f1 0a       	sbc	r15, r17
    1d4e:	43 0b       	sbc	r20, r19
    1d50:	56 0b       	sbc	r21, r22
    1d52:	c9 0b       	sbc	r28, r25
    1d54:	d0 09       	sbc	r29, r0
    1d56:	c0 f7       	brcc	.-16     	; 0x1d48 <__ftoa_engine+0x10a>
    1d58:	e1 0c       	add	r14, r1
    1d5a:	f1 1e       	adc	r15, r17
    1d5c:	43 1f       	adc	r20, r19
    1d5e:	56 1f       	adc	r21, r22
    1d60:	c9 1f       	adc	r28, r25
    1d62:	d0 1d       	adc	r29, r0
    1d64:	7e f4       	brtc	.+30     	; 0x1d84 <__ftoa_engine+0x146>
    1d66:	70 33       	cpi	r23, 0x30	; 48
    1d68:	11 f4       	brne	.+4      	; 0x1d6e <__ftoa_engine+0x130>
    1d6a:	8a 95       	dec	r24
    1d6c:	e6 cf       	rjmp	.-52     	; 0x1d3a <__ftoa_engine+0xfc>
    1d6e:	e8 94       	clt
    1d70:	01 50       	subi	r16, 0x01	; 1
    1d72:	30 f0       	brcs	.+12     	; 0x1d80 <__ftoa_engine+0x142>
    1d74:	08 0f       	add	r16, r24
    1d76:	0a f4       	brpl	.+2      	; 0x1d7a <__ftoa_engine+0x13c>
    1d78:	00 27       	eor	r16, r16
    1d7a:	02 17       	cp	r16, r18
    1d7c:	08 f4       	brcc	.+2      	; 0x1d80 <__ftoa_engine+0x142>
    1d7e:	20 2f       	mov	r18, r16
    1d80:	23 95       	inc	r18
    1d82:	02 2f       	mov	r16, r18
    1d84:	7a 33       	cpi	r23, 0x3A	; 58
    1d86:	28 f0       	brcs	.+10     	; 0x1d92 <__ftoa_engine+0x154>
    1d88:	79 e3       	ldi	r23, 0x39	; 57
    1d8a:	7d 93       	st	X+, r23
    1d8c:	2a 95       	dec	r18
    1d8e:	e9 f7       	brne	.-6      	; 0x1d8a <__ftoa_engine+0x14c>
    1d90:	10 c0       	rjmp	.+32     	; 0x1db2 <__ftoa_engine+0x174>
    1d92:	7d 93       	st	X+, r23
    1d94:	2a 95       	dec	r18
    1d96:	89 f6       	brne	.-94     	; 0x1d3a <__ftoa_engine+0xfc>
    1d98:	06 94       	lsr	r0
    1d9a:	97 95       	ror	r25
    1d9c:	67 95       	ror	r22
    1d9e:	37 95       	ror	r19
    1da0:	17 95       	ror	r17
    1da2:	17 94       	ror	r1
    1da4:	e1 18       	sub	r14, r1
    1da6:	f1 0a       	sbc	r15, r17
    1da8:	43 0b       	sbc	r20, r19
    1daa:	56 0b       	sbc	r21, r22
    1dac:	c9 0b       	sbc	r28, r25
    1dae:	d0 09       	sbc	r29, r0
    1db0:	98 f0       	brcs	.+38     	; 0x1dd8 <__ftoa_engine+0x19a>
    1db2:	23 95       	inc	r18
    1db4:	7e 91       	ld	r23, -X
    1db6:	73 95       	inc	r23
    1db8:	7a 33       	cpi	r23, 0x3A	; 58
    1dba:	08 f0       	brcs	.+2      	; 0x1dbe <__ftoa_engine+0x180>
    1dbc:	70 e3       	ldi	r23, 0x30	; 48
    1dbe:	7c 93       	st	X, r23
    1dc0:	20 13       	cpse	r18, r16
    1dc2:	b8 f7       	brcc	.-18     	; 0x1db2 <__ftoa_engine+0x174>
    1dc4:	7e 91       	ld	r23, -X
    1dc6:	70 61       	ori	r23, 0x10	; 16
    1dc8:	7d 93       	st	X+, r23
    1dca:	30 f0       	brcs	.+12     	; 0x1dd8 <__ftoa_engine+0x19a>
    1dcc:	83 95       	inc	r24
    1dce:	71 e3       	ldi	r23, 0x31	; 49
    1dd0:	7d 93       	st	X+, r23
    1dd2:	70 e3       	ldi	r23, 0x30	; 48
    1dd4:	2a 95       	dec	r18
    1dd6:	e1 f7       	brne	.-8      	; 0x1dd0 <__ftoa_engine+0x192>
    1dd8:	11 24       	eor	r1, r1
    1dda:	ef 90       	pop	r14
    1ddc:	ff 90       	pop	r15
    1dde:	0f 91       	pop	r16
    1de0:	1f 91       	pop	r17
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	99 27       	eor	r25, r25
    1de8:	87 fd       	sbrc	r24, 7
    1dea:	90 95       	com	r25
    1dec:	08 95       	ret

00001dee <strrev>:
    1dee:	dc 01       	movw	r26, r24
    1df0:	fc 01       	movw	r30, r24
    1df2:	67 2f       	mov	r22, r23
    1df4:	71 91       	ld	r23, Z+
    1df6:	77 23       	and	r23, r23
    1df8:	e1 f7       	brne	.-8      	; 0x1df2 <strrev+0x4>
    1dfa:	32 97       	sbiw	r30, 0x02	; 2
    1dfc:	04 c0       	rjmp	.+8      	; 0x1e06 <strrev+0x18>
    1dfe:	7c 91       	ld	r23, X
    1e00:	6d 93       	st	X+, r22
    1e02:	70 83       	st	Z, r23
    1e04:	62 91       	ld	r22, -Z
    1e06:	ae 17       	cp	r26, r30
    1e08:	bf 07       	cpc	r27, r31
    1e0a:	c8 f3       	brcs	.-14     	; 0x1dfe <strrev+0x10>
    1e0c:	08 95       	ret
    1e0e:	19 f4       	brne	.+6      	; 0x1e16 <strrev+0x28>
    1e10:	0e f0       	brts	.+2      	; 0x1e14 <strrev+0x26>
    1e12:	68 cc       	rjmp	.-1840   	; 0x16e4 <__fp_inf>
    1e14:	b1 cc       	rjmp	.-1694   	; 0x1778 <__fp_zero>
    1e16:	6c cc       	rjmp	.-1832   	; 0x16f0 <__fp_nan>

00001e18 <exp>:
    1e18:	95 dc       	rcall	.-1750   	; 0x1744 <__fp_splitA>
    1e1a:	c8 f3       	brcs	.-14     	; 0x1e0e <strrev+0x20>
    1e1c:	96 38       	cpi	r25, 0x86	; 134
    1e1e:	c0 f7       	brcc	.-16     	; 0x1e10 <strrev+0x22>
    1e20:	07 f8       	bld	r0, 7
    1e22:	0f 92       	push	r0
    1e24:	e8 94       	clt
    1e26:	2b e3       	ldi	r18, 0x3B	; 59
    1e28:	3a ea       	ldi	r19, 0xAA	; 170
    1e2a:	48 eb       	ldi	r20, 0xB8	; 184
    1e2c:	5f e7       	ldi	r21, 0x7F	; 127
    1e2e:	04 dd       	rcall	.-1528   	; 0x1838 <__mulsf3_pse>
    1e30:	0f 92       	push	r0
    1e32:	0f 92       	push	r0
    1e34:	0f 92       	push	r0
    1e36:	4d b7       	in	r20, 0x3d	; 61
    1e38:	5e b7       	in	r21, 0x3e	; 62
    1e3a:	0f 92       	push	r0
    1e3c:	89 d0       	rcall	.+274    	; 0x1f50 <modf>
    1e3e:	ee ea       	ldi	r30, 0xAE	; 174
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	24 d0       	rcall	.+72     	; 0x1e8c <__fp_powser>
    1e44:	4f 91       	pop	r20
    1e46:	5f 91       	pop	r21
    1e48:	ef 91       	pop	r30
    1e4a:	ff 91       	pop	r31
    1e4c:	e5 95       	asr	r30
    1e4e:	ee 1f       	adc	r30, r30
    1e50:	ff 1f       	adc	r31, r31
    1e52:	49 f0       	breq	.+18     	; 0x1e66 <exp+0x4e>
    1e54:	fe 57       	subi	r31, 0x7E	; 126
    1e56:	e0 68       	ori	r30, 0x80	; 128
    1e58:	44 27       	eor	r20, r20
    1e5a:	ee 0f       	add	r30, r30
    1e5c:	44 1f       	adc	r20, r20
    1e5e:	fa 95       	dec	r31
    1e60:	e1 f7       	brne	.-8      	; 0x1e5a <exp+0x42>
    1e62:	41 95       	neg	r20
    1e64:	55 0b       	sbc	r21, r21
    1e66:	40 d0       	rcall	.+128    	; 0x1ee8 <ldexp>
    1e68:	0f 90       	pop	r0
    1e6a:	07 fe       	sbrs	r0, 7
    1e6c:	34 c0       	rjmp	.+104    	; 0x1ed6 <inverse>
    1e6e:	08 95       	ret

00001e70 <__fp_mpack>:
    1e70:	9f 3f       	cpi	r25, 0xFF	; 255
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <__fp_mpack_finite+0xc>

00001e74 <__fp_mpack_finite>:
    1e74:	91 50       	subi	r25, 0x01	; 1
    1e76:	20 f4       	brcc	.+8      	; 0x1e80 <__fp_mpack_finite+0xc>
    1e78:	87 95       	ror	r24
    1e7a:	77 95       	ror	r23
    1e7c:	67 95       	ror	r22
    1e7e:	b7 95       	ror	r27
    1e80:	88 0f       	add	r24, r24
    1e82:	91 1d       	adc	r25, r1
    1e84:	96 95       	lsr	r25
    1e86:	87 95       	ror	r24
    1e88:	97 f9       	bld	r25, 7
    1e8a:	08 95       	ret

00001e8c <__fp_powser>:
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	1f 93       	push	r17
    1e92:	0f 93       	push	r16
    1e94:	ff 92       	push	r15
    1e96:	ef 92       	push	r14
    1e98:	df 92       	push	r13
    1e9a:	7b 01       	movw	r14, r22
    1e9c:	8c 01       	movw	r16, r24
    1e9e:	68 94       	set
    1ea0:	05 c0       	rjmp	.+10     	; 0x1eac <__fp_powser+0x20>
    1ea2:	da 2e       	mov	r13, r26
    1ea4:	ef 01       	movw	r28, r30
    1ea6:	c6 dc       	rcall	.-1652   	; 0x1834 <__mulsf3x>
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e8 94       	clt
    1eac:	a5 91       	lpm	r26, Z+
    1eae:	25 91       	lpm	r18, Z+
    1eb0:	35 91       	lpm	r19, Z+
    1eb2:	45 91       	lpm	r20, Z+
    1eb4:	55 91       	lpm	r21, Z+
    1eb6:	ae f3       	brts	.-22     	; 0x1ea2 <__fp_powser+0x16>
    1eb8:	ef 01       	movw	r28, r30
    1eba:	c3 da       	rcall	.-2682   	; 0x1442 <__addsf3x>
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	97 01       	movw	r18, r14
    1ec0:	a8 01       	movw	r20, r16
    1ec2:	da 94       	dec	r13
    1ec4:	79 f7       	brne	.-34     	; 0x1ea4 <__fp_powser+0x18>
    1ec6:	df 90       	pop	r13
    1ec8:	ef 90       	pop	r14
    1eca:	ff 90       	pop	r15
    1ecc:	0f 91       	pop	r16
    1ece:	1f 91       	pop	r17
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <inverse>:
    1ed6:	9b 01       	movw	r18, r22
    1ed8:	ac 01       	movw	r20, r24
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	70 e0       	ldi	r23, 0x00	; 0
    1ede:	80 e8       	ldi	r24, 0x80	; 128
    1ee0:	9f e3       	ldi	r25, 0x3F	; 63
    1ee2:	06 cb       	rjmp	.-2548   	; 0x14f0 <__divsf3>
    1ee4:	ff cb       	rjmp	.-2050   	; 0x16e4 <__fp_inf>
    1ee6:	c4 cf       	rjmp	.-120    	; 0x1e70 <__fp_mpack>

00001ee8 <ldexp>:
    1ee8:	2d dc       	rcall	.-1958   	; 0x1744 <__fp_splitA>
    1eea:	e8 f3       	brcs	.-6      	; 0x1ee6 <inverse+0x10>
    1eec:	99 23       	and	r25, r25
    1eee:	d9 f3       	breq	.-10     	; 0x1ee6 <inverse+0x10>
    1ef0:	94 0f       	add	r25, r20
    1ef2:	51 1d       	adc	r21, r1
    1ef4:	bb f3       	brvs	.-18     	; 0x1ee4 <inverse+0xe>
    1ef6:	91 50       	subi	r25, 0x01	; 1
    1ef8:	50 40       	sbci	r21, 0x00	; 0
    1efa:	94 f0       	brlt	.+36     	; 0x1f20 <ldexp+0x38>
    1efc:	59 f0       	breq	.+22     	; 0x1f14 <ldexp+0x2c>
    1efe:	88 23       	and	r24, r24
    1f00:	32 f0       	brmi	.+12     	; 0x1f0e <ldexp+0x26>
    1f02:	66 0f       	add	r22, r22
    1f04:	77 1f       	adc	r23, r23
    1f06:	88 1f       	adc	r24, r24
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	50 40       	sbci	r21, 0x00	; 0
    1f0c:	c1 f7       	brne	.-16     	; 0x1efe <ldexp+0x16>
    1f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1f10:	51 05       	cpc	r21, r1
    1f12:	44 f7       	brge	.-48     	; 0x1ee4 <inverse+0xe>
    1f14:	88 0f       	add	r24, r24
    1f16:	91 1d       	adc	r25, r1
    1f18:	96 95       	lsr	r25
    1f1a:	87 95       	ror	r24
    1f1c:	97 f9       	bld	r25, 7
    1f1e:	08 95       	ret
    1f20:	5f 3f       	cpi	r21, 0xFF	; 255
    1f22:	ac f0       	brlt	.+42     	; 0x1f4e <ldexp+0x66>
    1f24:	98 3e       	cpi	r25, 0xE8	; 232
    1f26:	9c f0       	brlt	.+38     	; 0x1f4e <ldexp+0x66>
    1f28:	bb 27       	eor	r27, r27
    1f2a:	86 95       	lsr	r24
    1f2c:	77 95       	ror	r23
    1f2e:	67 95       	ror	r22
    1f30:	b7 95       	ror	r27
    1f32:	08 f4       	brcc	.+2      	; 0x1f36 <ldexp+0x4e>
    1f34:	b1 60       	ori	r27, 0x01	; 1
    1f36:	93 95       	inc	r25
    1f38:	c1 f7       	brne	.-16     	; 0x1f2a <ldexp+0x42>
    1f3a:	bb 0f       	add	r27, r27
    1f3c:	58 f7       	brcc	.-42     	; 0x1f14 <ldexp+0x2c>
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <ldexp+0x5c>
    1f40:	60 ff       	sbrs	r22, 0
    1f42:	e8 cf       	rjmp	.-48     	; 0x1f14 <ldexp+0x2c>
    1f44:	6f 5f       	subi	r22, 0xFF	; 255
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4c:	e3 cf       	rjmp	.-58     	; 0x1f14 <ldexp+0x2c>
    1f4e:	15 cc       	rjmp	.-2006   	; 0x177a <__fp_szero>

00001f50 <modf>:
    1f50:	fa 01       	movw	r30, r20
    1f52:	dc 01       	movw	r26, r24
    1f54:	aa 0f       	add	r26, r26
    1f56:	bb 1f       	adc	r27, r27
    1f58:	9b 01       	movw	r18, r22
    1f5a:	ac 01       	movw	r20, r24
    1f5c:	bf 57       	subi	r27, 0x7F	; 127
    1f5e:	28 f4       	brcc	.+10     	; 0x1f6a <modf+0x1a>
    1f60:	22 27       	eor	r18, r18
    1f62:	33 27       	eor	r19, r19
    1f64:	44 27       	eor	r20, r20
    1f66:	50 78       	andi	r21, 0x80	; 128
    1f68:	1f c0       	rjmp	.+62     	; 0x1fa8 <modf+0x58>
    1f6a:	b7 51       	subi	r27, 0x17	; 23
    1f6c:	88 f4       	brcc	.+34     	; 0x1f90 <modf+0x40>
    1f6e:	ab 2f       	mov	r26, r27
    1f70:	00 24       	eor	r0, r0
    1f72:	46 95       	lsr	r20
    1f74:	37 95       	ror	r19
    1f76:	27 95       	ror	r18
    1f78:	01 1c       	adc	r0, r1
    1f7a:	a3 95       	inc	r26
    1f7c:	d2 f3       	brmi	.-12     	; 0x1f72 <modf+0x22>
    1f7e:	00 20       	and	r0, r0
    1f80:	69 f0       	breq	.+26     	; 0x1f9c <modf+0x4c>
    1f82:	22 0f       	add	r18, r18
    1f84:	33 1f       	adc	r19, r19
    1f86:	44 1f       	adc	r20, r20
    1f88:	b3 95       	inc	r27
    1f8a:	da f3       	brmi	.-10     	; 0x1f82 <modf+0x32>
    1f8c:	0d d0       	rcall	.+26     	; 0x1fa8 <modf+0x58>
    1f8e:	47 ca       	rjmp	.-2930   	; 0x141e <__subsf3>
    1f90:	61 30       	cpi	r22, 0x01	; 1
    1f92:	71 05       	cpc	r23, r1
    1f94:	a0 e8       	ldi	r26, 0x80	; 128
    1f96:	8a 07       	cpc	r24, r26
    1f98:	b9 46       	sbci	r27, 0x69	; 105
    1f9a:	30 f4       	brcc	.+12     	; 0x1fa8 <modf+0x58>
    1f9c:	9b 01       	movw	r18, r22
    1f9e:	ac 01       	movw	r20, r24
    1fa0:	66 27       	eor	r22, r22
    1fa2:	77 27       	eor	r23, r23
    1fa4:	88 27       	eor	r24, r24
    1fa6:	90 78       	andi	r25, 0x80	; 128
    1fa8:	30 96       	adiw	r30, 0x00	; 0
    1faa:	21 f0       	breq	.+8      	; 0x1fb4 <modf+0x64>
    1fac:	20 83       	st	Z, r18
    1fae:	31 83       	std	Z+1, r19	; 0x01
    1fb0:	42 83       	std	Z+2, r20	; 0x02
    1fb2:	53 83       	std	Z+3, r21	; 0x03
    1fb4:	08 95       	ret

00001fb6 <__udivmodqi4>:
    1fb6:	99 1b       	sub	r25, r25
    1fb8:	79 e0       	ldi	r23, 0x09	; 9
    1fba:	04 c0       	rjmp	.+8      	; 0x1fc4 <__udivmodqi4_ep>

00001fbc <__udivmodqi4_loop>:
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	96 17       	cp	r25, r22
    1fc0:	08 f0       	brcs	.+2      	; 0x1fc4 <__udivmodqi4_ep>
    1fc2:	96 1b       	sub	r25, r22

00001fc4 <__udivmodqi4_ep>:
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	7a 95       	dec	r23
    1fc8:	c9 f7       	brne	.-14     	; 0x1fbc <__udivmodqi4_loop>
    1fca:	80 95       	com	r24
    1fcc:	08 95       	ret

00001fce <__divmodqi4>:
    1fce:	87 fb       	bst	r24, 7
    1fd0:	08 2e       	mov	r0, r24
    1fd2:	06 26       	eor	r0, r22
    1fd4:	87 fd       	sbrc	r24, 7
    1fd6:	81 95       	neg	r24
    1fd8:	67 fd       	sbrc	r22, 7
    1fda:	61 95       	neg	r22
    1fdc:	ec df       	rcall	.-40     	; 0x1fb6 <__udivmodqi4>
    1fde:	0e f4       	brtc	.+2      	; 0x1fe2 <__divmodqi4_1>
    1fe0:	91 95       	neg	r25

00001fe2 <__divmodqi4_1>:
    1fe2:	07 fc       	sbrc	r0, 7
    1fe4:	81 95       	neg	r24

00001fe6 <__divmodqi4_exit>:
    1fe6:	08 95       	ret

00001fe8 <__udivmodhi4>:
    1fe8:	aa 1b       	sub	r26, r26
    1fea:	bb 1b       	sub	r27, r27
    1fec:	51 e1       	ldi	r21, 0x11	; 17
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <__udivmodhi4_ep>

00001ff0 <__udivmodhi4_loop>:
    1ff0:	aa 1f       	adc	r26, r26
    1ff2:	bb 1f       	adc	r27, r27
    1ff4:	a6 17       	cp	r26, r22
    1ff6:	b7 07       	cpc	r27, r23
    1ff8:	10 f0       	brcs	.+4      	; 0x1ffe <__udivmodhi4_ep>
    1ffa:	a6 1b       	sub	r26, r22
    1ffc:	b7 0b       	sbc	r27, r23

00001ffe <__udivmodhi4_ep>:
    1ffe:	88 1f       	adc	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	5a 95       	dec	r21
    2004:	a9 f7       	brne	.-22     	; 0x1ff0 <__udivmodhi4_loop>
    2006:	80 95       	com	r24
    2008:	90 95       	com	r25
    200a:	bc 01       	movw	r22, r24
    200c:	cd 01       	movw	r24, r26
    200e:	08 95       	ret

00002010 <__divmodhi4>:
    2010:	97 fb       	bst	r25, 7
    2012:	09 2e       	mov	r0, r25
    2014:	07 26       	eor	r0, r23
    2016:	0a d0       	rcall	.+20     	; 0x202c <__divmodhi4_neg1>
    2018:	77 fd       	sbrc	r23, 7
    201a:	04 d0       	rcall	.+8      	; 0x2024 <__divmodhi4_neg2>
    201c:	e5 df       	rcall	.-54     	; 0x1fe8 <__udivmodhi4>
    201e:	06 d0       	rcall	.+12     	; 0x202c <__divmodhi4_neg1>
    2020:	00 20       	and	r0, r0
    2022:	1a f4       	brpl	.+6      	; 0x202a <__divmodhi4_exit>

00002024 <__divmodhi4_neg2>:
    2024:	70 95       	com	r23
    2026:	61 95       	neg	r22
    2028:	7f 4f       	sbci	r23, 0xFF	; 255

0000202a <__divmodhi4_exit>:
    202a:	08 95       	ret

0000202c <__divmodhi4_neg1>:
    202c:	f6 f7       	brtc	.-4      	; 0x202a <__divmodhi4_exit>
    202e:	90 95       	com	r25
    2030:	81 95       	neg	r24
    2032:	9f 4f       	sbci	r25, 0xFF	; 255
    2034:	08 95       	ret

00002036 <__prologue_saves__>:
    2036:	2f 92       	push	r2
    2038:	3f 92       	push	r3
    203a:	4f 92       	push	r4
    203c:	5f 92       	push	r5
    203e:	6f 92       	push	r6
    2040:	7f 92       	push	r7
    2042:	8f 92       	push	r8
    2044:	9f 92       	push	r9
    2046:	af 92       	push	r10
    2048:	bf 92       	push	r11
    204a:	cf 92       	push	r12
    204c:	df 92       	push	r13
    204e:	ef 92       	push	r14
    2050:	ff 92       	push	r15
    2052:	0f 93       	push	r16
    2054:	1f 93       	push	r17
    2056:	cf 93       	push	r28
    2058:	df 93       	push	r29
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
    205e:	ca 1b       	sub	r28, r26
    2060:	db 0b       	sbc	r29, r27
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	09 94       	ijmp

0000206e <__epilogue_restores__>:
    206e:	2a 88       	ldd	r2, Y+18	; 0x12
    2070:	39 88       	ldd	r3, Y+17	; 0x11
    2072:	48 88       	ldd	r4, Y+16	; 0x10
    2074:	5f 84       	ldd	r5, Y+15	; 0x0f
    2076:	6e 84       	ldd	r6, Y+14	; 0x0e
    2078:	7d 84       	ldd	r7, Y+13	; 0x0d
    207a:	8c 84       	ldd	r8, Y+12	; 0x0c
    207c:	9b 84       	ldd	r9, Y+11	; 0x0b
    207e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2080:	b9 84       	ldd	r11, Y+9	; 0x09
    2082:	c8 84       	ldd	r12, Y+8	; 0x08
    2084:	df 80       	ldd	r13, Y+7	; 0x07
    2086:	ee 80       	ldd	r14, Y+6	; 0x06
    2088:	fd 80       	ldd	r15, Y+5	; 0x05
    208a:	0c 81       	ldd	r16, Y+4	; 0x04
    208c:	1b 81       	ldd	r17, Y+3	; 0x03
    208e:	aa 81       	ldd	r26, Y+2	; 0x02
    2090:	b9 81       	ldd	r27, Y+1	; 0x01
    2092:	ce 0f       	add	r28, r30
    2094:	d1 1d       	adc	r29, r1
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	ed 01       	movw	r28, r26
    20a2:	08 95       	ret

000020a4 <_exit>:
    20a4:	f8 94       	cli

000020a6 <__stop_program>:
    20a6:	ff cf       	rjmp	.-2      	; 0x20a6 <__stop_program>
