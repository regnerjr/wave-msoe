
PowerCalculation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00004000  00004094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000408  00800084  00800084  000040b8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000040b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d4  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000caf  00000000  00000000  000044ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000182  00000000  00000000  0000515b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001343  00000000  00000000  000052dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00006620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fc  00000000  00000000  000068c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__vector_10>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <lcd_print_int16+0x38>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e0 e0       	ldi	r30, 0x00	; 0
      ea:	f0 e4       	ldi	r31, 0x40	; 64
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <.do_copy_data_start>

000000ee <.do_copy_data_loop>:
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0

000000f2 <.do_copy_data_start>:
      f2:	a4 38       	cpi	r26, 0x84	; 132
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <.do_copy_data_loop>

000000f8 <__do_clear_bss>:
      f8:	14 e0       	ldi	r17, 0x04	; 4
      fa:	a4 e8       	ldi	r26, 0x84	; 132
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ac 38       	cpi	r26, 0x8C	; 140
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <main>
     10c:	0c 94 d1 1b 	jmp	0x37a2	; 0x37a2 <exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <delay_ms>:
#include <inttypes.h>

// delay for ms milli-seconds 
// delay times are only half-way accurate if optimization is turned on!
void delay_ms(uint16_t ms) 
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	00 d0       	rcall	.+0      	; 0x11a <delay_ms+0x6>
     11a:	00 d0       	rcall	.+0      	; 0x11c <delay_ms+0x8>
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	9c 83       	std	Y+4, r25	; 0x04
     122:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint16_t i;

	for(i=ms;i>0;i--)
     124:	8b 81       	ldd	r24, Y+3	; 0x03
     126:	9c 81       	ldd	r25, Y+4	; 0x04
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	09 c0       	rjmp	.+18     	; 0x140 <delay_ms+0x2c>
	{
		delay_us(1000);
     12e:	88 ee       	ldi	r24, 0xE8	; 232
     130:	93 e0       	ldi	r25, 0x03	; 3
     132:	0e 94 ab 00 	call	0x156	; 0x156 <delay_us>
// delay times are only half-way accurate if optimization is turned on!
void delay_ms(uint16_t ms) 
{
	volatile uint16_t i;

	for(i=ms;i>0;i--)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	9a 81       	ldd	r25, Y+2	; 0x02
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	9a 83       	std	Y+2, r25	; 0x02
     13e:	89 83       	std	Y+1, r24	; 0x01
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	99 f7       	brne	.-26     	; 0x12e <delay_ms+0x1a>
	{
		delay_us(1000);
	}
} 
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <delay_us>:
// delay for us micro-seconds 
// delay times are only half-way accurate if optimization is turned on to level 3!
// max value for us is 65535/4*CYCLES_PER_US
// which is app. 17777 for 14.7456MHZ
void delay_us(uint16_t us)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	00 d0       	rcall	.+0      	; 0x15c <delay_us+0x6>
     15c:	00 d0       	rcall	.+0      	; 0x15e <delay_us+0x8>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	9c 83       	std	Y+4, r25	; 0x04
     164:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t _count;
	_count=us/4*CYCLES_PER_US;
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	9c 81       	ldd	r25, Y+4	; 0x04
     16a:	96 95       	lsr	r25
     16c:	87 95       	ror	r24
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	cc 01       	movw	r24, r24
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	bc 01       	movw	r22, r24
     17a:	cd 01       	movw	r24, r26
     17c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <__floatunsisf>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	bc 01       	movw	r22, r24
     186:	cd 01       	movw	r24, r26
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	51 e4       	ldi	r21, 0x41	; 65
     190:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
     194:	dc 01       	movw	r26, r24
     196:	cb 01       	movw	r24, r22
     198:	bc 01       	movw	r22, r24
     19a:	cd 01       	movw	r24, r26
     19c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fixunssfsi>
     1a0:	dc 01       	movw	r26, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	9a 83       	std	Y+2, r25	; 0x02
     1a6:	89 83       	std	Y+1, r24	; 0x01
	
	asm volatile (
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	9a 81       	ldd	r25, Y+2	; 0x02
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <delay_us+0x56>
     1b0:	9a 83       	std	Y+2, r25	; 0x02
     1b2:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (_count)
		: "0" (_count)
	);
}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <lcd_init>:
// initializes LCD
//  - init PORT DDR and PINS
//  - set two line display
//  - clear display and set cursor to home
void lcd_init(void)
{
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	delay_ms(100);			// wait 100ms for the LCD to come out of RESET
     1ca:	84 e6       	ldi	r24, 0x64	; 100
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
	lcd_port_init();		// init the port pins
     1d2:	0e 94 03 01 	call	0x206	; 0x206 <lcd_port_init>
	lcd_cmd_write(0x33);	// init LCD to 4-bit interface
     1d6:	83 e3       	ldi	r24, 0x33	; 51
     1d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x32);	// init LCD to 4-bit interface
     1dc:	82 e3       	ldi	r24, 0x32	; 50
     1de:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x28);	// set two-line display
     1e2:	88 e2       	ldi	r24, 0x28	; 40
     1e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x0C);
     1e8:	8c e0       	ldi	r24, 0x0C	; 12
     1ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x06);
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(LCD_CLR);	// clear display
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(LCD_HOME);
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <lcd_port_init>:
// initializes the ports
// sets the 4 upper bits of the data port (i.e. the LCD data is always connected
// to the upper 4 bits of a port)
// sets the control port (this could be anywhere)
void lcd_port_init(void)
{
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	sbi(LCD_DATA_DDR,7);						// set pin 7-4 of LCD data port to output
     20e:	a4 e3       	ldi	r26, 0x34	; 52
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e4 e3       	ldi	r30, 0x34	; 52
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	8c 93       	st	X, r24
	sbi(LCD_DATA_DDR,6);
     21c:	a4 e3       	ldi	r26, 0x34	; 52
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e4 e3       	ldi	r30, 0x34	; 52
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 64       	ori	r24, 0x40	; 64
     228:	8c 93       	st	X, r24
	sbi(LCD_DATA_DDR,5);
     22a:	a4 e3       	ldi	r26, 0x34	; 52
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e4 e3       	ldi	r30, 0x34	; 52
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 62       	ori	r24, 0x20	; 32
     236:	8c 93       	st	X, r24
	sbi(LCD_DATA_DDR,4);
     238:	a4 e3       	ldi	r26, 0x34	; 52
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	e4 e3       	ldi	r30, 0x34	; 52
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 61       	ori	r24, 0x10	; 16
     244:	8c 93       	st	X, r24

	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);			// clear bits of control port
     246:	a5 e3       	ldi	r26, 0x35	; 53
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	e5 e3       	ldi	r30, 0x35	; 53
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8b 7f       	andi	r24, 0xFB	; 251
     252:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);
     254:	a5 e3       	ldi	r26, 0x35	; 53
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	e5 e3       	ldi	r30, 0x35	; 53
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	8d 7f       	andi	r24, 0xFD	; 253
     260:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);
     262:	a5 e3       	ldi	r26, 0x35	; 53
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	e5 e3       	ldi	r30, 0x35	; 53
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	8e 7f       	andi	r24, 0xFE	; 254
     26e:	8c 93       	st	X, r24


	sbi(LCD_CTRL_DDR,LCD_CTRL_RS);				// set pins of control port to output
     270:	a4 e3       	ldi	r26, 0x34	; 52
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e4 e3       	ldi	r30, 0x34	; 52
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	84 60       	ori	r24, 0x04	; 4
     27c:	8c 93       	st	X, r24
	sbi(LCD_CTRL_DDR,LCD_CTRL_RW);
     27e:	a4 e3       	ldi	r26, 0x34	; 52
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e4 e3       	ldi	r30, 0x34	; 52
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	82 60       	ori	r24, 0x02	; 2
     28a:	8c 93       	st	X, r24
	sbi(LCD_CTRL_DDR,LCD_CTRL_E);
     28c:	a4 e3       	ldi	r26, 0x34	; 52
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e4 e3       	ldi	r30, 0x34	; 52
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	81 60       	ori	r24, 0x01	; 1
     298:	8c 93       	st	X, r24
}
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <lcd_cmd_write>:

// sends a command byte to LCD
void lcd_cmd_write(uint8_t cmd)
{
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	0f 92       	push	r0
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	89 83       	std	Y+1, r24	; 0x01
	cbi(LCD_CTRL_PORT,LCD_CTRL_RS);						// lower RS -> command follows
     2ac:	a5 e3       	ldi	r26, 0x35	; 53
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e5 e3       	ldi	r30, 0x35	; 53
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	8b 7f       	andi	r24, 0xFB	; 251
     2b8:	8c 93       	st	X, r24
	delay_ms(2);
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     2c2:	a5 e3       	ldi	r26, 0x35	; 53
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e5 e3       	ldi	r30, 0x35	; 53
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	81 60       	ori	r24, 0x01	; 1
     2ce:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd&0xF0);		// send upper nibble
     2d0:	a5 e3       	ldi	r26, 0x35	; 53
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e5 e3       	ldi	r30, 0x35	; 53
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	98 2f       	mov	r25, r24
     2dc:	9f 70       	andi	r25, 0x0F	; 15
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	80 7f       	andi	r24, 0xF0	; 240
     2e2:	89 2b       	or	r24, r25
     2e4:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     2e6:	a5 e3       	ldi	r26, 0x35	; 53
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	8c 93       	st	X, r24
	delay_ms(2);										// wait 2ms so display uploads data
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
														// some commands take more than 1ms

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     2fc:	a5 e3       	ldi	r26, 0x35	; 53
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e5 e3       	ldi	r30, 0x35	; 53
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	81 60       	ori	r24, 0x01	; 1
     308:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((cmd<<4)&0xF0);	// send lower nibble
     30a:	a5 e3       	ldi	r26, 0x35	; 53
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e5 e3       	ldi	r30, 0x35	; 53
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	28 2f       	mov	r18, r24
     316:	2f 70       	andi	r18, 0x0F	; 15
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	82 95       	swap	r24
     320:	92 95       	swap	r25
     322:	90 7f       	andi	r25, 0xF0	; 240
     324:	98 27       	eor	r25, r24
     326:	80 7f       	andi	r24, 0xF0	; 240
     328:	98 27       	eor	r25, r24
     32a:	82 2b       	or	r24, r18
     32c:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     32e:	a5 e3       	ldi	r26, 0x35	; 53
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e5 e3       	ldi	r30, 0x35	; 53
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	8e 7f       	andi	r24, 0xFE	; 254
     33a:	8c 93       	st	X, r24
	delay_ms(2);										// wait 2ms so display uploads data
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_RS);						// raise RS end of command
     344:	a5 e3       	ldi	r26, 0x35	; 53
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	e5 e3       	ldi	r30, 0x35	; 53
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	84 60       	ori	r24, 0x04	; 4
     350:	8c 93       	st	X, r24
	delay_ms(2);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
}
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <lcd_data_write>:

// sends a data byte to LCD
void lcd_data_write(uint8_t data)
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	0f 92       	push	r0
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	89 83       	std	Y+1, r24	; 0x01
	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     36e:	a5 e3       	ldi	r26, 0x35	; 53
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e5 e3       	ldi	r30, 0x35	; 53
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);		// send upper nibble
     37c:	a5 e3       	ldi	r26, 0x35	; 53
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e5 e3       	ldi	r30, 0x35	; 53
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	98 2f       	mov	r25, r24
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	80 7f       	andi	r24, 0xF0	; 240
     38e:	89 2b       	or	r24, r25
     390:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     392:	a5 e3       	ldi	r26, 0x35	; 53
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e5 e3       	ldi	r30, 0x35	; 53
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	8e 7f       	andi	r24, 0xFE	; 254
     39e:	8c 93       	st	X, r24
	delay_ms(2);										// wait 1ms so display uploads data
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     3a8:	a5 e3       	ldi	r26, 0x35	; 53
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	e5 e3       	ldi	r30, 0x35	; 53
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	81 60       	ori	r24, 0x01	; 1
     3b4:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((data<<4)&0xF0);// send lower nibble
     3b6:	a5 e3       	ldi	r26, 0x35	; 53
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	e5 e3       	ldi	r30, 0x35	; 53
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	28 2f       	mov	r18, r24
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	82 95       	swap	r24
     3cc:	92 95       	swap	r25
     3ce:	90 7f       	andi	r25, 0xF0	; 240
     3d0:	98 27       	eor	r25, r24
     3d2:	80 7f       	andi	r24, 0xF0	; 240
     3d4:	98 27       	eor	r25, r24
     3d6:	82 2b       	or	r24, r18
     3d8:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     3da:	a5 e3       	ldi	r26, 0x35	; 53
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e5 e3       	ldi	r30, 0x35	; 53
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	8e 7f       	andi	r24, 0xFE	; 254
     3e6:	8c 93       	st	X, r24
	delay_ms(2);										// wait 1ms so display uploads data
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
}
     3f0:	0f 90       	pop	r0
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <lcd_goto_xy>:

// sets LCD cursor to position x,y
void lcd_goto_xy(uint8_t x,uint8_t y)
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <lcd_goto_xy+0x6>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <lcd_goto_xy+0x8>
     400:	0f 92       	push	r0
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	8a 83       	std	Y+2, r24	; 0x02
     408:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t DDRAMAddr;
	 
	switch(y)							// get the right starting address for the line
     40a:	8b 81       	ldd	r24, Y+3	; 0x03
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	3d 83       	std	Y+5, r19	; 0x05
     412:	2c 83       	std	Y+4, r18	; 0x04
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	9d 81       	ldd	r25, Y+5	; 0x05
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	91 05       	cpc	r25, r1
     41c:	c1 f0       	breq	.+48     	; 0x44e <lcd_goto_xy+0x56>
     41e:	2c 81       	ldd	r18, Y+4	; 0x04
     420:	3d 81       	ldd	r19, Y+5	; 0x05
     422:	22 30       	cpi	r18, 0x02	; 2
     424:	31 05       	cpc	r19, r1
     426:	2c f4       	brge	.+10     	; 0x432 <lcd_goto_xy+0x3a>
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	61 f0       	breq	.+24     	; 0x448 <lcd_goto_xy+0x50>
     430:	1a c0       	rjmp	.+52     	; 0x466 <lcd_goto_xy+0x6e>
     432:	2c 81       	ldd	r18, Y+4	; 0x04
     434:	3d 81       	ldd	r19, Y+5	; 0x05
     436:	22 30       	cpi	r18, 0x02	; 2
     438:	31 05       	cpc	r19, r1
     43a:	69 f0       	breq	.+26     	; 0x456 <lcd_goto_xy+0x5e>
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	91 05       	cpc	r25, r1
     444:	61 f0       	breq	.+24     	; 0x45e <lcd_goto_xy+0x66>
     446:	0f c0       	rjmp	.+30     	; 0x466 <lcd_goto_xy+0x6e>
	{									// and add offset for x position
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	0e c0       	rjmp	.+28     	; 0x46a <lcd_goto_xy+0x72>
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	80 5c       	subi	r24, 0xC0	; 192
     452:	89 83       	std	Y+1, r24	; 0x01
     454:	0a c0       	rjmp	.+20     	; 0x46a <lcd_goto_xy+0x72>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	8c 5e       	subi	r24, 0xEC	; 236
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	06 c0       	rjmp	.+12     	; 0x46a <lcd_goto_xy+0x72>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	8c 5a       	subi	r24, 0xAC	; 172
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	02 c0       	rjmp	.+4      	; 0x46a <lcd_goto_xy+0x72>
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
	}

	// set data address
	lcd_cmd_write(1<<LCD_DDRAM | DDRAMAddr);
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	80 68       	ori	r24, 0x80	; 128
     46e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <lcd_clear>:

// clears LCD display
void lcd_clear(void)
{
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	lcd_cmd_write(LCD_CLR);		// clear display
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <lcd_home>:

// sets LCD cursor to home
void lcd_home(void)
{
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
	lcd_cmd_write(LCD_HOME);	// cursor home
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <lcd_print_char>:

// prints a char
void lcd_print_char(uint8_t symbol)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	0f 92       	push	r0
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
	lcd_data_write(symbol);
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <lcd_print_string>:

// prints a null-terminated string on LCD
void lcd_print_string(char *string)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <lcd_print_string+0x6>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01
     4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <lcd_print_string+0x24>
	while(*string!=0)
	{
		lcd_data_write(*string);
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	80 81       	ld	r24, Z
     4da:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		string++;
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
}

// prints a null-terminated string on LCD
void lcd_print_string(char *string)
{
	while(*string!=0)
     4e8:	e9 81       	ldd	r30, Y+1	; 0x01
     4ea:	fa 81       	ldd	r31, Y+2	; 0x02
     4ec:	80 81       	ld	r24, Z
     4ee:	88 23       	and	r24, r24
     4f0:	89 f7       	brne	.-30     	; 0x4d4 <lcd_print_string+0x10>
	{
		lcd_data_write(*string);
		string++;
	}
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <lcd_print_hex>:

// prints hex number on LCD
void lcd_print_hex(uint8_t hex)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	00 d0       	rcall	.+0      	; 0x502 <lcd_print_hex+0x6>
     502:	0f 92       	push	r0
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t hi,lo;

	hi=hex&0xF0;
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	8a 83       	std	Y+2, r24	; 0x02
	hi=hi>>4;
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	82 95       	swap	r24
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	8a 83       	std	Y+2, r24	; 0x02
	hi=hi+'0';
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	80 5d       	subi	r24, 0xD0	; 208
     51c:	8a 83       	std	Y+2, r24	; 0x02
	if(hi>'9')
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	8a 33       	cpi	r24, 0x3A	; 58
     522:	18 f0       	brcs	.+6      	; 0x52a <lcd_print_hex+0x2e>
	{
		hi=hi+7;
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	89 5f       	subi	r24, 0xF9	; 249
     528:	8a 83       	std	Y+2, r24	; 0x02
	}
	lo=hex&0x0F;
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	89 83       	std	Y+1, r24	; 0x01
	lo=lo+'0';
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	80 5d       	subi	r24, 0xD0	; 208
     534:	89 83       	std	Y+1, r24	; 0x01
	if(lo>'9')
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	8a 33       	cpi	r24, 0x3A	; 58
     53a:	18 f0       	brcs	.+6      	; 0x542 <lcd_print_hex+0x46>
	{
		lo=lo+7;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	89 5f       	subi	r24, 0xF9	; 249
     540:	89 83       	std	Y+1, r24	; 0x01
	}

	lcd_data_write(hi);
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
	lcd_data_write(lo);
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <lcd_print_uint8>:

// print uint8 on LCD
void lcd_print_uint8(uint8_t no)
{
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	00 d0       	rcall	.+0      	; 0x560 <lcd_print_uint8+0x6>
     560:	0f 92       	push	r0
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t y,leading;
	leading=1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	89 83       	std	Y+1, r24	; 0x01
	y=no/100;
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	94 e6       	ldi	r25, 0x64	; 100
     570:	69 2f       	mov	r22, r25
     572:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__udivmodqi4>
     576:	8a 83       	std	Y+2, r24	; 0x02
	if(y>0)
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	88 23       	and	r24, r24
     57c:	29 f0       	breq	.+10     	; 0x588 <lcd_print_uint8+0x2e>
	{
		lcd_data_write(y+'0');
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	80 5d       	subi	r24, 0xD0	; 208
     582:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     586:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*100;
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	8c e9       	ldi	r24, 0x9C	; 156
     590:	9f ef       	ldi	r25, 0xFF	; 255
     592:	ac 01       	movw	r20, r24
     594:	24 9f       	mul	r18, r20
     596:	c0 01       	movw	r24, r0
     598:	25 9f       	mul	r18, r21
     59a:	90 0d       	add	r25, r0
     59c:	34 9f       	mul	r19, r20
     59e:	90 0d       	add	r25, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	98 2f       	mov	r25, r24
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	89 0f       	add	r24, r25
     5a8:	8b 83       	std	Y+3, r24	; 0x03
	y=no/10;
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9a e0       	ldi	r25, 0x0A	; 10
     5ae:	69 2f       	mov	r22, r25
     5b0:	0e 94 be 1f 	call	0x3f7c	; 0x3f7c <__udivmodqi4>
     5b4:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	88 23       	and	r24, r24
     5ba:	19 f4       	brne	.+6      	; 0x5c2 <lcd_print_uint8+0x68>
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 23       	and	r24, r24
     5c0:	31 f4       	brne	.+12     	; 0x5ce <lcd_print_uint8+0x74>
	{
		lcd_data_write(y+'0');
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	80 5d       	subi	r24, 0xD0	; 208
     5c6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9c 01       	movw	r18, r24
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	c9 01       	movw	r24, r18
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	82 0f       	add	r24, r18
     5e6:	93 1f       	adc	r25, r19
     5e8:	90 95       	com	r25
     5ea:	81 95       	neg	r24
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	98 2f       	mov	r25, r24
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	89 0f       	add	r24, r25
     5f4:	8b 83       	std	Y+3, r24	; 0x03
	lcd_data_write(no+'0');
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	80 5d       	subi	r24, 0xD0	; 208
     5fa:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <lcd_print_int8>:

// print int8 on LCD
void lcd_print_int8(int8_t no)
{
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	00 d0       	rcall	.+0      	; 0x610 <lcd_print_int8+0x6>
     610:	0f 92       	push	r0
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8b 83       	std	Y+3, r24	; 0x03
	int8_t y;
	uint8_t	leading;
	leading=1;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	89 83       	std	Y+1, r24	; 0x01
	if(no<0)
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	88 23       	and	r24, r24
     620:	04 f5       	brge	.+64     	; 0x662 <lcd_print_int8+0x58>
	{
		lcd_print_string("-");
     622:	80 e6       	ldi	r24, 0x60	; 96
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
		y=no/(-100);
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c e9       	ldi	r25, 0x9C	; 156
     62e:	69 2f       	mov	r22, r25
     630:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__divmodqi4>
     634:	8a 83       	std	Y+2, r24	; 0x02
		no=-(no+y*100);
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	28 2f       	mov	r18, r24
     63a:	33 27       	eor	r19, r19
     63c:	27 fd       	sbrc	r18, 7
     63e:	30 95       	com	r19
     640:	8c e9       	ldi	r24, 0x9C	; 156
     642:	9f ef       	ldi	r25, 0xFF	; 255
     644:	ac 01       	movw	r20, r24
     646:	24 9f       	mul	r18, r20
     648:	c0 01       	movw	r24, r0
     64a:	25 9f       	mul	r18, r21
     64c:	90 0d       	add	r25, r0
     64e:	34 9f       	mul	r19, r20
     650:	90 0d       	add	r25, r0
     652:	11 24       	eor	r1, r1
     654:	98 2f       	mov	r25, r24
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	59 2f       	mov	r21, r25
     65a:	58 1b       	sub	r21, r24
     65c:	85 2f       	mov	r24, r21
     65e:	8b 83       	std	Y+3, r24	; 0x03
     660:	19 c0       	rjmp	.+50     	; 0x694 <lcd_print_int8+0x8a>
	}
	else
	{
		y=no/100;
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	94 e6       	ldi	r25, 0x64	; 100
     666:	69 2f       	mov	r22, r25
     668:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__divmodqi4>
     66c:	8a 83       	std	Y+2, r24	; 0x02
		no=no-y*100;
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	28 2f       	mov	r18, r24
     672:	33 27       	eor	r19, r19
     674:	27 fd       	sbrc	r18, 7
     676:	30 95       	com	r19
     678:	8c e9       	ldi	r24, 0x9C	; 156
     67a:	9f ef       	ldi	r25, 0xFF	; 255
     67c:	ac 01       	movw	r20, r24
     67e:	24 9f       	mul	r18, r20
     680:	c0 01       	movw	r24, r0
     682:	25 9f       	mul	r18, r21
     684:	90 0d       	add	r25, r0
     686:	34 9f       	mul	r19, r20
     688:	90 0d       	add	r25, r0
     68a:	11 24       	eor	r1, r1
     68c:	98 2f       	mov	r25, r24
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	89 0f       	add	r24, r25
     692:	8b 83       	std	Y+3, r24	; 0x03
	}

	if(y>0)
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	18 16       	cp	r1, r24
     698:	2c f4       	brge	.+10     	; 0x6a4 <lcd_print_int8+0x9a>
	{
		lcd_data_write(y+'0');
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	80 5d       	subi	r24, 0xD0	; 208
     69e:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     6a2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	y=no/10;
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	9a e0       	ldi	r25, 0x0A	; 10
     6a8:	69 2f       	mov	r22, r25
     6aa:	0e 94 ca 1f 	call	0x3f94	; 0x3f94 <__divmodqi4>
     6ae:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	18 16       	cp	r1, r24
     6b4:	1c f0       	brlt	.+6      	; 0x6bc <lcd_print_int8+0xb2>
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 23       	and	r24, r24
     6ba:	31 f4       	brne	.+12     	; 0x6c8 <lcd_print_int8+0xbe>
	{
		lcd_data_write(y+'0');
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	80 5d       	subi	r24, 0xD0	; 208
     6c0:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	99 27       	eor	r25, r25
     6cc:	87 fd       	sbrc	r24, 7
     6ce:	90 95       	com	r25
     6d0:	9c 01       	movw	r18, r24
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	c9 01       	movw	r24, r18
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
     6e4:	90 95       	com	r25
     6e6:	81 95       	neg	r24
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	98 2f       	mov	r25, r24
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	89 0f       	add	r24, r25
     6f0:	8b 83       	std	Y+3, r24	; 0x03
	lcd_data_write(no+'0');
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	80 5d       	subi	r24, 0xD0	; 208
     6f6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <lcd_print_uint16>:

// print uint16 on LCD
void lcd_print_uint16(uint16_t no)
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <lcd_print_uint16+0x6>
     70c:	00 d0       	rcall	.+0      	; 0x70e <lcd_print_uint16+0x8>
     70e:	0f 92       	push	r0
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	9d 83       	std	Y+5, r25	; 0x05
     716:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t y;
	uint8_t	leading;
	leading=1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	89 83       	std	Y+1, r24	; 0x01

	y=no/10000;
     71c:	8c 81       	ldd	r24, Y+4	; 0x04
     71e:	9d 81       	ldd	r25, Y+5	; 0x05
     720:	20 e1       	ldi	r18, 0x10	; 16
     722:	37 e2       	ldi	r19, 0x27	; 39
     724:	b9 01       	movw	r22, r18
     726:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     72a:	cb 01       	movw	r24, r22
     72c:	9b 83       	std	Y+3, r25	; 0x03
     72e:	8a 83       	std	Y+2, r24	; 0x02
	if(y>0)
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	9b 81       	ldd	r25, Y+3	; 0x03
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	29 f0       	breq	.+10     	; 0x742 <lcd_print_uint16+0x3c>
	{
		lcd_data_write(y+'0');
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	80 5d       	subi	r24, 0xD0	; 208
     73c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     740:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*10000;
     742:	2a 81       	ldd	r18, Y+2	; 0x02
     744:	3b 81       	ldd	r19, Y+3	; 0x03
     746:	80 e1       	ldi	r24, 0x10	; 16
     748:	97 e2       	ldi	r25, 0x27	; 39
     74a:	a9 01       	movw	r20, r18
     74c:	48 9f       	mul	r20, r24
     74e:	90 01       	movw	r18, r0
     750:	49 9f       	mul	r20, r25
     752:	30 0d       	add	r19, r0
     754:	58 9f       	mul	r21, r24
     756:	30 0d       	add	r19, r0
     758:	11 24       	eor	r1, r1
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	82 1b       	sub	r24, r18
     760:	93 0b       	sbc	r25, r19
     762:	9d 83       	std	Y+5, r25	; 0x05
     764:	8c 83       	std	Y+4, r24	; 0x04

	y=no/1000;
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	9d 81       	ldd	r25, Y+5	; 0x05
     76a:	28 ee       	ldi	r18, 0xE8	; 232
     76c:	33 e0       	ldi	r19, 0x03	; 3
     76e:	b9 01       	movw	r22, r18
     770:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     774:	cb 01       	movw	r24, r22
     776:	9b 83       	std	Y+3, r25	; 0x03
     778:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	9b 81       	ldd	r25, Y+3	; 0x03
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	19 f4       	brne	.+6      	; 0x788 <lcd_print_uint16+0x82>
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	88 23       	and	r24, r24
     786:	29 f4       	brne	.+10     	; 0x792 <lcd_print_uint16+0x8c>
	{
		lcd_data_write(y+'0');
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	80 5d       	subi	r24, 0xD0	; 208
     78c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     790:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*1000;
     792:	2a 81       	ldd	r18, Y+2	; 0x02
     794:	3b 81       	ldd	r19, Y+3	; 0x03
     796:	88 ee       	ldi	r24, 0xE8	; 232
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	a9 01       	movw	r20, r18
     79c:	48 9f       	mul	r20, r24
     79e:	90 01       	movw	r18, r0
     7a0:	49 9f       	mul	r20, r25
     7a2:	30 0d       	add	r19, r0
     7a4:	58 9f       	mul	r21, r24
     7a6:	30 0d       	add	r19, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	9d 81       	ldd	r25, Y+5	; 0x05
     7ae:	82 1b       	sub	r24, r18
     7b0:	93 0b       	sbc	r25, r19
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04

	y=no/100;
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	24 e6       	ldi	r18, 0x64	; 100
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	b9 01       	movw	r22, r18
     7c0:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     7c4:	cb 01       	movw	r24, r22
     7c6:	9b 83       	std	Y+3, r25	; 0x03
     7c8:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <lcd_print_uint16+0xd2>
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	88 23       	and	r24, r24
     7d6:	29 f4       	brne	.+10     	; 0x7e2 <lcd_print_uint16+0xdc>
	{
		lcd_data_write(y+'0');
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	80 5d       	subi	r24, 0xD0	; 208
     7dc:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     7e0:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*100;
     7e2:	2a 81       	ldd	r18, Y+2	; 0x02
     7e4:	3b 81       	ldd	r19, Y+3	; 0x03
     7e6:	84 e6       	ldi	r24, 0x64	; 100
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a9 01       	movw	r20, r18
     7ec:	48 9f       	mul	r20, r24
     7ee:	90 01       	movw	r18, r0
     7f0:	49 9f       	mul	r20, r25
     7f2:	30 0d       	add	r19, r0
     7f4:	58 9f       	mul	r21, r24
     7f6:	30 0d       	add	r19, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	8c 81       	ldd	r24, Y+4	; 0x04
     7fc:	9d 81       	ldd	r25, Y+5	; 0x05
     7fe:	82 1b       	sub	r24, r18
     800:	93 0b       	sbc	r25, r19
     802:	9d 83       	std	Y+5, r25	; 0x05
     804:	8c 83       	std	Y+4, r24	; 0x04
	y=no/10;
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	9d 81       	ldd	r25, Y+5	; 0x05
     80a:	2a e0       	ldi	r18, 0x0A	; 10
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	b9 01       	movw	r22, r18
     810:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     814:	cb 01       	movw	r24, r22
     816:	9b 83       	std	Y+3, r25	; 0x03
     818:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	19 f4       	brne	.+6      	; 0x828 <lcd_print_uint16+0x122>
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	88 23       	and	r24, r24
     826:	31 f4       	brne	.+12     	; 0x834 <lcd_print_uint16+0x12e>
	{
		lcd_data_write(y+'0');
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	80 5d       	subi	r24, 0xD0	; 208
     82c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	9c 01       	movw	r18, r24
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
     83e:	c9 01       	movw	r24, r18
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	28 0f       	add	r18, r24
     84a:	39 1f       	adc	r19, r25
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	9d 81       	ldd	r25, Y+5	; 0x05
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	9d 83       	std	Y+5, r25	; 0x05
     856:	8c 83       	std	Y+4, r24	; 0x04
	lcd_data_write(no+'0');
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	80 5d       	subi	r24, 0xD0	; 208
     85c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <lcd_print_int16>:

// print int16 on LCD
void lcd_print_int16(int16_t no)
{
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	00 d0       	rcall	.+0      	; 0x876 <lcd_print_int16+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <lcd_print_int16+0x8>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	9d 83       	std	Y+5, r25	; 0x05
     880:	8c 83       	std	Y+4, r24	; 0x04
	int16_t y;
	uint8_t	leading;
	leading=1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	89 83       	std	Y+1, r24	; 0x01

	if(no<0)
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	99 23       	and	r25, r25
     88c:	1c f5       	brge	.+70     	; 0x8d4 <lcd_print_int16+0x64>
	{
		lcd_print_string("-");
     88e:	80 e6       	ldi	r24, 0x60	; 96
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
		y=no/(-10000);
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	9d 81       	ldd	r25, Y+5	; 0x05
     89a:	20 ef       	ldi	r18, 0xF0	; 240
     89c:	38 ed       	ldi	r19, 0xD8	; 216
     89e:	b9 01       	movw	r22, r18
     8a0:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__divmodhi4>
     8a4:	cb 01       	movw	r24, r22
     8a6:	9b 83       	std	Y+3, r25	; 0x03
     8a8:	8a 83       	std	Y+2, r24	; 0x02
		no=-(no+y*10000);
     8aa:	2a 81       	ldd	r18, Y+2	; 0x02
     8ac:	3b 81       	ldd	r19, Y+3	; 0x03
     8ae:	80 ef       	ldi	r24, 0xF0	; 240
     8b0:	98 ed       	ldi	r25, 0xD8	; 216
     8b2:	a9 01       	movw	r20, r18
     8b4:	48 9f       	mul	r20, r24
     8b6:	90 01       	movw	r18, r0
     8b8:	49 9f       	mul	r20, r25
     8ba:	30 0d       	add	r19, r0
     8bc:	58 9f       	mul	r21, r24
     8be:	30 0d       	add	r19, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	8c 81       	ldd	r24, Y+4	; 0x04
     8c4:	9d 81       	ldd	r25, Y+5	; 0x05
     8c6:	a9 01       	movw	r20, r18
     8c8:	48 1b       	sub	r20, r24
     8ca:	59 0b       	sbc	r21, r25
     8cc:	ca 01       	movw	r24, r20
     8ce:	9d 83       	std	Y+5, r25	; 0x05
     8d0:	8c 83       	std	Y+4, r24	; 0x04
     8d2:	1c c0       	rjmp	.+56     	; 0x90c <lcd_print_int16+0x9c>
	}
	else
	{
		y=no/10000;
     8d4:	8c 81       	ldd	r24, Y+4	; 0x04
     8d6:	9d 81       	ldd	r25, Y+5	; 0x05
     8d8:	20 e1       	ldi	r18, 0x10	; 16
     8da:	37 e2       	ldi	r19, 0x27	; 39
     8dc:	b9 01       	movw	r22, r18
     8de:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__divmodhi4>
     8e2:	cb 01       	movw	r24, r22
     8e4:	9b 83       	std	Y+3, r25	; 0x03
     8e6:	8a 83       	std	Y+2, r24	; 0x02
		no=no-y*10000;
     8e8:	2a 81       	ldd	r18, Y+2	; 0x02
     8ea:	3b 81       	ldd	r19, Y+3	; 0x03
     8ec:	80 ef       	ldi	r24, 0xF0	; 240
     8ee:	98 ed       	ldi	r25, 0xD8	; 216
     8f0:	a9 01       	movw	r20, r18
     8f2:	48 9f       	mul	r20, r24
     8f4:	90 01       	movw	r18, r0
     8f6:	49 9f       	mul	r20, r25
     8f8:	30 0d       	add	r19, r0
     8fa:	58 9f       	mul	r21, r24
     8fc:	30 0d       	add	r19, r0
     8fe:	11 24       	eor	r1, r1
     900:	8c 81       	ldd	r24, Y+4	; 0x04
     902:	9d 81       	ldd	r25, Y+5	; 0x05
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	9d 83       	std	Y+5, r25	; 0x05
     90a:	8c 83       	std	Y+4, r24	; 0x04
	}

	if(y>0)
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	9b 81       	ldd	r25, Y+3	; 0x03
     910:	18 16       	cp	r1, r24
     912:	19 06       	cpc	r1, r25
     914:	2c f4       	brge	.+10     	; 0x920 <lcd_print_int16+0xb0>
	{
		lcd_data_write(y+'0');
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	80 5d       	subi	r24, 0xD0	; 208
     91a:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     91e:	19 82       	std	Y+1, r1	; 0x01
	}

	y=no/1000;
     920:	8c 81       	ldd	r24, Y+4	; 0x04
     922:	9d 81       	ldd	r25, Y+5	; 0x05
     924:	28 ee       	ldi	r18, 0xE8	; 232
     926:	33 e0       	ldi	r19, 0x03	; 3
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__divmodhi4>
     92e:	cb 01       	movw	r24, r22
     930:	9b 83       	std	Y+3, r25	; 0x03
     932:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	18 16       	cp	r1, r24
     93a:	19 06       	cpc	r1, r25
     93c:	1c f0       	brlt	.+6      	; 0x944 <lcd_print_int16+0xd4>
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	88 23       	and	r24, r24
     942:	29 f4       	brne	.+10     	; 0x94e <lcd_print_int16+0xde>
	{
		lcd_data_write(y+'0');
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	80 5d       	subi	r24, 0xD0	; 208
     948:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     94c:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*1000;
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	9c ef       	ldi	r25, 0xFC	; 252
     956:	a9 01       	movw	r20, r18
     958:	48 9f       	mul	r20, r24
     95a:	90 01       	movw	r18, r0
     95c:	49 9f       	mul	r20, r25
     95e:	30 0d       	add	r19, r0
     960:	58 9f       	mul	r21, r24
     962:	30 0d       	add	r19, r0
     964:	11 24       	eor	r1, r1
     966:	8c 81       	ldd	r24, Y+4	; 0x04
     968:	9d 81       	ldd	r25, Y+5	; 0x05
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	9d 83       	std	Y+5, r25	; 0x05
     970:	8c 83       	std	Y+4, r24	; 0x04

	y=no/100;
     972:	8c 81       	ldd	r24, Y+4	; 0x04
     974:	9d 81       	ldd	r25, Y+5	; 0x05
     976:	24 e6       	ldi	r18, 0x64	; 100
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	b9 01       	movw	r22, r18
     97c:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__divmodhi4>
     980:	cb 01       	movw	r24, r22
     982:	9b 83       	std	Y+3, r25	; 0x03
     984:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	9b 81       	ldd	r25, Y+3	; 0x03
     98a:	18 16       	cp	r1, r24
     98c:	19 06       	cpc	r1, r25
     98e:	1c f0       	brlt	.+6      	; 0x996 <lcd_print_int16+0x126>
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	88 23       	and	r24, r24
     994:	29 f4       	brne	.+10     	; 0x9a0 <lcd_print_int16+0x130>
	{
		lcd_data_write(y+'0');
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	80 5d       	subi	r24, 0xD0	; 208
     99a:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     99e:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*100;
     9a0:	2a 81       	ldd	r18, Y+2	; 0x02
     9a2:	3b 81       	ldd	r19, Y+3	; 0x03
     9a4:	8c e9       	ldi	r24, 0x9C	; 156
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	a9 01       	movw	r20, r18
     9aa:	48 9f       	mul	r20, r24
     9ac:	90 01       	movw	r18, r0
     9ae:	49 9f       	mul	r20, r25
     9b0:	30 0d       	add	r19, r0
     9b2:	58 9f       	mul	r21, r24
     9b4:	30 0d       	add	r19, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ba:	9d 81       	ldd	r25, Y+5	; 0x05
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	9d 83       	std	Y+5, r25	; 0x05
     9c2:	8c 83       	std	Y+4, r24	; 0x04
	y=no/10;
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	9d 81       	ldd	r25, Y+5	; 0x05
     9c8:	2a e0       	ldi	r18, 0x0A	; 10
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	b9 01       	movw	r22, r18
     9ce:	0e 94 eb 1f 	call	0x3fd6	; 0x3fd6 <__divmodhi4>
     9d2:	cb 01       	movw	r24, r22
     9d4:	9b 83       	std	Y+3, r25	; 0x03
     9d6:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	18 16       	cp	r1, r24
     9de:	19 06       	cpc	r1, r25
     9e0:	1c f0       	brlt	.+6      	; 0x9e8 <lcd_print_int16+0x178>
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	88 23       	and	r24, r24
     9e6:	31 f4       	brne	.+12     	; 0x9f4 <lcd_print_int16+0x184>
	{
		lcd_data_write(y+'0');
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	80 5d       	subi	r24, 0xD0	; 208
     9ec:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	9b 81       	ldd	r25, Y+3	; 0x03
     9f8:	9c 01       	movw	r18, r24
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	c9 01       	movw	r24, r18
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	90 95       	com	r25
     a0e:	81 95       	neg	r24
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	2c 81       	ldd	r18, Y+4	; 0x04
     a14:	3d 81       	ldd	r19, Y+5	; 0x05
     a16:	82 0f       	add	r24, r18
     a18:	93 1f       	adc	r25, r19
     a1a:	9d 83       	std	Y+5, r25	; 0x05
     a1c:	8c 83       	std	Y+4, r24	; 0x04
	lcd_data_write(no+'0');
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04
     a20:	80 5d       	subi	r24, 0xD0	; 208
     a22:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	08 95       	ret

00000a36 <lcd_print_float>:

// prints float on LCD
void lcd_print_float(float no)
{
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	2b 97       	sbiw	r28, 0x0b	; 11
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	68 87       	std	Y+8, r22	; 0x08
     a4c:	79 87       	std	Y+9, r23	; 0x09
     a4e:	8a 87       	std	Y+10, r24	; 0x0a
     a50:	9b 87       	std	Y+11, r25	; 0x0b
	uint8_t	x,i;
	int8_t	e;
	float	y;

	if(no<0)
     a52:	68 85       	ldd	r22, Y+8	; 0x08
     a54:	79 85       	ldd	r23, Y+9	; 0x09
     a56:	8a 85       	ldd	r24, Y+10	; 0x0a
     a58:	9b 85       	ldd	r25, Y+11	; 0x0b
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 39 1c 	call	0x3872	; 0x3872 <__cmpsf2>
     a66:	88 23       	and	r24, r24
     a68:	6c f4       	brge	.+26     	; 0xa84 <lcd_print_float+0x4e>
	{
		lcd_print_string("-");
     a6a:	80 e6       	ldi	r24, 0x60	; 96
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
		no=(-no);
     a72:	88 85       	ldd	r24, Y+8	; 0x08
     a74:	99 85       	ldd	r25, Y+9	; 0x09
     a76:	aa 85       	ldd	r26, Y+10	; 0x0a
     a78:	bb 85       	ldd	r27, Y+11	; 0x0b
     a7a:	b0 58       	subi	r27, 0x80	; 128
     a7c:	88 87       	std	Y+8, r24	; 0x08
     a7e:	99 87       	std	Y+9, r25	; 0x09
     a80:	aa 87       	std	Y+10, r26	; 0x0a
     a82:	bb 87       	std	Y+11, r27	; 0x0b
	}
	e=log10(no);
     a84:	88 85       	ldd	r24, Y+8	; 0x08
     a86:	99 85       	ldd	r25, Y+9	; 0x09
     a88:	aa 85       	ldd	r26, Y+10	; 0x0a
     a8a:	bb 85       	ldd	r27, Y+11	; 0x0b
     a8c:	bc 01       	movw	r22, r24
     a8e:	cd 01       	movw	r24, r26
     a90:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <log10>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	8d 83       	std	Y+5, r24	; 0x05

	if(e!=0)
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	88 23       	and	r24, r24
     aaa:	09 f4       	brne	.+2      	; 0xaae <lcd_print_float+0x78>
     aac:	46 c0       	rjmp	.+140    	; 0xb3a <lcd_print_float+0x104>
	{
		x=no/(pow(10,e));
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	99 27       	eor	r25, r25
     ab2:	87 fd       	sbrc	r24, 7
     ab4:	90 95       	com	r25
     ab6:	a9 2f       	mov	r26, r25
     ab8:	b9 2f       	mov	r27, r25
     aba:	bc 01       	movw	r22, r24
     abc:	cd 01       	movw	r24, r26
     abe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	91 e4       	ldi	r25, 0x41	; 65
     ace:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <pow>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9c 01       	movw	r18, r24
     ad8:	ad 01       	movw	r20, r26
     ada:	68 85       	ldd	r22, Y+8	; 0x08
     adc:	79 85       	ldd	r23, Y+9	; 0x09
     ade:	8a 85       	ldd	r24, Y+10	; 0x0a
     ae0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ae2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	bc 01       	movw	r22, r24
     aec:	cd 01       	movw	r24, r26
     aee:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fixunssfsi>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8f 83       	std	Y+7, r24	; 0x07
		y=no/(pow(10,e));
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	99 27       	eor	r25, r25
     afc:	87 fd       	sbrc	r24, 7
     afe:	90 95       	com	r25
     b00:	a9 2f       	mov	r26, r25
     b02:	b9 2f       	mov	r27, r25
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
     b0c:	9b 01       	movw	r18, r22
     b0e:	ac 01       	movw	r20, r24
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	80 e2       	ldi	r24, 0x20	; 32
     b16:	91 e4       	ldi	r25, 0x41	; 65
     b18:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <pow>
     b1c:	9b 01       	movw	r18, r22
     b1e:	ac 01       	movw	r20, r24
     b20:	68 85       	ldd	r22, Y+8	; 0x08
     b22:	79 85       	ldd	r23, Y+9	; 0x09
     b24:	8a 85       	ldd	r24, Y+10	; 0x0a
     b26:	9b 85       	ldd	r25, Y+11	; 0x0b
     b28:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
     b2c:	dc 01       	movw	r26, r24
     b2e:	cb 01       	movw	r24, r22
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	ab 83       	std	Y+3, r26	; 0x03
     b36:	bc 83       	std	Y+4, r27	; 0x04
     b38:	11 c0       	rjmp	.+34     	; 0xb5c <lcd_print_float+0x126>
	}
	else
	{
		x=no;
     b3a:	68 85       	ldd	r22, Y+8	; 0x08
     b3c:	79 85       	ldd	r23, Y+9	; 0x09
     b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b40:	9b 85       	ldd	r25, Y+11	; 0x0b
     b42:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fixunssfsi>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	8f 83       	std	Y+7, r24	; 0x07
		y=no;
     b4c:	88 85       	ldd	r24, Y+8	; 0x08
     b4e:	99 85       	ldd	r25, Y+9	; 0x09
     b50:	aa 85       	ldd	r26, Y+10	; 0x0a
     b52:	bb 85       	ldd	r27, Y+11	; 0x0b
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	ab 83       	std	Y+3, r26	; 0x03
     b5a:	bc 83       	std	Y+4, r27	; 0x04
	}
	if(x<1)
     b5c:	8f 81       	ldd	r24, Y+7	; 0x07
     b5e:	88 23       	and	r24, r24
     b60:	09 f0       	breq	.+2      	; 0xb64 <lcd_print_float+0x12e>
     b62:	46 c0       	rjmp	.+140    	; 0xbf0 <lcd_print_float+0x1ba>
	{
		e--;
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	81 50       	subi	r24, 0x01	; 1
     b68:	8d 83       	std	Y+5, r24	; 0x05
		x=no/(pow(10,e));
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	99 27       	eor	r25, r25
     b6e:	87 fd       	sbrc	r24, 7
     b70:	90 95       	com	r25
     b72:	a9 2f       	mov	r26, r25
     b74:	b9 2f       	mov	r27, r25
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	91 e4       	ldi	r25, 0x41	; 65
     b8a:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <pow>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	68 85       	ldd	r22, Y+8	; 0x08
     b94:	79 85       	ldd	r23, Y+9	; 0x09
     b96:	8a 85       	ldd	r24, Y+10	; 0x0a
     b98:	9b 85       	ldd	r25, Y+11	; 0x0b
     b9a:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	bc 01       	movw	r22, r24
     ba4:	cd 01       	movw	r24, r26
     ba6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fixunssfsi>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8f 83       	std	Y+7, r24	; 0x07
		y=no/(pow(10,e));
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	99 27       	eor	r25, r25
     bb4:	87 fd       	sbrc	r24, 7
     bb6:	90 95       	com	r25
     bb8:	a9 2f       	mov	r26, r25
     bba:	b9 2f       	mov	r27, r25
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e2       	ldi	r24, 0x20	; 32
     bce:	91 e4       	ldi	r25, 0x41	; 65
     bd0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <pow>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	68 85       	ldd	r22, Y+8	; 0x08
     bda:	79 85       	ldd	r23, Y+9	; 0x09
     bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
     bde:	9b 85       	ldd	r25, Y+11	; 0x0b
     be0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	ab 83       	std	Y+3, r26	; 0x03
     bee:	bc 83       	std	Y+4, r27	; 0x04
	}
	lcd_print_uint8(x);
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_print_uint8>
	lcd_print_string(".");
     bf6:	82 e6       	ldi	r24, 0x62	; 98
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>

	for(i=0;i<5;i++)
     bfe:	1e 82       	std	Y+6, r1	; 0x06
     c00:	32 c0       	rjmp	.+100    	; 0xc66 <lcd_print_float+0x230>
	{
		y=(y-x)*10;
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	aa 27       	eor	r26, r26
     c0a:	97 fd       	sbrc	r25, 7
     c0c:	a0 95       	com	r26
     c0e:	ba 2f       	mov	r27, r26
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	ab 83       	std	Y+3, r26	; 0x03
     c46:	bc 83       	std	Y+4, r27	; 0x04
		x=y;
     c48:	69 81       	ldd	r22, Y+1	; 0x01
     c4a:	7a 81       	ldd	r23, Y+2	; 0x02
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	8f 83       	std	Y+7, r24	; 0x07
		lcd_print_uint8(x);
     c5a:	8f 81       	ldd	r24, Y+7	; 0x07
     c5c:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_print_uint8>
		y=no/(pow(10,e));
	}
	lcd_print_uint8(x);
	lcd_print_string(".");

	for(i=0;i<5;i++)
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	8f 5f       	subi	r24, 0xFF	; 255
     c64:	8e 83       	std	Y+6, r24	; 0x06
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	85 30       	cpi	r24, 0x05	; 5
     c6a:	58 f2       	brcs	.-106    	; 0xc02 <lcd_print_float+0x1cc>
		x=y;
		lcd_print_uint8(x);
		
	}

	lcd_print_string("E");
     c6c:	84 e6       	ldi	r24, 0x64	; 100
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
	lcd_print_int8(e);
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	0e 94 05 03 	call	0x60a	; 0x60a <lcd_print_int8>

}
     c7a:	2b 96       	adiw	r28, 0x0b	; 11
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <lcd_printf>:
//  same for gcc for the AVR
// no formatting is implemented
// \n \t etc not yet supported
//
void lcd_printf(char *fmt, ...)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	a6 97       	sbiw	r28, 0x26	; 38
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
	int16_t	ival;
	double dval;
	uint16_t base,uval;
	int8_t scratch[16];

	va_start(ap,fmt);
     ca0:	ce 01       	movw	r24, r28
     ca2:	8d 96       	adiw	r24, 0x2d	; 45
     ca4:	9c 8b       	std	Y+20, r25	; 0x14
     ca6:	8b 8b       	std	Y+19, r24	; 0x13
	for(p=fmt;*p;p++)
     ca8:	8b a5       	ldd	r24, Y+43	; 0x2b
     caa:	9c a5       	ldd	r25, Y+44	; 0x2c
     cac:	9a 8b       	std	Y+18, r25	; 0x12
     cae:	89 8b       	std	Y+17, r24	; 0x11
     cb0:	98 c1       	rjmp	.+816    	; 0xfe2 <lcd_printf+0x356>
	{
		if(*p!='%')
     cb2:	e9 89       	ldd	r30, Y+17	; 0x11
     cb4:	fa 89       	ldd	r31, Y+18	; 0x12
     cb6:	80 81       	ld	r24, Z
     cb8:	85 32       	cpi	r24, 0x25	; 37
     cba:	c1 f0       	breq	.+48     	; 0xcec <lcd_printf+0x60>
		{
			if(*p=='\n')
     cbc:	e9 89       	ldd	r30, Y+17	; 0x11
     cbe:	fa 89       	ldd	r31, Y+18	; 0x12
     cc0:	80 81       	ld	r24, Z
     cc2:	8a 30       	cpi	r24, 0x0A	; 10
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <lcd_printf+0x3c>
     cc6:	88 c1       	rjmp	.+784    	; 0xfd8 <lcd_printf+0x34c>
			;
			else if(*p=='\t')
     cc8:	e9 89       	ldd	r30, Y+17	; 0x11
     cca:	fa 89       	ldd	r31, Y+18	; 0x12
     ccc:	80 81       	ld	r24, Z
     cce:	89 30       	cpi	r24, 0x09	; 9
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <lcd_printf+0x48>
     cd2:	82 c1       	rjmp	.+772    	; 0xfd8 <lcd_printf+0x34c>
			;
			else if(*p=='\b')
     cd4:	e9 89       	ldd	r30, Y+17	; 0x11
     cd6:	fa 89       	ldd	r31, Y+18	; 0x12
     cd8:	80 81       	ld	r24, Z
     cda:	88 30       	cpi	r24, 0x08	; 8
     cdc:	09 f4       	brne	.+2      	; 0xce0 <lcd_printf+0x54>
     cde:	7c c1       	rjmp	.+760    	; 0xfd8 <lcd_printf+0x34c>
			;
			else
				lcd_print_char(*p);
     ce0:	e9 89       	ldd	r30, Y+17	; 0x11
     ce2:	fa 89       	ldd	r31, Y+18	; 0x12
     ce4:	80 81       	ld	r24, Z
     ce6:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_print_char>
     cea:	76 c1       	rjmp	.+748    	; 0xfd8 <lcd_printf+0x34c>
			continue;
		}

		switch(*++p)
     cec:	89 89       	ldd	r24, Y+17	; 0x11
     cee:	9a 89       	ldd	r25, Y+18	; 0x12
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	9a 8b       	std	Y+18, r25	; 0x12
     cf4:	89 8b       	std	Y+17, r24	; 0x11
     cf6:	e9 89       	ldd	r30, Y+17	; 0x11
     cf8:	fa 89       	ldd	r31, Y+18	; 0x12
     cfa:	80 81       	ld	r24, Z
     cfc:	28 2f       	mov	r18, r24
     cfe:	33 27       	eor	r19, r19
     d00:	27 fd       	sbrc	r18, 7
     d02:	30 95       	com	r19
     d04:	3e a3       	std	Y+38, r19	; 0x26
     d06:	2d a3       	std	Y+37, r18	; 0x25
     d08:	8d a1       	ldd	r24, Y+37	; 0x25
     d0a:	9e a1       	ldd	r25, Y+38	; 0x26
     d0c:	89 36       	cpi	r24, 0x69	; 105
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <lcd_printf+0x88>
     d12:	42 c0       	rjmp	.+132    	; 0xd98 <lcd_printf+0x10c>
     d14:	2d a1       	ldd	r18, Y+37	; 0x25
     d16:	3e a1       	ldd	r19, Y+38	; 0x26
     d18:	2a 36       	cpi	r18, 0x6A	; 106
     d1a:	31 05       	cpc	r19, r1
     d1c:	f4 f4       	brge	.+60     	; 0xd5a <lcd_printf+0xce>
     d1e:	8d a1       	ldd	r24, Y+37	; 0x25
     d20:	9e a1       	ldd	r25, Y+38	; 0x26
     d22:	83 36       	cpi	r24, 0x63	; 99
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <lcd_printf+0x9e>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <lcd_printf+0x12c>
     d2a:	2d a1       	ldd	r18, Y+37	; 0x25
     d2c:	3e a1       	ldd	r19, Y+38	; 0x26
     d2e:	24 36       	cpi	r18, 0x64	; 100
     d30:	31 05       	cpc	r19, r1
     d32:	3c f4       	brge	.+14     	; 0xd42 <lcd_printf+0xb6>
     d34:	8d a1       	ldd	r24, Y+37	; 0x25
     d36:	9e a1       	ldd	r25, Y+38	; 0x26
     d38:	88 35       	cpi	r24, 0x58	; 88
     d3a:	91 05       	cpc	r25, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <lcd_printf+0xb4>
     d3e:	72 c0       	rjmp	.+228    	; 0xe24 <lcd_printf+0x198>
     d40:	46 c1       	rjmp	.+652    	; 0xfce <lcd_printf+0x342>
     d42:	2d a1       	ldd	r18, Y+37	; 0x25
     d44:	3e a1       	ldd	r19, Y+38	; 0x26
     d46:	24 36       	cpi	r18, 0x64	; 100
     d48:	31 05       	cpc	r19, r1
     d4a:	31 f1       	breq	.+76     	; 0xd98 <lcd_printf+0x10c>
     d4c:	8d a1       	ldd	r24, Y+37	; 0x25
     d4e:	9e a1       	ldd	r25, Y+38	; 0x26
     d50:	86 36       	cpi	r24, 0x66	; 102
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <lcd_printf+0xcc>
     d56:	3e c0       	rjmp	.+124    	; 0xdd4 <lcd_printf+0x148>
     d58:	3a c1       	rjmp	.+628    	; 0xfce <lcd_printf+0x342>
     d5a:	2d a1       	ldd	r18, Y+37	; 0x25
     d5c:	3e a1       	ldd	r19, Y+38	; 0x26
     d5e:	23 37       	cpi	r18, 0x73	; 115
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <lcd_printf+0xda>
     d64:	4f c0       	rjmp	.+158    	; 0xe04 <lcd_printf+0x178>
     d66:	8d a1       	ldd	r24, Y+37	; 0x25
     d68:	9e a1       	ldd	r25, Y+38	; 0x26
     d6a:	84 37       	cpi	r24, 0x74	; 116
     d6c:	91 05       	cpc	r25, r1
     d6e:	3c f4       	brge	.+14     	; 0xd7e <lcd_printf+0xf2>
     d70:	2d a1       	ldd	r18, Y+37	; 0x25
     d72:	3e a1       	ldd	r19, Y+38	; 0x26
     d74:	2f 36       	cpi	r18, 0x6F	; 111
     d76:	31 05       	cpc	r19, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <lcd_printf+0xf0>
     d7a:	9b c0       	rjmp	.+310    	; 0xeb2 <lcd_printf+0x226>
     d7c:	28 c1       	rjmp	.+592    	; 0xfce <lcd_printf+0x342>
     d7e:	8d a1       	ldd	r24, Y+37	; 0x25
     d80:	9e a1       	ldd	r25, Y+38	; 0x26
     d82:	85 37       	cpi	r24, 0x75	; 117
     d84:	91 05       	cpc	r25, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <lcd_printf+0xfe>
     d88:	db c0       	rjmp	.+438    	; 0xf40 <lcd_printf+0x2b4>
     d8a:	2d a1       	ldd	r18, Y+37	; 0x25
     d8c:	3e a1       	ldd	r19, Y+38	; 0x26
     d8e:	28 37       	cpi	r18, 0x78	; 120
     d90:	31 05       	cpc	r19, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <lcd_printf+0x10a>
     d94:	47 c0       	rjmp	.+142    	; 0xe24 <lcd_printf+0x198>
     d96:	1b c1       	rjmp	.+566    	; 0xfce <lcd_printf+0x342>
		{
			case 'd':
			case 'i':
				ival=va_arg(ap,int16_t);
     d98:	2b 89       	ldd	r18, Y+19	; 0x13
     d9a:	3c 89       	ldd	r19, Y+20	; 0x14
     d9c:	c9 01       	movw	r24, r18
     d9e:	02 96       	adiw	r24, 0x02	; 2
     da0:	9c 8b       	std	Y+20, r25	; 0x14
     da2:	8b 8b       	std	Y+19, r24	; 0x13
     da4:	f9 01       	movw	r30, r18
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	9d 87       	std	Y+13, r25	; 0x0d
     dac:	8c 87       	std	Y+12, r24	; 0x0c
				lcd_print_int16(ival);
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	9d 85       	ldd	r25, Y+13	; 0x0d
     db2:	0e 94 38 04 	call	0x870	; 0x870 <lcd_print_int16>
     db6:	10 c1       	rjmp	.+544    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'c':
				cval=va_arg(ap,int16_t);		// this is not clean does not work with int8_t
     db8:	2b 89       	ldd	r18, Y+19	; 0x13
     dba:	3c 89       	ldd	r19, Y+20	; 0x14
     dbc:	c9 01       	movw	r24, r18
     dbe:	02 96       	adiw	r24, 0x02	; 2
     dc0:	9c 8b       	std	Y+20, r25	; 0x14
     dc2:	8b 8b       	std	Y+19, r24	; 0x13
     dc4:	f9 01       	movw	r30, r18
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	8e 87       	std	Y+14, r24	; 0x0e
				lcd_print_char(cval);			// this seems to be a problem
     dcc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dce:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_print_char>
     dd2:	02 c1       	rjmp	.+516    	; 0xfd8 <lcd_printf+0x34c>
				break;							// with the va_arg macro

			case 'f':
				dval=va_arg(ap,double);
     dd4:	2b 89       	ldd	r18, Y+19	; 0x13
     dd6:	3c 89       	ldd	r19, Y+20	; 0x14
     dd8:	c9 01       	movw	r24, r18
     dda:	04 96       	adiw	r24, 0x04	; 4
     ddc:	9c 8b       	std	Y+20, r25	; 0x14
     dde:	8b 8b       	std	Y+19, r24	; 0x13
     de0:	f9 01       	movw	r30, r18
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	a2 81       	ldd	r26, Z+2	; 0x02
     de8:	b3 81       	ldd	r27, Z+3	; 0x03
     dea:	88 87       	std	Y+8, r24	; 0x08
     dec:	99 87       	std	Y+9, r25	; 0x09
     dee:	aa 87       	std	Y+10, r26	; 0x0a
     df0:	bb 87       	std	Y+11, r27	; 0x0b
				lcd_print_float(dval);
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	99 85       	ldd	r25, Y+9	; 0x09
     df6:	aa 85       	ldd	r26, Y+10	; 0x0a
     df8:	bb 85       	ldd	r27, Y+11	; 0x0b
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print_float>
     e02:	ea c0       	rjmp	.+468    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 's':
				sval = va_arg(ap,char *);
     e04:	2b 89       	ldd	r18, Y+19	; 0x13
     e06:	3c 89       	ldd	r19, Y+20	; 0x14
     e08:	c9 01       	movw	r24, r18
     e0a:	02 96       	adiw	r24, 0x02	; 2
     e0c:	9c 8b       	std	Y+20, r25	; 0x14
     e0e:	8b 8b       	std	Y+19, r24	; 0x13
     e10:	f9 01       	movw	r30, r18
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	98 8b       	std	Y+16, r25	; 0x10
     e18:	8f 87       	std	Y+15, r24	; 0x0f
				lcd_print_string(sval);
     e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1c:	98 89       	ldd	r25, Y+16	; 0x10
     e1e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     e22:	da c0       	rjmp	.+436    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'x':
			case 'X':
				base = 16;
     e24:	80 e1       	ldi	r24, 0x10	; 16
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9f 83       	std	Y+7, r25	; 0x07
     e2a:	8e 83       	std	Y+6, r24	; 0x06
				sval = scratch + 16;
     e2c:	ce 01       	movw	r24, r28
     e2e:	45 96       	adiw	r24, 0x15	; 21
     e30:	40 96       	adiw	r24, 0x10	; 16
     e32:	98 8b       	std	Y+16, r25	; 0x10
     e34:	8f 87       	std	Y+15, r24	; 0x0f
				*--sval = 0;
     e36:	8f 85       	ldd	r24, Y+15	; 0x0f
     e38:	98 89       	ldd	r25, Y+16	; 0x10
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	98 8b       	std	Y+16, r25	; 0x10
     e3e:	8f 87       	std	Y+15, r24	; 0x0f
     e40:	ef 85       	ldd	r30, Y+15	; 0x0f
     e42:	f8 89       	ldd	r31, Y+16	; 0x10
     e44:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
     e46:	2b 89       	ldd	r18, Y+19	; 0x13
     e48:	3c 89       	ldd	r19, Y+20	; 0x14
     e4a:	c9 01       	movw	r24, r18
     e4c:	02 96       	adiw	r24, 0x02	; 2
     e4e:	9c 8b       	std	Y+20, r25	; 0x14
     e50:	8b 8b       	std	Y+19, r24	; 0x13
     e52:	f9 01       	movw	r30, r18
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	9d 83       	std	Y+5, r25	; 0x05
     e5a:	8c 83       	std	Y+4, r24	; 0x04
				do {
					char ch = uval % base + '0';
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	2e 81       	ldd	r18, Y+6	; 0x06
     e62:	3f 81       	ldd	r19, Y+7	; 0x07
     e64:	b9 01       	movw	r22, r18
     e66:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     e6a:	80 5d       	subi	r24, 0xD0	; 208
     e6c:	8b 83       	std	Y+3, r24	; 0x03
					if (ch > '9')
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	8a 33       	cpi	r24, 0x3A	; 58
     e72:	18 f0       	brcs	.+6      	; 0xe7a <lcd_printf+0x1ee>
						ch += 'a' - '9' - 1;
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	89 5d       	subi	r24, 0xD9	; 217
     e78:	8b 83       	std	Y+3, r24	; 0x03
					*--sval = ch;
     e7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e7c:	98 89       	ldd	r25, Y+16	; 0x10
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	98 8b       	std	Y+16, r25	; 0x10
     e82:	8f 87       	std	Y+15, r24	; 0x0f
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	ef 85       	ldd	r30, Y+15	; 0x0f
     e88:	f8 89       	ldd	r31, Y+16	; 0x10
     e8a:	80 83       	st	Z, r24
					uval /= base;
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	b9 01       	movw	r22, r18
     e96:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     e9a:	cb 01       	movw	r24, r22
     e9c:	9d 83       	std	Y+5, r25	; 0x05
     e9e:	8c 83       	std	Y+4, r24	; 0x04
				} while (uval);
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	d1 f6       	brne	.-76     	; 0xe5c <lcd_printf+0x1d0>
				lcd_print_string(sval);
     ea8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eaa:	98 89       	ldd	r25, Y+16	; 0x10
     eac:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     eb0:	93 c0       	rjmp	.+294    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'o':
				base = 8;
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9f 83       	std	Y+7, r25	; 0x07
     eb8:	8e 83       	std	Y+6, r24	; 0x06
				sval = scratch + 16;
     eba:	ce 01       	movw	r24, r28
     ebc:	45 96       	adiw	r24, 0x15	; 21
     ebe:	40 96       	adiw	r24, 0x10	; 16
     ec0:	98 8b       	std	Y+16, r25	; 0x10
     ec2:	8f 87       	std	Y+15, r24	; 0x0f
				*--sval = 0;
     ec4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ec6:	98 89       	ldd	r25, Y+16	; 0x10
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	98 8b       	std	Y+16, r25	; 0x10
     ecc:	8f 87       	std	Y+15, r24	; 0x0f
     ece:	ef 85       	ldd	r30, Y+15	; 0x0f
     ed0:	f8 89       	ldd	r31, Y+16	; 0x10
     ed2:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
     ed4:	2b 89       	ldd	r18, Y+19	; 0x13
     ed6:	3c 89       	ldd	r19, Y+20	; 0x14
     ed8:	c9 01       	movw	r24, r18
     eda:	02 96       	adiw	r24, 0x02	; 2
     edc:	9c 8b       	std	Y+20, r25	; 0x14
     ede:	8b 8b       	std	Y+19, r24	; 0x13
     ee0:	f9 01       	movw	r30, r18
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	9d 83       	std	Y+5, r25	; 0x05
     ee8:	8c 83       	std	Y+4, r24	; 0x04
				do {
					char ch = uval % base + '0';
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	b9 01       	movw	r22, r18
     ef4:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     ef8:	80 5d       	subi	r24, 0xD0	; 208
     efa:	8a 83       	std	Y+2, r24	; 0x02
					if (ch > '9')
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	8a 33       	cpi	r24, 0x3A	; 58
     f00:	18 f0       	brcs	.+6      	; 0xf08 <lcd_printf+0x27c>
					ch += 'a' - '9' - 1;
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	89 5d       	subi	r24, 0xD9	; 217
     f06:	8a 83       	std	Y+2, r24	; 0x02
					*--sval = ch;
     f08:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0a:	98 89       	ldd	r25, Y+16	; 0x10
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	98 8b       	std	Y+16, r25	; 0x10
     f10:	8f 87       	std	Y+15, r24	; 0x0f
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	ef 85       	ldd	r30, Y+15	; 0x0f
     f16:	f8 89       	ldd	r31, Y+16	; 0x10
     f18:	80 83       	st	Z, r24
					uval /= base;
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	2e 81       	ldd	r18, Y+6	; 0x06
     f20:	3f 81       	ldd	r19, Y+7	; 0x07
     f22:	b9 01       	movw	r22, r18
     f24:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     f28:	cb 01       	movw	r24, r22
     f2a:	9d 83       	std	Y+5, r25	; 0x05
     f2c:	8c 83       	std	Y+4, r24	; 0x04
				} while (uval);
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	d1 f6       	brne	.-76     	; 0xeea <lcd_printf+0x25e>
				lcd_print_string(sval);
     f36:	8f 85       	ldd	r24, Y+15	; 0x0f
     f38:	98 89       	ldd	r25, Y+16	; 0x10
     f3a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     f3e:	4c c0       	rjmp	.+152    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'u':
				base = 10;
     f40:	8a e0       	ldi	r24, 0x0A	; 10
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9f 83       	std	Y+7, r25	; 0x07
     f46:	8e 83       	std	Y+6, r24	; 0x06
				sval = scratch + 16;
     f48:	ce 01       	movw	r24, r28
     f4a:	45 96       	adiw	r24, 0x15	; 21
     f4c:	40 96       	adiw	r24, 0x10	; 16
     f4e:	98 8b       	std	Y+16, r25	; 0x10
     f50:	8f 87       	std	Y+15, r24	; 0x0f
				*--sval = 0;
     f52:	8f 85       	ldd	r24, Y+15	; 0x0f
     f54:	98 89       	ldd	r25, Y+16	; 0x10
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	98 8b       	std	Y+16, r25	; 0x10
     f5a:	8f 87       	std	Y+15, r24	; 0x0f
     f5c:	ef 85       	ldd	r30, Y+15	; 0x0f
     f5e:	f8 89       	ldd	r31, Y+16	; 0x10
     f60:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
     f62:	2b 89       	ldd	r18, Y+19	; 0x13
     f64:	3c 89       	ldd	r19, Y+20	; 0x14
     f66:	c9 01       	movw	r24, r18
     f68:	02 96       	adiw	r24, 0x02	; 2
     f6a:	9c 8b       	std	Y+20, r25	; 0x14
     f6c:	8b 8b       	std	Y+19, r24	; 0x13
     f6e:	f9 01       	movw	r30, r18
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	9d 83       	std	Y+5, r25	; 0x05
     f76:	8c 83       	std	Y+4, r24	; 0x04
				do {
					char ch = uval % base + '0';
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	2e 81       	ldd	r18, Y+6	; 0x06
     f7e:	3f 81       	ldd	r19, Y+7	; 0x07
     f80:	b9 01       	movw	r22, r18
     f82:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     f86:	80 5d       	subi	r24, 0xD0	; 208
     f88:	89 83       	std	Y+1, r24	; 0x01
					if (ch > '9')
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	8a 33       	cpi	r24, 0x3A	; 58
     f8e:	18 f0       	brcs	.+6      	; 0xf96 <lcd_printf+0x30a>
						ch += 'a' - '9' - 1;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	89 5d       	subi	r24, 0xD9	; 217
     f94:	89 83       	std	Y+1, r24	; 0x01
					*--sval = ch;
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	98 89       	ldd	r25, Y+16	; 0x10
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	98 8b       	std	Y+16, r25	; 0x10
     f9e:	8f 87       	std	Y+15, r24	; 0x0f
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	ef 85       	ldd	r30, Y+15	; 0x0f
     fa4:	f8 89       	ldd	r31, Y+16	; 0x10
     fa6:	80 83       	st	Z, r24
					uval /= base;
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	2e 81       	ldd	r18, Y+6	; 0x06
     fae:	3f 81       	ldd	r19, Y+7	; 0x07
     fb0:	b9 01       	movw	r22, r18
     fb2:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <__udivmodhi4>
     fb6:	cb 01       	movw	r24, r22
     fb8:	9d 83       	std	Y+5, r25	; 0x05
     fba:	8c 83       	std	Y+4, r24	; 0x04
				} while (uval);
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	d1 f6       	brne	.-76     	; 0xf78 <lcd_printf+0x2ec>
				lcd_print_string(sval);
     fc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc6:	98 89       	ldd	r25, Y+16	; 0x10
     fc8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <lcd_printf+0x34c>
				break;

			default:
				lcd_print_char(*p);
     fce:	e9 89       	ldd	r30, Y+17	; 0x11
     fd0:	fa 89       	ldd	r31, Y+18	; 0x12
     fd2:	80 81       	ld	r24, Z
     fd4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_print_char>
	double dval;
	uint16_t base,uval;
	int8_t scratch[16];

	va_start(ap,fmt);
	for(p=fmt;*p;p++)
     fd8:	89 89       	ldd	r24, Y+17	; 0x11
     fda:	9a 89       	ldd	r25, Y+18	; 0x12
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	9a 8b       	std	Y+18, r25	; 0x12
     fe0:	89 8b       	std	Y+17, r24	; 0x11
     fe2:	e9 89       	ldd	r30, Y+17	; 0x11
     fe4:	fa 89       	ldd	r31, Y+18	; 0x12
     fe6:	80 81       	ld	r24, Z
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <lcd_printf+0x362>
     fec:	62 ce       	rjmp	.-828    	; 0xcb2 <lcd_printf+0x26>
				lcd_print_char(*p);
				break;
		}
	}
	va_end(ap);
}
     fee:	a6 96       	adiw	r28, 0x26	; 38
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <ConvertCurrentSamplesToAmps>:




void ConvertCurrentSamplesToAmps(int *inputSample, float *amps, uint8_t gain)
{
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	28 97       	sbiw	r28, 0x08	; 8
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	9d 83       	std	Y+5, r25	; 0x05
    1022:	8c 83       	std	Y+4, r24	; 0x04
    1024:	7f 83       	std	Y+7, r23	; 0x07
    1026:	6e 83       	std	Y+6, r22	; 0x06
    1028:	48 87       	std	Y+8, r20	; 0x08
	for(uint8_t k = 0 ; k<75 ; k++)
    102a:	1b 82       	std	Y+3, r1	; 0x03
    102c:	8e c0       	rjmp	.+284    	; 0x114a <ConvertCurrentSamplesToAmps+0x14a>
	{
		if (inputSample[k] > 512)									//if sample taken is greater than 512 bits, do 2's compliment and make it negative
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 01       	movw	r18, r24
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	8c 81       	ldd	r24, Y+4	; 0x04
    103c:	9d 81       	ldd	r25, Y+5	; 0x05
    103e:	fc 01       	movw	r30, r24
    1040:	e2 0f       	add	r30, r18
    1042:	f3 1f       	adc	r31, r19
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	22 e0       	ldi	r18, 0x02	; 2
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	92 07       	cpc	r25, r18
    104e:	2c f1       	brlt	.+74     	; 0x109a <ConvertCurrentSamplesToAmps+0x9a>
		{
			int negative = (~(inputSample[k] - 1)) & 0x03FF;		//2's compliment of current samples
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	9c 01       	movw	r18, r24
    1058:	22 0f       	add	r18, r18
    105a:	33 1f       	adc	r19, r19
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	9d 81       	ldd	r25, Y+5	; 0x05
    1060:	fc 01       	movw	r30, r24
    1062:	e2 0f       	add	r30, r18
    1064:	f3 1f       	adc	r31, r19
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	90 95       	com	r25
    106c:	81 95       	neg	r24
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	93 70       	andi	r25, 0x03	; 3
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
			inputSample[k] = -negative;
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	22 0f       	add	r18, r18
    1080:	33 1f       	adc	r19, r19
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	9d 81       	ldd	r25, Y+5	; 0x05
    1086:	fc 01       	movw	r30, r24
    1088:	e2 0f       	add	r30, r18
    108a:	f3 1f       	adc	r31, r19
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	9a 81       	ldd	r25, Y+2	; 0x02
    1090:	90 95       	com	r25
    1092:	81 95       	neg	r24
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	91 83       	std	Z+1, r25	; 0x01
    1098:	80 83       	st	Z, r24
		//if(gain == 10 || gain == 200)
		//	amps[k] = 0.00242*inputSample[k]-0.044699;
		//else
		//	amps[k] = 0.084236*inputSample[k]- 0.368884;

		amps[k] = ((inputSample[k]*3.3)/(512*gain))/0.071;	//ideal trendline
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9c 01       	movw	r18, r24
    10a2:	22 0f       	add	r18, r18
    10a4:	33 1f       	adc	r19, r19
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f 81       	ldd	r25, Y+7	; 0x07
    10ae:	6c 01       	movw	r12, r24
    10b0:	c2 0e       	add	r12, r18
    10b2:	d3 1e       	adc	r13, r19
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 01       	movw	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	8c 81       	ldd	r24, Y+4	; 0x04
    10c2:	9d 81       	ldd	r25, Y+5	; 0x05
    10c4:	fc 01       	movw	r30, r24
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	80 81       	ld	r24, Z
    10cc:	91 81       	ldd	r25, Z+1	; 0x01
    10ce:	aa 27       	eor	r26, r26
    10d0:	97 fd       	sbrc	r25, 7
    10d2:	a0 95       	com	r26
    10d4:	ba 2f       	mov	r27, r26
    10d6:	bc 01       	movw	r22, r24
    10d8:	cd 01       	movw	r24, r26
    10da:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	bc 01       	movw	r22, r24
    10e4:	cd 01       	movw	r24, r26
    10e6:	23 e3       	ldi	r18, 0x33	; 51
    10e8:	33 e3       	ldi	r19, 0x33	; 51
    10ea:	43 e5       	ldi	r20, 0x53	; 83
    10ec:	50 e4       	ldi	r21, 0x40	; 64
    10ee:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	7c 01       	movw	r14, r24
    10f8:	8d 01       	movw	r16, r26
    10fa:	88 85       	ldd	r24, Y+8	; 0x08
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	98 2f       	mov	r25, r24
    1102:	88 27       	eor	r24, r24
    1104:	99 0f       	add	r25, r25
    1106:	aa 27       	eor	r26, r26
    1108:	97 fd       	sbrc	r25, 7
    110a:	a0 95       	com	r26
    110c:	ba 2f       	mov	r27, r26
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	c8 01       	movw	r24, r16
    111c:	b7 01       	movw	r22, r14
    111e:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	23 e7       	ldi	r18, 0x73	; 115
    112c:	38 e6       	ldi	r19, 0x68	; 104
    112e:	41 e9       	ldi	r20, 0x91	; 145
    1130:	5d e3       	ldi	r21, 0x3D	; 61
    1132:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	f6 01       	movw	r30, r12
    113c:	80 83       	st	Z, r24
    113e:	91 83       	std	Z+1, r25	; 0x01
    1140:	a2 83       	std	Z+2, r26	; 0x02
    1142:	b3 83       	std	Z+3, r27	; 0x03



void ConvertCurrentSamplesToAmps(int *inputSample, float *amps, uint8_t gain)
{
	for(uint8_t k = 0 ; k<75 ; k++)
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	8b 34       	cpi	r24, 0x4B	; 75
    114e:	08 f4       	brcc	.+2      	; 0x1152 <ConvertCurrentSamplesToAmps+0x152>
    1150:	6e cf       	rjmp	.-292    	; 0x102e <ConvertCurrentSamplesToAmps+0x2e>
		//else
		//	amps[k] = 0.084236*inputSample[k]- 0.368884;

		amps[k] = ((inputSample[k]*3.3)/(512*gain))/0.071;	//ideal trendline
	}//for
}
    1152:	28 96       	adiw	r28, 0x08	; 8
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	de bf       	out	0x3e, r29	; 62
    115a:	0f be       	out	0x3f, r0	; 63
    115c:	cd bf       	out	0x3d, r28	; 61
    115e:	cf 91       	pop	r28
    1160:	df 91       	pop	r29
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	ff 90       	pop	r15
    1168:	ef 90       	pop	r14
    116a:	df 90       	pop	r13
    116c:	cf 90       	pop	r12
    116e:	08 95       	ret

00001170 <FindNewGainValue>:


//((ADC*3.3)/(512*gain))/.065) = Current. 
void FindNewGainValue(uint8_t* gain, int imax)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <FindNewGainValue+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <FindNewGainValue+0x8>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9a 83       	std	Y+2, r25	; 0x02
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	7c 83       	std	Y+4, r23	; 0x04
    1182:	6b 83       	std	Y+3, r22	; 0x03
	if((*gain == 200) && (imax >= 479))		//above 237mA change to 10x gain
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	80 81       	ld	r24, Z
    118a:	88 3c       	cpi	r24, 0xC8	; 200
    118c:	59 f4       	brne	.+22     	; 0x11a4 <FindNewGainValue+0x34>
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	9c 81       	ldd	r25, Y+4	; 0x04
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	8f 3d       	cpi	r24, 0xDF	; 223
    1196:	92 07       	cpc	r25, r18
    1198:	2c f0       	brlt	.+10     	; 0x11a4 <FindNewGainValue+0x34>
		*gain = 10;							//
    119a:	e9 81       	ldd	r30, Y+1	; 0x01
    119c:	fa 81       	ldd	r31, Y+2	; 0x02
    119e:	8a e0       	ldi	r24, 0x0A	; 10
    11a0:	80 83       	st	Z, r24
    11a2:	2d c0       	rjmp	.+90     	; 0x11fe <FindNewGainValue+0x8e>
	else if((*gain == 1) && (imax <= 49))	//below 4.8 A change to 10x gain
    11a4:	e9 81       	ldd	r30, Y+1	; 0x01
    11a6:	fa 81       	ldd	r31, Y+2	; 0x02
    11a8:	80 81       	ld	r24, Z
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	51 f4       	brne	.+20     	; 0x11c2 <FindNewGainValue+0x52>
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	82 33       	cpi	r24, 0x32	; 50
    11b4:	91 05       	cpc	r25, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <FindNewGainValue+0x52>
		*gain =10; 
    11b8:	e9 81       	ldd	r30, Y+1	; 0x01
    11ba:	fa 81       	ldd	r31, Y+2	; 0x02
    11bc:	8a e0       	ldi	r24, 0x0A	; 10
    11be:	80 83       	st	Z, r24
    11c0:	1e c0       	rjmp	.+60     	; 0x11fe <FindNewGainValue+0x8e>
	else if ((*gain == 10) && (imax <= 24))	//below 237mA change to 200x gain
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	80 81       	ld	r24, Z
    11c8:	8a 30       	cpi	r24, 0x0A	; 10
    11ca:	51 f4       	brne	.+20     	; 0x11e0 <FindNewGainValue+0x70>
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	89 31       	cpi	r24, 0x19	; 25
    11d2:	91 05       	cpc	r25, r1
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <FindNewGainValue+0x70>
		*gain = 200;						//
    11d6:	e9 81       	ldd	r30, Y+1	; 0x01
    11d8:	fa 81       	ldd	r31, Y+2	; 0x02
    11da:	88 ec       	ldi	r24, 0xC8	; 200
    11dc:	80 83       	st	Z, r24
    11de:	0f c0       	rjmp	.+30     	; 0x11fe <FindNewGainValue+0x8e>
	else if((*gain == 10) && (imax >= 480))	//above 4.75A change to 1x Gain
    11e0:	e9 81       	ldd	r30, Y+1	; 0x01
    11e2:	fa 81       	ldd	r31, Y+2	; 0x02
    11e4:	80 81       	ld	r24, Z
    11e6:	8a 30       	cpi	r24, 0x0A	; 10
    11e8:	51 f4       	brne	.+20     	; 0x11fe <FindNewGainValue+0x8e>
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	9c 81       	ldd	r25, Y+4	; 0x04
    11ee:	21 e0       	ldi	r18, 0x01	; 1
    11f0:	80 3e       	cpi	r24, 0xE0	; 224
    11f2:	92 07       	cpc	r25, r18
    11f4:	24 f0       	brlt	.+8      	; 0x11fe <FindNewGainValue+0x8e>
		*gain = 1;							//
    11f6:	e9 81       	ldd	r30, Y+1	; 0x01
    11f8:	fa 81       	ldd	r31, Y+2	; 0x02
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	80 83       	st	Z, r24
}//end gain state machine
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <TakeCurrentSample>:



int TakeCurrentSample(void)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <TakeCurrentSample+0x6>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADEN);								//re enable ADC
    1216:	a6 e2       	ldi	r26, 0x26	; 38
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	e6 e2       	ldi	r30, 0x26	; 38
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	80 68       	ori	r24, 0x80	; 128
    1222:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);								//ADC start conversion
    1224:	a6 e2       	ldi	r26, 0x26	; 38
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e6 e2       	ldi	r30, 0x26	; 38
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	80 64       	ori	r24, 0x40	; 64
    1230:	8c 93       	st	X, r24
	while(ADCSRA & (1 << ADSC))							//waits until the conversion is completed before it continues and saves the value.
    1232:	e6 e2       	ldi	r30, 0x26	; 38
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	88 2f       	mov	r24, r24
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	80 74       	andi	r24, 0x40	; 64
    123e:	90 70       	andi	r25, 0x00	; 0
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	b9 f7       	brne	.-18     	; 0x1232 <TakeCurrentSample+0x26>
		;
	int newCurrentSample= ADC;							//stores the current 'i' sample from the ADC
    1244:	e4 e2       	ldi	r30, 0x24	; 36
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
	return newCurrentSample;
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <FindMaxCurrentSample>:



int FindMaxCurrentSample(int *currentSampleArray)					//subroutine for finding the maximum value of the top of the 3 periods
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <FindMaxCurrentSample+0x6>
    1264:	00 d0       	rcall	.+0      	; 0x1266 <FindMaxCurrentSample+0x8>
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9d 83       	std	Y+5, r25	; 0x05
    126e:	8c 83       	std	Y+4, r24	; 0x04
	int imax = 0;								//this subroutine executes every 3 periods and clears the maximum every time
    1270:	1b 82       	std	Y+3, r1	; 0x03
    1272:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8_t k=0; k<74; k++)
    1274:	19 82       	std	Y+1, r1	; 0x01
    1276:	24 c0       	rjmp	.+72     	; 0x12c0 <FindMaxCurrentSample+0x62>
		if (imax < currentSampleArray[k])				//if current maximum is less than new maximum
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9c 01       	movw	r18, r24
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	9d 81       	ldd	r25, Y+5	; 0x05
    1288:	fc 01       	movw	r30, r24
    128a:	e2 0f       	add	r30, r18
    128c:	f3 1f       	adc	r31, r19
    128e:	20 81       	ld	r18, Z
    1290:	31 81       	ldd	r19, Z+1	; 0x01
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	9b 81       	ldd	r25, Y+3	; 0x03
    1296:	82 17       	cp	r24, r18
    1298:	93 07       	cpc	r25, r19
    129a:	7c f4       	brge	.+30     	; 0x12ba <FindMaxCurrentSample+0x5c>
			imax = currentSampleArray[k];				//save the new maximum sample
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	9c 01       	movw	r18, r24
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	9d 81       	ldd	r25, Y+5	; 0x05
    12ac:	fc 01       	movw	r30, r24
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	80 81       	ld	r24, Z
    12b4:	91 81       	ldd	r25, Z+1	; 0x01
    12b6:	9b 83       	std	Y+3, r25	; 0x03
    12b8:	8a 83       	std	Y+2, r24	; 0x02


int FindMaxCurrentSample(int *currentSampleArray)					//subroutine for finding the maximum value of the top of the 3 periods
{
	int imax = 0;								//this subroutine executes every 3 periods and clears the maximum every time
	for(uint8_t k=0; k<74; k++)
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	8f 5f       	subi	r24, 0xFF	; 255
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	8a 34       	cpi	r24, 0x4A	; 74
    12c4:	c8 f2       	brcs	.-78     	; 0x1278 <FindMaxCurrentSample+0x1a>
		if (imax < currentSampleArray[k])				//if current maximum is less than new maximum
			imax = currentSampleArray[k];				//save the new maximum sample
	return imax;
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
}//max finder function
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	cf 91       	pop	r28
    12d6:	df 91       	pop	r29
    12d8:	08 95       	ret

000012da <SetADCMUX200GainCurrent>:



void SetADCMUX200GainCurrent(void)
{
    12da:	df 93       	push	r29
    12dc:	cf 93       	push	r28
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;											//clear admux keeping REFS0 high
    12e2:	e7 e2       	ldi	r30, 0x27	; 39
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 e4       	ldi	r24, 0x40	; 64
    12e8:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0);	//setup ADMUX for x200 gain 01111
    12ea:	a7 e2       	ldi	r26, 0x27	; 39
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e7 e2       	ldi	r30, 0x27	; 39
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8f 60       	ori	r24, 0x0F	; 15
    12f6:	8c 93       	st	X, r24
}//end x200 ADC setup
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <SetADCMUX10GainCurrent>:



void SetADCMUX10GainCurrent(void)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;											//clear admux keeping REFS0 high
    1306:	e7 e2       	ldi	r30, 0x27	; 39
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 e4       	ldi	r24, 0x40	; 64
    130c:	80 83       	st	Z, r24
    ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX0);				//setup ADMUX for x10 gain 01101
    130e:	a7 e2       	ldi	r26, 0x27	; 39
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e7 e2       	ldi	r30, 0x27	; 39
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	8d 60       	ori	r24, 0x0D	; 13
    131a:	8c 93       	st	X, r24
}//end x10 ADC setup
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <SetADCMUX1GainCurrent>:


void SetADCMUX1GainCurrent(void)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;											//clear admux keeping REFS0 high
    132a:	e7 e2       	ldi	r30, 0x27	; 39
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 e4       	ldi	r24, 0x40	; 64
    1330:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX4) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);	//setup admux for x1 gain 11011
    1332:	a7 e2       	ldi	r26, 0x27	; 39
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	e7 e2       	ldi	r30, 0x27	; 39
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	80 81       	ld	r24, Z
    133c:	8b 61       	ori	r24, 0x1B	; 27
    133e:	8c 93       	st	X, r24
}//end x1 ADC setup
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <InitCurrentADC>:

void InitCurrentADC(uint8_t gain)				//subroutine for setting up ADC registers for current samples
{
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	0f 92       	push	r0
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	89 83       	std	Y+1, r24	; 0x01
	if(gain == 200)								//if gain is determined to be x200
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 3c       	cpi	r24, 0xC8	; 200
    1356:	19 f4       	brne	.+6      	; 0x135e <InitCurrentADC+0x18>
		SetADCMUX200GainCurrent();				//set up ADMUX for x200 changed to 10iadc
    1358:	0e 94 6d 09 	call	0x12da	; 0x12da <SetADCMUX200GainCurrent>
    135c:	0b c0       	rjmp	.+22     	; 0x1374 <InitCurrentADC+0x2e>
	else if (gain == 10)						//if gain is determined to be x10
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	8a 30       	cpi	r24, 0x0A	; 10
    1362:	19 f4       	brne	.+6      	; 0x136a <InitCurrentADC+0x24>
		SetADCMUX10GainCurrent();				//set up ADMUX for x10
    1364:	0e 94 7f 09 	call	0x12fe	; 0x12fe <SetADCMUX10GainCurrent>
    1368:	05 c0       	rjmp	.+10     	; 0x1374 <InitCurrentADC+0x2e>
	else if(gain == 1)							//if gain is determined to be x1
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	11 f4       	brne	.+4      	; 0x1374 <InitCurrentADC+0x2e>
		SetADCMUX1GainCurrent();				//set up gain to be x1
    1370:	0e 94 91 09 	call	0x1322	; 0x1322 <SetADCMUX1GainCurrent>

}//end current sampling ADC subroutine
    1374:	0f 90       	pop	r0
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <initVoltageADC>:
#include <avr/interrupt.h>
#include <stdlib.h>


void initVoltageADC(void)										//subroutine intializing ADC registers for voltage samples
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x00;
    1384:	e7 e2       	ldi	r30, 0x27	; 39
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	10 82       	st	Z, r1
	ADCSRA = 0x00;
    138a:	e6 e2       	ldi	r30, 0x26	; 38
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	10 82       	st	Z, r1

	ADMUX |= (1<<REFS0) | (1<<MUX4) | (1<<MUX3);				//setting up the admux for the "voltmeter" (AVCC reference w/ ext. cap. , ADCH most sig. bit , 1X Gain, diff. input for ADC0 input ADC2 ref.)
    1390:	a7 e2       	ldi	r26, 0x27	; 39
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e7 e2       	ldi	r30, 0x27	; 39
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	88 65       	ori	r24, 0x58	; 88
    139c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS0);	//initializing the ADC status register, ADEN - adc enable,also adjusting prescaler to 32
    139e:	a6 e2       	ldi	r26, 0x26	; 38
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e6 e2       	ldi	r30, 0x26	; 38
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8d 68       	ori	r24, 0x8D	; 141
    13aa:	8c 93       	st	X, r24
}//end ADC subroutine
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <ConvertVoltageSamplesToVolts>:


void ConvertVoltageSamplesToVolts(int *inputSample, float *lineVoltage)
{
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <ConvertVoltageSamplesToVolts+0xa>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <ConvertVoltageSamplesToVolts+0xc>
    13be:	0f 92       	push	r0
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	7d 83       	std	Y+5, r23	; 0x05
    13ca:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8_t k = 0 ; k<75; k++)
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	8c c0       	rjmp	.+280    	; 0x14e8 <ConvertVoltageSamplesToVolts+0x136>
	{	
		if (inputSample[k] > 512)			//if sample taken is greater than 512 bits, do 2's compliment and make it negative
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 01       	movw	r18, r24
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	9b 81       	ldd	r25, Y+3	; 0x03
    13e0:	fc 01       	movw	r30, r24
    13e2:	e2 0f       	add	r30, r18
    13e4:	f3 1f       	adc	r31, r19
    13e6:	80 81       	ld	r24, Z
    13e8:	91 81       	ldd	r25, Z+1	; 0x01
    13ea:	22 e0       	ldi	r18, 0x02	; 2
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	92 07       	cpc	r25, r18
    13f0:	dc f1       	brlt	.+118    	; 0x1468 <ConvertVoltageSamplesToVolts+0xb6>
		{
			inputSample[k] = (~((inputSample[k]) - 1)) & 0x03FF;		//2's compliment of voltage samples		
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	9c 01       	movw	r18, r24
    13fa:	22 0f       	add	r18, r18
    13fc:	33 1f       	adc	r19, r19
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	9b 81       	ldd	r25, Y+3	; 0x03
    1402:	dc 01       	movw	r26, r24
    1404:	a2 0f       	add	r26, r18
    1406:	b3 1f       	adc	r27, r19
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9c 01       	movw	r18, r24
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	fc 01       	movw	r30, r24
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
    1422:	90 95       	com	r25
    1424:	81 95       	neg	r24
    1426:	9f 4f       	sbci	r25, 0xFF	; 255
    1428:	93 70       	andi	r25, 0x03	; 3
    142a:	8d 93       	st	X+, r24
    142c:	9c 93       	st	X, r25
			inputSample[k] = -inputSample[k];
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	9c 01       	movw	r18, r24
    1436:	22 0f       	add	r18, r18
    1438:	33 1f       	adc	r19, r19
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	9b 81       	ldd	r25, Y+3	; 0x03
    143e:	dc 01       	movw	r26, r24
    1440:	a2 0f       	add	r26, r18
    1442:	b3 1f       	adc	r27, r19
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c 01       	movw	r18, r24
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	9b 81       	ldd	r25, Y+3	; 0x03
    1454:	fc 01       	movw	r30, r24
    1456:	e2 0f       	add	r30, r18
    1458:	f3 1f       	adc	r31, r19
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	90 95       	com	r25
    1460:	81 95       	neg	r24
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	8d 93       	st	X+, r24
    1466:	9c 93       	st	X, r25
		}

		lineVoltage[k] = 0.797*inputSample[k]-0.6369;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9c 01       	movw	r18, r24
    1470:	22 0f       	add	r18, r18
    1472:	33 1f       	adc	r19, r19
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	8c 01       	movw	r16, r24
    147e:	02 0f       	add	r16, r18
    1480:	13 1f       	adc	r17, r19
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 01       	movw	r18, r24
    148a:	22 0f       	add	r18, r18
    148c:	33 1f       	adc	r19, r19
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	fc 01       	movw	r30, r24
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	80 81       	ld	r24, Z
    149a:	91 81       	ldd	r25, Z+1	; 0x01
    149c:	aa 27       	eor	r26, r26
    149e:	97 fd       	sbrc	r25, 7
    14a0:	a0 95       	com	r26
    14a2:	ba 2f       	mov	r27, r26
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	bc 01       	movw	r22, r24
    14b2:	cd 01       	movw	r24, r26
    14b4:	21 e3       	ldi	r18, 0x31	; 49
    14b6:	38 e0       	ldi	r19, 0x08	; 8
    14b8:	4c e4       	ldi	r20, 0x4C	; 76
    14ba:	5f e3       	ldi	r21, 0x3F	; 63
    14bc:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	bc 01       	movw	r22, r24
    14c6:	cd 01       	movw	r24, r26
    14c8:	21 ee       	ldi	r18, 0xE1	; 225
    14ca:	3b e0       	ldi	r19, 0x0B	; 11
    14cc:	43 e2       	ldi	r20, 0x23	; 35
    14ce:	5f e3       	ldi	r21, 0x3F	; 63
    14d0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	f8 01       	movw	r30, r16
    14da:	80 83       	st	Z, r24
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	a2 83       	std	Z+2, r26	; 0x02
    14e0:	b3 83       	std	Z+3, r27	; 0x03
}//end ADC subroutine


void ConvertVoltageSamplesToVolts(int *inputSample, float *lineVoltage)
{
	for(uint8_t k = 0 ; k<75; k++)
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	8b 34       	cpi	r24, 0x4B	; 75
    14ec:	08 f4       	brcc	.+2      	; 0x14f0 <ConvertVoltageSamplesToVolts+0x13e>
    14ee:	70 cf       	rjmp	.-288    	; 0x13d0 <ConvertVoltageSamplesToVolts+0x1e>
		}

		lineVoltage[k] = 0.797*inputSample[k]-0.6369;
	}//for loop
	return;
}
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	08 95       	ret

00001504 <initCounter>:
#include <avr/interrupt.h>
#include <stdlib.h>


void initCounter(void)		// Setup for Timer Counter registers
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
	TCCR0 |= (1<<COM00)|(1<<CS00)|(1<<CS01);	//Normal Mode, Toggle OCO on Compare Match, Clk Prescaller 64
    150c:	a3 e5       	ldi	r26, 0x53	; 83
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e3 e5       	ldi	r30, 0x53	; 83
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	83 61       	ori	r24, 0x13	; 19
    1518:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE0);	//Enables Compare Match Interrupts
    151a:	a9 e5       	ldi	r26, 0x59	; 89
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e9 e5       	ldi	r30, 0x59	; 89
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	82 60       	ori	r24, 0x02	; 2
    1526:	8c 93       	st	X, r24
	TIMSK &= ~(1<<TOIE0);
    1528:	a9 e5       	ldi	r26, 0x59	; 89
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e9 e5       	ldi	r30, 0x59	; 89
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	8e 7f       	andi	r24, 0xFE	; 254
    1534:	8c 93       	st	X, r24
	OCR0 = 0b01010010;		// 82 gives 667us between periods 
    1536:	ec e5       	ldi	r30, 0x5C	; 92
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	82 e5       	ldi	r24, 0x52	; 82
    153c:	80 83       	st	Z, r24
}//end Timer counter subroutine
    153e:	cf 91       	pop	r28
    1540:	df 91       	pop	r29
    1542:	08 95       	ret

00001544 <floatToCharArray>:
#include <math.h>

void floatToCharArray(float newAverage, char* string){ 
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	68 97       	sbiw	r28, 0x18	; 24
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
    1560:	6b 8b       	std	Y+19, r22	; 0x13
    1562:	7c 8b       	std	Y+20, r23	; 0x14
    1564:	8d 8b       	std	Y+21, r24	; 0x15
    1566:	9e 8b       	std	Y+22, r25	; 0x16
    1568:	58 8f       	std	Y+24, r21	; 0x18
    156a:	4f 8b       	std	Y+23, r20	; 0x17

	int character[7] = {0};
    156c:	8e e0       	ldi	r24, 0x0E	; 14
    156e:	fe 01       	movw	r30, r28
    1570:	35 96       	adiw	r30, 0x05	; 5
    1572:	df 01       	movw	r26, r30
    1574:	28 2f       	mov	r18, r24
    1576:	1d 92       	st	X+, r1
    1578:	2a 95       	dec	r18
    157a:	e9 f7       	brne	.-6      	; 0x1576 <floatToCharArray+0x32>
	int e;
	e = log10(newAverage);
    157c:	8b 89       	ldd	r24, Y+19	; 0x13
    157e:	9c 89       	ldd	r25, Y+20	; 0x14
    1580:	ad 89       	ldd	r26, Y+21	; 0x15
    1582:	be 89       	ldd	r27, Y+22	; 0x16
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <log10>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	9c 83       	std	Y+4, r25	; 0x04
    159e:	8b 83       	std	Y+3, r24	; 0x03

	if(e == 3)	//is in the thousands
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	83 30       	cpi	r24, 0x03	; 3
    15a6:	91 05       	cpc	r25, r1
    15a8:	09 f0       	breq	.+2      	; 0x15ac <floatToCharArray+0x68>
    15aa:	33 c2       	rjmp	.+1126   	; 0x1a12 <floatToCharArray+0x4ce>
	{
		character[0] = newAverage/1000;
    15ac:	6b 89       	ldd	r22, Y+19	; 0x13
    15ae:	7c 89       	ldd	r23, Y+20	; 0x14
    15b0:	8d 89       	ldd	r24, Y+21	; 0x15
    15b2:	9e 89       	ldd	r25, Y+22	; 0x16
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	4a e7       	ldi	r20, 0x7A	; 122
    15ba:	54 e4       	ldi	r21, 0x44	; 68
    15bc:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
		character[1] = newAverage/100 - character[0]*10;
    15d4:	6b 89       	ldd	r22, Y+19	; 0x13
    15d6:	7c 89       	ldd	r23, Y+20	; 0x14
    15d8:	8d 89       	ldd	r24, Y+21	; 0x15
    15da:	9e 89       	ldd	r25, Y+22	; 0x16
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	48 ec       	ldi	r20, 0xC8	; 200
    15e2:	52 e4       	ldi	r21, 0x42	; 66
    15e4:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	7c 01       	movw	r14, r24
    15ee:	8d 01       	movw	r16, r26
    15f0:	8d 81       	ldd	r24, Y+5	; 0x05
    15f2:	9e 81       	ldd	r25, Y+6	; 0x06
    15f4:	9c 01       	movw	r18, r24
    15f6:	22 0f       	add	r18, r18
    15f8:	33 1f       	adc	r19, r19
    15fa:	c9 01       	movw	r24, r18
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	aa 27       	eor	r26, r26
    160a:	97 fd       	sbrc	r25, 7
    160c:	a0 95       	com	r26
    160e:	ba 2f       	mov	r27, r26
    1610:	bc 01       	movw	r22, r24
    1612:	cd 01       	movw	r24, r26
    1614:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1618:	9b 01       	movw	r18, r22
    161a:	ac 01       	movw	r20, r24
    161c:	c8 01       	movw	r24, r16
    161e:	b7 01       	movw	r22, r14
    1620:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	98 87       	std	Y+8, r25	; 0x08
    1636:	8f 83       	std	Y+7, r24	; 0x07
		character[2] = newAverage/10 - character[0]*100 - character[1]*10;
    1638:	6b 89       	ldd	r22, Y+19	; 0x13
    163a:	7c 89       	ldd	r23, Y+20	; 0x14
    163c:	8d 89       	ldd	r24, Y+21	; 0x15
    163e:	9e 89       	ldd	r25, Y+22	; 0x16
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	51 e4       	ldi	r21, 0x41	; 65
    1648:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	7c 01       	movw	r14, r24
    1652:	8d 01       	movw	r16, r26
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	84 e6       	ldi	r24, 0x64	; 100
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	ac 01       	movw	r20, r24
    165e:	24 9f       	mul	r18, r20
    1660:	c0 01       	movw	r24, r0
    1662:	25 9f       	mul	r18, r21
    1664:	90 0d       	add	r25, r0
    1666:	34 9f       	mul	r19, r20
    1668:	90 0d       	add	r25, r0
    166a:	11 24       	eor	r1, r1
    166c:	aa 27       	eor	r26, r26
    166e:	97 fd       	sbrc	r25, 7
    1670:	a0 95       	com	r26
    1672:	ba 2f       	mov	r27, r26
    1674:	bc 01       	movw	r22, r24
    1676:	cd 01       	movw	r24, r26
    1678:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    167c:	9b 01       	movw	r18, r22
    167e:	ac 01       	movw	r20, r24
    1680:	c8 01       	movw	r24, r16
    1682:	b7 01       	movw	r22, r14
    1684:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	7c 01       	movw	r14, r24
    168e:	8d 01       	movw	r16, r26
    1690:	8f 81       	ldd	r24, Y+7	; 0x07
    1692:	98 85       	ldd	r25, Y+8	; 0x08
    1694:	9c 01       	movw	r18, r24
    1696:	22 0f       	add	r18, r18
    1698:	33 1f       	adc	r19, r19
    169a:	c9 01       	movw	r24, r18
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	82 0f       	add	r24, r18
    16a6:	93 1f       	adc	r25, r19
    16a8:	aa 27       	eor	r26, r26
    16aa:	97 fd       	sbrc	r25, 7
    16ac:	a0 95       	com	r26
    16ae:	ba 2f       	mov	r27, r26
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    16b8:	9b 01       	movw	r18, r22
    16ba:	ac 01       	movw	r20, r24
    16bc:	c8 01       	movw	r24, r16
    16be:	b7 01       	movw	r22, r14
    16c0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	bc 01       	movw	r22, r24
    16ca:	cd 01       	movw	r24, r26
    16cc:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9a 87       	std	Y+10, r25	; 0x0a
    16d6:	89 87       	std	Y+9, r24	; 0x09
		character[3] = newAverage - character[0]*1000 - character[1]*100 - character[2]*10;
    16d8:	2d 81       	ldd	r18, Y+5	; 0x05
    16da:	3e 81       	ldd	r19, Y+6	; 0x06
    16dc:	88 ee       	ldi	r24, 0xE8	; 232
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	dc 01       	movw	r26, r24
    16e2:	2a 9f       	mul	r18, r26
    16e4:	c0 01       	movw	r24, r0
    16e6:	2b 9f       	mul	r18, r27
    16e8:	90 0d       	add	r25, r0
    16ea:	3a 9f       	mul	r19, r26
    16ec:	90 0d       	add	r25, r0
    16ee:	11 24       	eor	r1, r1
    16f0:	aa 27       	eor	r26, r26
    16f2:	97 fd       	sbrc	r25, 7
    16f4:	a0 95       	com	r26
    16f6:	ba 2f       	mov	r27, r26
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1700:	9b 01       	movw	r18, r22
    1702:	ac 01       	movw	r20, r24
    1704:	6b 89       	ldd	r22, Y+19	; 0x13
    1706:	7c 89       	ldd	r23, Y+20	; 0x14
    1708:	8d 89       	ldd	r24, Y+21	; 0x15
    170a:	9e 89       	ldd	r25, Y+22	; 0x16
    170c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	7c 01       	movw	r14, r24
    1716:	8d 01       	movw	r16, r26
    1718:	2f 81       	ldd	r18, Y+7	; 0x07
    171a:	38 85       	ldd	r19, Y+8	; 0x08
    171c:	84 e6       	ldi	r24, 0x64	; 100
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	ac 01       	movw	r20, r24
    1722:	24 9f       	mul	r18, r20
    1724:	c0 01       	movw	r24, r0
    1726:	25 9f       	mul	r18, r21
    1728:	90 0d       	add	r25, r0
    172a:	34 9f       	mul	r19, r20
    172c:	90 0d       	add	r25, r0
    172e:	11 24       	eor	r1, r1
    1730:	aa 27       	eor	r26, r26
    1732:	97 fd       	sbrc	r25, 7
    1734:	a0 95       	com	r26
    1736:	ba 2f       	mov	r27, r26
    1738:	bc 01       	movw	r22, r24
    173a:	cd 01       	movw	r24, r26
    173c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
    1744:	c8 01       	movw	r24, r16
    1746:	b7 01       	movw	r22, r14
    1748:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	7c 01       	movw	r14, r24
    1752:	8d 01       	movw	r16, r26
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	9c 01       	movw	r18, r24
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	c9 01       	movw	r24, r18
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	82 0f       	add	r24, r18
    176a:	93 1f       	adc	r25, r19
    176c:	aa 27       	eor	r26, r26
    176e:	97 fd       	sbrc	r25, 7
    1770:	a0 95       	com	r26
    1772:	ba 2f       	mov	r27, r26
    1774:	bc 01       	movw	r22, r24
    1776:	cd 01       	movw	r24, r26
    1778:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	c8 01       	movw	r24, r16
    1782:	b7 01       	movw	r22, r14
    1784:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	bc 01       	movw	r22, r24
    178e:	cd 01       	movw	r24, r26
    1790:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9c 87       	std	Y+12, r25	; 0x0c
    179a:	8b 87       	std	Y+11, r24	; 0x0b
		character[4] = -2;	//should be a decimal
    179c:	8e ef       	ldi	r24, 0xFE	; 254
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	9e 87       	std	Y+14, r25	; 0x0e
    17a2:	8d 87       	std	Y+13, r24	; 0x0d
		character[5] = newAverage*10 - character[0]*10000 - character[1]*1000 - character[2]*100 - character[3]*10;
    17a4:	6b 89       	ldd	r22, Y+19	; 0x13
    17a6:	7c 89       	ldd	r23, Y+20	; 0x14
    17a8:	8d 89       	ldd	r24, Y+21	; 0x15
    17aa:	9e 89       	ldd	r25, Y+22	; 0x16
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e2       	ldi	r20, 0x20	; 32
    17b2:	51 e4       	ldi	r21, 0x41	; 65
    17b4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	7c 01       	movw	r14, r24
    17be:	8d 01       	movw	r16, r26
    17c0:	2d 81       	ldd	r18, Y+5	; 0x05
    17c2:	3e 81       	ldd	r19, Y+6	; 0x06
    17c4:	80 e1       	ldi	r24, 0x10	; 16
    17c6:	97 e2       	ldi	r25, 0x27	; 39
    17c8:	dc 01       	movw	r26, r24
    17ca:	2a 9f       	mul	r18, r26
    17cc:	c0 01       	movw	r24, r0
    17ce:	2b 9f       	mul	r18, r27
    17d0:	90 0d       	add	r25, r0
    17d2:	3a 9f       	mul	r19, r26
    17d4:	90 0d       	add	r25, r0
    17d6:	11 24       	eor	r1, r1
    17d8:	aa 27       	eor	r26, r26
    17da:	97 fd       	sbrc	r25, 7
    17dc:	a0 95       	com	r26
    17de:	ba 2f       	mov	r27, r26
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
    17ec:	c8 01       	movw	r24, r16
    17ee:	b7 01       	movw	r22, r14
    17f0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	7c 01       	movw	r14, r24
    17fa:	8d 01       	movw	r16, r26
    17fc:	2f 81       	ldd	r18, Y+7	; 0x07
    17fe:	38 85       	ldd	r19, Y+8	; 0x08
    1800:	88 ee       	ldi	r24, 0xE8	; 232
    1802:	93 e0       	ldi	r25, 0x03	; 3
    1804:	ac 01       	movw	r20, r24
    1806:	24 9f       	mul	r18, r20
    1808:	c0 01       	movw	r24, r0
    180a:	25 9f       	mul	r18, r21
    180c:	90 0d       	add	r25, r0
    180e:	34 9f       	mul	r19, r20
    1810:	90 0d       	add	r25, r0
    1812:	11 24       	eor	r1, r1
    1814:	aa 27       	eor	r26, r26
    1816:	97 fd       	sbrc	r25, 7
    1818:	a0 95       	com	r26
    181a:	ba 2f       	mov	r27, r26
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1824:	9b 01       	movw	r18, r22
    1826:	ac 01       	movw	r20, r24
    1828:	c8 01       	movw	r24, r16
    182a:	b7 01       	movw	r22, r14
    182c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	7c 01       	movw	r14, r24
    1836:	8d 01       	movw	r16, r26
    1838:	29 85       	ldd	r18, Y+9	; 0x09
    183a:	3a 85       	ldd	r19, Y+10	; 0x0a
    183c:	84 e6       	ldi	r24, 0x64	; 100
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	dc 01       	movw	r26, r24
    1842:	2a 9f       	mul	r18, r26
    1844:	c0 01       	movw	r24, r0
    1846:	2b 9f       	mul	r18, r27
    1848:	90 0d       	add	r25, r0
    184a:	3a 9f       	mul	r19, r26
    184c:	90 0d       	add	r25, r0
    184e:	11 24       	eor	r1, r1
    1850:	aa 27       	eor	r26, r26
    1852:	97 fd       	sbrc	r25, 7
    1854:	a0 95       	com	r26
    1856:	ba 2f       	mov	r27, r26
    1858:	bc 01       	movw	r22, r24
    185a:	cd 01       	movw	r24, r26
    185c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1860:	9b 01       	movw	r18, r22
    1862:	ac 01       	movw	r20, r24
    1864:	c8 01       	movw	r24, r16
    1866:	b7 01       	movw	r22, r14
    1868:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	7c 01       	movw	r14, r24
    1872:	8d 01       	movw	r16, r26
    1874:	8b 85       	ldd	r24, Y+11	; 0x0b
    1876:	9c 85       	ldd	r25, Y+12	; 0x0c
    1878:	9c 01       	movw	r18, r24
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	c9 01       	movw	r24, r18
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	82 0f       	add	r24, r18
    188a:	93 1f       	adc	r25, r19
    188c:	aa 27       	eor	r26, r26
    188e:	97 fd       	sbrc	r25, 7
    1890:	a0 95       	com	r26
    1892:	ba 2f       	mov	r27, r26
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	c8 01       	movw	r24, r16
    18a2:	b7 01       	movw	r22, r14
    18a4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	bc 01       	movw	r22, r24
    18ae:	cd 01       	movw	r24, r26
    18b0:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	98 8b       	std	Y+16, r25	; 0x10
    18ba:	8f 87       	std	Y+15, r24	; 0x0f
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
    18bc:	6b 89       	ldd	r22, Y+19	; 0x13
    18be:	7c 89       	ldd	r23, Y+20	; 0x14
    18c0:	8d 89       	ldd	r24, Y+21	; 0x15
    18c2:	9e 89       	ldd	r25, Y+22	; 0x16
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	48 ec       	ldi	r20, 0xC8	; 200
    18ca:	52 e4       	ldi	r21, 0x42	; 66
    18cc:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	7c 01       	movw	r14, r24
    18d6:	8d 01       	movw	r16, r26
    18d8:	8d 81       	ldd	r24, Y+5	; 0x05
    18da:	9e 81       	ldd	r25, Y+6	; 0x06
    18dc:	aa 27       	eor	r26, r26
    18de:	97 fd       	sbrc	r25, 7
    18e0:	a0 95       	com	r26
    18e2:	ba 2f       	mov	r27, r26
    18e4:	20 ea       	ldi	r18, 0xA0	; 160
    18e6:	36 e8       	ldi	r19, 0x86	; 134
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
    18f0:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsi3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	bc 01       	movw	r22, r24
    18fa:	cd 01       	movw	r24, r26
    18fc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	c8 01       	movw	r24, r16
    1906:	b7 01       	movw	r22, r14
    1908:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	7c 01       	movw	r14, r24
    1912:	8d 01       	movw	r16, r26
    1914:	2f 81       	ldd	r18, Y+7	; 0x07
    1916:	38 85       	ldd	r19, Y+8	; 0x08
    1918:	80 e1       	ldi	r24, 0x10	; 16
    191a:	97 e2       	ldi	r25, 0x27	; 39
    191c:	ac 01       	movw	r20, r24
    191e:	24 9f       	mul	r18, r20
    1920:	c0 01       	movw	r24, r0
    1922:	25 9f       	mul	r18, r21
    1924:	90 0d       	add	r25, r0
    1926:	34 9f       	mul	r19, r20
    1928:	90 0d       	add	r25, r0
    192a:	11 24       	eor	r1, r1
    192c:	aa 27       	eor	r26, r26
    192e:	97 fd       	sbrc	r25, 7
    1930:	a0 95       	com	r26
    1932:	ba 2f       	mov	r27, r26
    1934:	bc 01       	movw	r22, r24
    1936:	cd 01       	movw	r24, r26
    1938:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    193c:	9b 01       	movw	r18, r22
    193e:	ac 01       	movw	r20, r24
    1940:	c8 01       	movw	r24, r16
    1942:	b7 01       	movw	r22, r14
    1944:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	7c 01       	movw	r14, r24
    194e:	8d 01       	movw	r16, r26
    1950:	29 85       	ldd	r18, Y+9	; 0x09
    1952:	3a 85       	ldd	r19, Y+10	; 0x0a
    1954:	88 ee       	ldi	r24, 0xE8	; 232
    1956:	93 e0       	ldi	r25, 0x03	; 3
    1958:	dc 01       	movw	r26, r24
    195a:	2a 9f       	mul	r18, r26
    195c:	c0 01       	movw	r24, r0
    195e:	2b 9f       	mul	r18, r27
    1960:	90 0d       	add	r25, r0
    1962:	3a 9f       	mul	r19, r26
    1964:	90 0d       	add	r25, r0
    1966:	11 24       	eor	r1, r1
    1968:	aa 27       	eor	r26, r26
    196a:	97 fd       	sbrc	r25, 7
    196c:	a0 95       	com	r26
    196e:	ba 2f       	mov	r27, r26
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1978:	9b 01       	movw	r18, r22
    197a:	ac 01       	movw	r20, r24
    197c:	c8 01       	movw	r24, r16
    197e:	b7 01       	movw	r22, r14
    1980:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	7c 01       	movw	r14, r24
    198a:	8d 01       	movw	r16, r26
    198c:	2b 85       	ldd	r18, Y+11	; 0x0b
    198e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1990:	84 e6       	ldi	r24, 0x64	; 100
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	ac 01       	movw	r20, r24
    1996:	24 9f       	mul	r18, r20
    1998:	c0 01       	movw	r24, r0
    199a:	25 9f       	mul	r18, r21
    199c:	90 0d       	add	r25, r0
    199e:	34 9f       	mul	r19, r20
    19a0:	90 0d       	add	r25, r0
    19a2:	11 24       	eor	r1, r1
    19a4:	aa 27       	eor	r26, r26
    19a6:	97 fd       	sbrc	r25, 7
    19a8:	a0 95       	com	r26
    19aa:	ba 2f       	mov	r27, r26
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    19b4:	9b 01       	movw	r18, r22
    19b6:	ac 01       	movw	r20, r24
    19b8:	c8 01       	movw	r24, r16
    19ba:	b7 01       	movw	r22, r14
    19bc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	7c 01       	movw	r14, r24
    19c6:	8d 01       	movw	r16, r26
    19c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ca:	98 89       	ldd	r25, Y+16	; 0x10
    19cc:	9c 01       	movw	r18, r24
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	c9 01       	movw	r24, r18
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	82 0f       	add	r24, r18
    19de:	93 1f       	adc	r25, r19
    19e0:	aa 27       	eor	r26, r26
    19e2:	97 fd       	sbrc	r25, 7
    19e4:	a0 95       	com	r26
    19e6:	ba 2f       	mov	r27, r26
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	c8 01       	movw	r24, r16
    19f6:	b7 01       	movw	r22, r14
    19f8:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	cf c7       	rjmp	.+3998   	; 0x29b0 <floatToCharArray+0x146c>
	}

	else if(e == 2)	//is in the thousands
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	9c 81       	ldd	r25, Y+4	; 0x04
    1a16:	82 30       	cpi	r24, 0x02	; 2
    1a18:	91 05       	cpc	r25, r1
    1a1a:	09 f0       	breq	.+2      	; 0x1a1e <floatToCharArray+0x4da>
    1a1c:	21 c2       	rjmp	.+1090   	; 0x1e60 <floatToCharArray+0x91c>
	{
		character[0] = 0;
    1a1e:	1e 82       	std	Y+6, r1	; 0x06
    1a20:	1d 82       	std	Y+5, r1	; 0x05
		character[1] = newAverage/100 - character[0]*10;
    1a22:	6b 89       	ldd	r22, Y+19	; 0x13
    1a24:	7c 89       	ldd	r23, Y+20	; 0x14
    1a26:	8d 89       	ldd	r24, Y+21	; 0x15
    1a28:	9e 89       	ldd	r25, Y+22	; 0x16
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	48 ec       	ldi	r20, 0xC8	; 200
    1a30:	52 e4       	ldi	r21, 0x42	; 66
    1a32:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	7c 01       	movw	r14, r24
    1a3c:	8d 01       	movw	r16, r26
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	9c 01       	movw	r18, r24
    1a44:	22 0f       	add	r18, r18
    1a46:	33 1f       	adc	r19, r19
    1a48:	c9 01       	movw	r24, r18
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	82 0f       	add	r24, r18
    1a54:	93 1f       	adc	r25, r19
    1a56:	aa 27       	eor	r26, r26
    1a58:	97 fd       	sbrc	r25, 7
    1a5a:	a0 95       	com	r26
    1a5c:	ba 2f       	mov	r27, r26
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1a66:	9b 01       	movw	r18, r22
    1a68:	ac 01       	movw	r20, r24
    1a6a:	c8 01       	movw	r24, r16
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	98 87       	std	Y+8, r25	; 0x08
    1a84:	8f 83       	std	Y+7, r24	; 0x07
		character[2] = newAverage/10 - character[0]*100 - character[1]*10;
    1a86:	6b 89       	ldd	r22, Y+19	; 0x13
    1a88:	7c 89       	ldd	r23, Y+20	; 0x14
    1a8a:	8d 89       	ldd	r24, Y+21	; 0x15
    1a8c:	9e 89       	ldd	r25, Y+22	; 0x16
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	40 e2       	ldi	r20, 0x20	; 32
    1a94:	51 e4       	ldi	r21, 0x41	; 65
    1a96:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	7c 01       	movw	r14, r24
    1aa0:	8d 01       	movw	r16, r26
    1aa2:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa4:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa6:	84 e6       	ldi	r24, 0x64	; 100
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	dc 01       	movw	r26, r24
    1aac:	2a 9f       	mul	r18, r26
    1aae:	c0 01       	movw	r24, r0
    1ab0:	2b 9f       	mul	r18, r27
    1ab2:	90 0d       	add	r25, r0
    1ab4:	3a 9f       	mul	r19, r26
    1ab6:	90 0d       	add	r25, r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	aa 27       	eor	r26, r26
    1abc:	97 fd       	sbrc	r25, 7
    1abe:	a0 95       	com	r26
    1ac0:	ba 2f       	mov	r27, r26
    1ac2:	bc 01       	movw	r22, r24
    1ac4:	cd 01       	movw	r24, r26
    1ac6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1aca:	9b 01       	movw	r18, r22
    1acc:	ac 01       	movw	r20, r24
    1ace:	c8 01       	movw	r24, r16
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	7c 01       	movw	r14, r24
    1adc:	8d 01       	movw	r16, r26
    1ade:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae0:	98 85       	ldd	r25, Y+8	; 0x08
    1ae2:	9c 01       	movw	r18, r24
    1ae4:	22 0f       	add	r18, r18
    1ae6:	33 1f       	adc	r19, r19
    1ae8:	c9 01       	movw	r24, r18
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	aa 27       	eor	r26, r26
    1af8:	97 fd       	sbrc	r25, 7
    1afa:	a0 95       	com	r26
    1afc:	ba 2f       	mov	r27, r26
    1afe:	bc 01       	movw	r22, r24
    1b00:	cd 01       	movw	r24, r26
    1b02:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1b06:	9b 01       	movw	r18, r22
    1b08:	ac 01       	movw	r20, r24
    1b0a:	c8 01       	movw	r24, r16
    1b0c:	b7 01       	movw	r22, r14
    1b0e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9a 87       	std	Y+10, r25	; 0x0a
    1b24:	89 87       	std	Y+9, r24	; 0x09
		character[3] = newAverage - character[0]*1000 - character[1]*100 - character[2]*10;
    1b26:	2d 81       	ldd	r18, Y+5	; 0x05
    1b28:	3e 81       	ldd	r19, Y+6	; 0x06
    1b2a:	88 ee       	ldi	r24, 0xE8	; 232
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	ac 01       	movw	r20, r24
    1b30:	24 9f       	mul	r18, r20
    1b32:	c0 01       	movw	r24, r0
    1b34:	25 9f       	mul	r18, r21
    1b36:	90 0d       	add	r25, r0
    1b38:	34 9f       	mul	r19, r20
    1b3a:	90 0d       	add	r25, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	aa 27       	eor	r26, r26
    1b40:	97 fd       	sbrc	r25, 7
    1b42:	a0 95       	com	r26
    1b44:	ba 2f       	mov	r27, r26
    1b46:	bc 01       	movw	r22, r24
    1b48:	cd 01       	movw	r24, r26
    1b4a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1b4e:	9b 01       	movw	r18, r22
    1b50:	ac 01       	movw	r20, r24
    1b52:	6b 89       	ldd	r22, Y+19	; 0x13
    1b54:	7c 89       	ldd	r23, Y+20	; 0x14
    1b56:	8d 89       	ldd	r24, Y+21	; 0x15
    1b58:	9e 89       	ldd	r25, Y+22	; 0x16
    1b5a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	7c 01       	movw	r14, r24
    1b64:	8d 01       	movw	r16, r26
    1b66:	2f 81       	ldd	r18, Y+7	; 0x07
    1b68:	38 85       	ldd	r19, Y+8	; 0x08
    1b6a:	84 e6       	ldi	r24, 0x64	; 100
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	dc 01       	movw	r26, r24
    1b70:	2a 9f       	mul	r18, r26
    1b72:	c0 01       	movw	r24, r0
    1b74:	2b 9f       	mul	r18, r27
    1b76:	90 0d       	add	r25, r0
    1b78:	3a 9f       	mul	r19, r26
    1b7a:	90 0d       	add	r25, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	aa 27       	eor	r26, r26
    1b80:	97 fd       	sbrc	r25, 7
    1b82:	a0 95       	com	r26
    1b84:	ba 2f       	mov	r27, r26
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	c8 01       	movw	r24, r16
    1b94:	b7 01       	movw	r22, r14
    1b96:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	8d 01       	movw	r16, r26
    1ba2:	89 85       	ldd	r24, Y+9	; 0x09
    1ba4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	c9 01       	movw	r24, r18
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	88 0f       	add	r24, r24
    1bb4:	99 1f       	adc	r25, r25
    1bb6:	82 0f       	add	r24, r18
    1bb8:	93 1f       	adc	r25, r19
    1bba:	aa 27       	eor	r26, r26
    1bbc:	97 fd       	sbrc	r25, 7
    1bbe:	a0 95       	com	r26
    1bc0:	ba 2f       	mov	r27, r26
    1bc2:	bc 01       	movw	r22, r24
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9c 87       	std	Y+12, r25	; 0x0c
    1be8:	8b 87       	std	Y+11, r24	; 0x0b
		character[4] = -2;	//should be a decimal
    1bea:	8e ef       	ldi	r24, 0xFE	; 254
    1bec:	9f ef       	ldi	r25, 0xFF	; 255
    1bee:	9e 87       	std	Y+14, r25	; 0x0e
    1bf0:	8d 87       	std	Y+13, r24	; 0x0d
		character[5] = newAverage*10 - character[0]*10000 - character[1]*1000 - character[2]*100 - character[3]*10;
    1bf2:	6b 89       	ldd	r22, Y+19	; 0x13
    1bf4:	7c 89       	ldd	r23, Y+20	; 0x14
    1bf6:	8d 89       	ldd	r24, Y+21	; 0x15
    1bf8:	9e 89       	ldd	r25, Y+22	; 0x16
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e2       	ldi	r20, 0x20	; 32
    1c00:	51 e4       	ldi	r21, 0x41	; 65
    1c02:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	7c 01       	movw	r14, r24
    1c0c:	8d 01       	movw	r16, r26
    1c0e:	2d 81       	ldd	r18, Y+5	; 0x05
    1c10:	3e 81       	ldd	r19, Y+6	; 0x06
    1c12:	80 e1       	ldi	r24, 0x10	; 16
    1c14:	97 e2       	ldi	r25, 0x27	; 39
    1c16:	ac 01       	movw	r20, r24
    1c18:	24 9f       	mul	r18, r20
    1c1a:	c0 01       	movw	r24, r0
    1c1c:	25 9f       	mul	r18, r21
    1c1e:	90 0d       	add	r25, r0
    1c20:	34 9f       	mul	r19, r20
    1c22:	90 0d       	add	r25, r0
    1c24:	11 24       	eor	r1, r1
    1c26:	aa 27       	eor	r26, r26
    1c28:	97 fd       	sbrc	r25, 7
    1c2a:	a0 95       	com	r26
    1c2c:	ba 2f       	mov	r27, r26
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
    1c3a:	c8 01       	movw	r24, r16
    1c3c:	b7 01       	movw	r22, r14
    1c3e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	7c 01       	movw	r14, r24
    1c48:	8d 01       	movw	r16, r26
    1c4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c4c:	38 85       	ldd	r19, Y+8	; 0x08
    1c4e:	88 ee       	ldi	r24, 0xE8	; 232
    1c50:	93 e0       	ldi	r25, 0x03	; 3
    1c52:	dc 01       	movw	r26, r24
    1c54:	2a 9f       	mul	r18, r26
    1c56:	c0 01       	movw	r24, r0
    1c58:	2b 9f       	mul	r18, r27
    1c5a:	90 0d       	add	r25, r0
    1c5c:	3a 9f       	mul	r19, r26
    1c5e:	90 0d       	add	r25, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	aa 27       	eor	r26, r26
    1c64:	97 fd       	sbrc	r25, 7
    1c66:	a0 95       	com	r26
    1c68:	ba 2f       	mov	r27, r26
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1c72:	9b 01       	movw	r18, r22
    1c74:	ac 01       	movw	r20, r24
    1c76:	c8 01       	movw	r24, r16
    1c78:	b7 01       	movw	r22, r14
    1c7a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	7c 01       	movw	r14, r24
    1c84:	8d 01       	movw	r16, r26
    1c86:	29 85       	ldd	r18, Y+9	; 0x09
    1c88:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c8a:	84 e6       	ldi	r24, 0x64	; 100
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	ac 01       	movw	r20, r24
    1c90:	24 9f       	mul	r18, r20
    1c92:	c0 01       	movw	r24, r0
    1c94:	25 9f       	mul	r18, r21
    1c96:	90 0d       	add	r25, r0
    1c98:	34 9f       	mul	r19, r20
    1c9a:	90 0d       	add	r25, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	aa 27       	eor	r26, r26
    1ca0:	97 fd       	sbrc	r25, 7
    1ca2:	a0 95       	com	r26
    1ca4:	ba 2f       	mov	r27, r26
    1ca6:	bc 01       	movw	r22, r24
    1ca8:	cd 01       	movw	r24, r26
    1caa:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1cae:	9b 01       	movw	r18, r22
    1cb0:	ac 01       	movw	r20, r24
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	b7 01       	movw	r22, r14
    1cb6:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	7c 01       	movw	r14, r24
    1cc0:	8d 01       	movw	r16, r26
    1cc2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cc4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1cc6:	9c 01       	movw	r18, r24
    1cc8:	22 0f       	add	r18, r18
    1cca:	33 1f       	adc	r19, r19
    1ccc:	c9 01       	movw	r24, r18
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	82 0f       	add	r24, r18
    1cd8:	93 1f       	adc	r25, r19
    1cda:	aa 27       	eor	r26, r26
    1cdc:	97 fd       	sbrc	r25, 7
    1cde:	a0 95       	com	r26
    1ce0:	ba 2f       	mov	r27, r26
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	c8 01       	movw	r24, r16
    1cf0:	b7 01       	movw	r22, r14
    1cf2:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	98 8b       	std	Y+16, r25	; 0x10
    1d08:	8f 87       	std	Y+15, r24	; 0x0f
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
    1d0a:	6b 89       	ldd	r22, Y+19	; 0x13
    1d0c:	7c 89       	ldd	r23, Y+20	; 0x14
    1d0e:	8d 89       	ldd	r24, Y+21	; 0x15
    1d10:	9e 89       	ldd	r25, Y+22	; 0x16
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	48 ec       	ldi	r20, 0xC8	; 200
    1d18:	52 e4       	ldi	r21, 0x42	; 66
    1d1a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	7c 01       	movw	r14, r24
    1d24:	8d 01       	movw	r16, r26
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	aa 27       	eor	r26, r26
    1d2c:	97 fd       	sbrc	r25, 7
    1d2e:	a0 95       	com	r26
    1d30:	ba 2f       	mov	r27, r26
    1d32:	20 ea       	ldi	r18, 0xA0	; 160
    1d34:	36 e8       	ldi	r19, 0x86	; 134
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	bc 01       	movw	r22, r24
    1d3c:	cd 01       	movw	r24, r26
    1d3e:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsi3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1d4e:	9b 01       	movw	r18, r22
    1d50:	ac 01       	movw	r20, r24
    1d52:	c8 01       	movw	r24, r16
    1d54:	b7 01       	movw	r22, r14
    1d56:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	7c 01       	movw	r14, r24
    1d60:	8d 01       	movw	r16, r26
    1d62:	2f 81       	ldd	r18, Y+7	; 0x07
    1d64:	38 85       	ldd	r19, Y+8	; 0x08
    1d66:	80 e1       	ldi	r24, 0x10	; 16
    1d68:	97 e2       	ldi	r25, 0x27	; 39
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	2a 9f       	mul	r18, r26
    1d6e:	c0 01       	movw	r24, r0
    1d70:	2b 9f       	mul	r18, r27
    1d72:	90 0d       	add	r25, r0
    1d74:	3a 9f       	mul	r19, r26
    1d76:	90 0d       	add	r25, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	aa 27       	eor	r26, r26
    1d7c:	97 fd       	sbrc	r25, 7
    1d7e:	a0 95       	com	r26
    1d80:	ba 2f       	mov	r27, r26
    1d82:	bc 01       	movw	r22, r24
    1d84:	cd 01       	movw	r24, r26
    1d86:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	ac 01       	movw	r20, r24
    1d8e:	c8 01       	movw	r24, r16
    1d90:	b7 01       	movw	r22, r14
    1d92:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	7c 01       	movw	r14, r24
    1d9c:	8d 01       	movw	r16, r26
    1d9e:	29 85       	ldd	r18, Y+9	; 0x09
    1da0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1da2:	88 ee       	ldi	r24, 0xE8	; 232
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	ac 01       	movw	r20, r24
    1da8:	24 9f       	mul	r18, r20
    1daa:	c0 01       	movw	r24, r0
    1dac:	25 9f       	mul	r18, r21
    1dae:	90 0d       	add	r25, r0
    1db0:	34 9f       	mul	r19, r20
    1db2:	90 0d       	add	r25, r0
    1db4:	11 24       	eor	r1, r1
    1db6:	aa 27       	eor	r26, r26
    1db8:	97 fd       	sbrc	r25, 7
    1dba:	a0 95       	com	r26
    1dbc:	ba 2f       	mov	r27, r26
    1dbe:	bc 01       	movw	r22, r24
    1dc0:	cd 01       	movw	r24, r26
    1dc2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
    1dca:	c8 01       	movw	r24, r16
    1dcc:	b7 01       	movw	r22, r14
    1dce:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	7c 01       	movw	r14, r24
    1dd8:	8d 01       	movw	r16, r26
    1dda:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ddc:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dde:	84 e6       	ldi	r24, 0x64	; 100
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	dc 01       	movw	r26, r24
    1de4:	2a 9f       	mul	r18, r26
    1de6:	c0 01       	movw	r24, r0
    1de8:	2b 9f       	mul	r18, r27
    1dea:	90 0d       	add	r25, r0
    1dec:	3a 9f       	mul	r19, r26
    1dee:	90 0d       	add	r25, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	aa 27       	eor	r26, r26
    1df4:	97 fd       	sbrc	r25, 7
    1df6:	a0 95       	com	r26
    1df8:	ba 2f       	mov	r27, r26
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1e02:	9b 01       	movw	r18, r22
    1e04:	ac 01       	movw	r20, r24
    1e06:	c8 01       	movw	r24, r16
    1e08:	b7 01       	movw	r22, r14
    1e0a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	7c 01       	movw	r14, r24
    1e14:	8d 01       	movw	r16, r26
    1e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e18:	98 89       	ldd	r25, Y+16	; 0x10
    1e1a:	9c 01       	movw	r18, r24
    1e1c:	22 0f       	add	r18, r18
    1e1e:	33 1f       	adc	r19, r19
    1e20:	c9 01       	movw	r24, r18
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	82 0f       	add	r24, r18
    1e2c:	93 1f       	adc	r25, r19
    1e2e:	aa 27       	eor	r26, r26
    1e30:	97 fd       	sbrc	r25, 7
    1e32:	a0 95       	com	r26
    1e34:	ba 2f       	mov	r27, r26
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1e3e:	9b 01       	movw	r18, r22
    1e40:	ac 01       	movw	r20, r24
    1e42:	c8 01       	movw	r24, r16
    1e44:	b7 01       	movw	r22, r14
    1e46:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	bc 01       	movw	r22, r24
    1e50:	cd 01       	movw	r24, r26
    1e52:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9a 8b       	std	Y+18, r25	; 0x12
    1e5c:	89 8b       	std	Y+17, r24	; 0x11
    1e5e:	a8 c5       	rjmp	.+2896   	; 0x29b0 <floatToCharArray+0x146c>
	}

	else if(e == 1)	//is in the thousands
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <floatToCharArray+0x928>
    1e6a:	f1 c1       	rjmp	.+994    	; 0x224e <floatToCharArray+0xd0a>
	{
		character[0] = 0;
    1e6c:	1e 82       	std	Y+6, r1	; 0x06
    1e6e:	1d 82       	std	Y+5, r1	; 0x05
		character[1] = 0;
    1e70:	18 86       	std	Y+8, r1	; 0x08
    1e72:	1f 82       	std	Y+7, r1	; 0x07
		character[2] = newAverage/10 - character[0]*100 - character[1]*10;
    1e74:	6b 89       	ldd	r22, Y+19	; 0x13
    1e76:	7c 89       	ldd	r23, Y+20	; 0x14
    1e78:	8d 89       	ldd	r24, Y+21	; 0x15
    1e7a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 e2       	ldi	r20, 0x20	; 32
    1e82:	51 e4       	ldi	r21, 0x41	; 65
    1e84:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	7c 01       	movw	r14, r24
    1e8e:	8d 01       	movw	r16, r26
    1e90:	2d 81       	ldd	r18, Y+5	; 0x05
    1e92:	3e 81       	ldd	r19, Y+6	; 0x06
    1e94:	84 e6       	ldi	r24, 0x64	; 100
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	ac 01       	movw	r20, r24
    1e9a:	24 9f       	mul	r18, r20
    1e9c:	c0 01       	movw	r24, r0
    1e9e:	25 9f       	mul	r18, r21
    1ea0:	90 0d       	add	r25, r0
    1ea2:	34 9f       	mul	r19, r20
    1ea4:	90 0d       	add	r25, r0
    1ea6:	11 24       	eor	r1, r1
    1ea8:	aa 27       	eor	r26, r26
    1eaa:	97 fd       	sbrc	r25, 7
    1eac:	a0 95       	com	r26
    1eae:	ba 2f       	mov	r27, r26
    1eb0:	bc 01       	movw	r22, r24
    1eb2:	cd 01       	movw	r24, r26
    1eb4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1eb8:	9b 01       	movw	r18, r22
    1eba:	ac 01       	movw	r20, r24
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	b7 01       	movw	r22, r14
    1ec0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	7c 01       	movw	r14, r24
    1eca:	8d 01       	movw	r16, r26
    1ecc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ece:	98 85       	ldd	r25, Y+8	; 0x08
    1ed0:	9c 01       	movw	r18, r24
    1ed2:	22 0f       	add	r18, r18
    1ed4:	33 1f       	adc	r19, r19
    1ed6:	c9 01       	movw	r24, r18
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	82 0f       	add	r24, r18
    1ee2:	93 1f       	adc	r25, r19
    1ee4:	aa 27       	eor	r26, r26
    1ee6:	97 fd       	sbrc	r25, 7
    1ee8:	a0 95       	com	r26
    1eea:	ba 2f       	mov	r27, r26
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	c8 01       	movw	r24, r16
    1efa:	b7 01       	movw	r22, r14
    1efc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9a 87       	std	Y+10, r25	; 0x0a
    1f12:	89 87       	std	Y+9, r24	; 0x09
		character[3] = newAverage - character[0]*1000 - character[1]*100 - character[2]*10;
    1f14:	2d 81       	ldd	r18, Y+5	; 0x05
    1f16:	3e 81       	ldd	r19, Y+6	; 0x06
    1f18:	88 ee       	ldi	r24, 0xE8	; 232
    1f1a:	93 e0       	ldi	r25, 0x03	; 3
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	2a 9f       	mul	r18, r26
    1f20:	c0 01       	movw	r24, r0
    1f22:	2b 9f       	mul	r18, r27
    1f24:	90 0d       	add	r25, r0
    1f26:	3a 9f       	mul	r19, r26
    1f28:	90 0d       	add	r25, r0
    1f2a:	11 24       	eor	r1, r1
    1f2c:	aa 27       	eor	r26, r26
    1f2e:	97 fd       	sbrc	r25, 7
    1f30:	a0 95       	com	r26
    1f32:	ba 2f       	mov	r27, r26
    1f34:	bc 01       	movw	r22, r24
    1f36:	cd 01       	movw	r24, r26
    1f38:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	6b 89       	ldd	r22, Y+19	; 0x13
    1f42:	7c 89       	ldd	r23, Y+20	; 0x14
    1f44:	8d 89       	ldd	r24, Y+21	; 0x15
    1f46:	9e 89       	ldd	r25, Y+22	; 0x16
    1f48:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	7c 01       	movw	r14, r24
    1f52:	8d 01       	movw	r16, r26
    1f54:	2f 81       	ldd	r18, Y+7	; 0x07
    1f56:	38 85       	ldd	r19, Y+8	; 0x08
    1f58:	84 e6       	ldi	r24, 0x64	; 100
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	ac 01       	movw	r20, r24
    1f5e:	24 9f       	mul	r18, r20
    1f60:	c0 01       	movw	r24, r0
    1f62:	25 9f       	mul	r18, r21
    1f64:	90 0d       	add	r25, r0
    1f66:	34 9f       	mul	r19, r20
    1f68:	90 0d       	add	r25, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	aa 27       	eor	r26, r26
    1f6e:	97 fd       	sbrc	r25, 7
    1f70:	a0 95       	com	r26
    1f72:	ba 2f       	mov	r27, r26
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1f7c:	9b 01       	movw	r18, r22
    1f7e:	ac 01       	movw	r20, r24
    1f80:	c8 01       	movw	r24, r16
    1f82:	b7 01       	movw	r22, r14
    1f84:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	7c 01       	movw	r14, r24
    1f8e:	8d 01       	movw	r16, r26
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	9c 01       	movw	r18, r24
    1f96:	22 0f       	add	r18, r18
    1f98:	33 1f       	adc	r19, r19
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	82 0f       	add	r24, r18
    1fa6:	93 1f       	adc	r25, r19
    1fa8:	aa 27       	eor	r26, r26
    1faa:	97 fd       	sbrc	r25, 7
    1fac:	a0 95       	com	r26
    1fae:	ba 2f       	mov	r27, r26
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    1fb8:	9b 01       	movw	r18, r22
    1fba:	ac 01       	movw	r20, r24
    1fbc:	c8 01       	movw	r24, r16
    1fbe:	b7 01       	movw	r22, r14
    1fc0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	bc 01       	movw	r22, r24
    1fca:	cd 01       	movw	r24, r26
    1fcc:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9c 87       	std	Y+12, r25	; 0x0c
    1fd6:	8b 87       	std	Y+11, r24	; 0x0b
		character[4] = -2;	//should be a decimal
    1fd8:	8e ef       	ldi	r24, 0xFE	; 254
    1fda:	9f ef       	ldi	r25, 0xFF	; 255
    1fdc:	9e 87       	std	Y+14, r25	; 0x0e
    1fde:	8d 87       	std	Y+13, r24	; 0x0d
		character[5] = newAverage*10 - character[0]*10000 - character[1]*1000 - character[2]*100 - character[3]*10;
    1fe0:	6b 89       	ldd	r22, Y+19	; 0x13
    1fe2:	7c 89       	ldd	r23, Y+20	; 0x14
    1fe4:	8d 89       	ldd	r24, Y+21	; 0x15
    1fe6:	9e 89       	ldd	r25, Y+22	; 0x16
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e2       	ldi	r20, 0x20	; 32
    1fee:	51 e4       	ldi	r21, 0x41	; 65
    1ff0:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	7c 01       	movw	r14, r24
    1ffa:	8d 01       	movw	r16, r26
    1ffc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    2000:	80 e1       	ldi	r24, 0x10	; 16
    2002:	97 e2       	ldi	r25, 0x27	; 39
    2004:	dc 01       	movw	r26, r24
    2006:	2a 9f       	mul	r18, r26
    2008:	c0 01       	movw	r24, r0
    200a:	2b 9f       	mul	r18, r27
    200c:	90 0d       	add	r25, r0
    200e:	3a 9f       	mul	r19, r26
    2010:	90 0d       	add	r25, r0
    2012:	11 24       	eor	r1, r1
    2014:	aa 27       	eor	r26, r26
    2016:	97 fd       	sbrc	r25, 7
    2018:	a0 95       	com	r26
    201a:	ba 2f       	mov	r27, r26
    201c:	bc 01       	movw	r22, r24
    201e:	cd 01       	movw	r24, r26
    2020:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2024:	9b 01       	movw	r18, r22
    2026:	ac 01       	movw	r20, r24
    2028:	c8 01       	movw	r24, r16
    202a:	b7 01       	movw	r22, r14
    202c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	7c 01       	movw	r14, r24
    2036:	8d 01       	movw	r16, r26
    2038:	2f 81       	ldd	r18, Y+7	; 0x07
    203a:	38 85       	ldd	r19, Y+8	; 0x08
    203c:	88 ee       	ldi	r24, 0xE8	; 232
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	ac 01       	movw	r20, r24
    2042:	24 9f       	mul	r18, r20
    2044:	c0 01       	movw	r24, r0
    2046:	25 9f       	mul	r18, r21
    2048:	90 0d       	add	r25, r0
    204a:	34 9f       	mul	r19, r20
    204c:	90 0d       	add	r25, r0
    204e:	11 24       	eor	r1, r1
    2050:	aa 27       	eor	r26, r26
    2052:	97 fd       	sbrc	r25, 7
    2054:	a0 95       	com	r26
    2056:	ba 2f       	mov	r27, r26
    2058:	bc 01       	movw	r22, r24
    205a:	cd 01       	movw	r24, r26
    205c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	c8 01       	movw	r24, r16
    2066:	b7 01       	movw	r22, r14
    2068:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	7c 01       	movw	r14, r24
    2072:	8d 01       	movw	r16, r26
    2074:	29 85       	ldd	r18, Y+9	; 0x09
    2076:	3a 85       	ldd	r19, Y+10	; 0x0a
    2078:	84 e6       	ldi	r24, 0x64	; 100
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	dc 01       	movw	r26, r24
    207e:	2a 9f       	mul	r18, r26
    2080:	c0 01       	movw	r24, r0
    2082:	2b 9f       	mul	r18, r27
    2084:	90 0d       	add	r25, r0
    2086:	3a 9f       	mul	r19, r26
    2088:	90 0d       	add	r25, r0
    208a:	11 24       	eor	r1, r1
    208c:	aa 27       	eor	r26, r26
    208e:	97 fd       	sbrc	r25, 7
    2090:	a0 95       	com	r26
    2092:	ba 2f       	mov	r27, r26
    2094:	bc 01       	movw	r22, r24
    2096:	cd 01       	movw	r24, r26
    2098:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    209c:	9b 01       	movw	r18, r22
    209e:	ac 01       	movw	r20, r24
    20a0:	c8 01       	movw	r24, r16
    20a2:	b7 01       	movw	r22, r14
    20a4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	7c 01       	movw	r14, r24
    20ae:	8d 01       	movw	r16, r26
    20b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    20b4:	9c 01       	movw	r18, r24
    20b6:	22 0f       	add	r18, r18
    20b8:	33 1f       	adc	r19, r19
    20ba:	c9 01       	movw	r24, r18
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	82 0f       	add	r24, r18
    20c6:	93 1f       	adc	r25, r19
    20c8:	aa 27       	eor	r26, r26
    20ca:	97 fd       	sbrc	r25, 7
    20cc:	a0 95       	com	r26
    20ce:	ba 2f       	mov	r27, r26
    20d0:	bc 01       	movw	r22, r24
    20d2:	cd 01       	movw	r24, r26
    20d4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    20d8:	9b 01       	movw	r18, r22
    20da:	ac 01       	movw	r20, r24
    20dc:	c8 01       	movw	r24, r16
    20de:	b7 01       	movw	r22, r14
    20e0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	bc 01       	movw	r22, r24
    20ea:	cd 01       	movw	r24, r26
    20ec:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	98 8b       	std	Y+16, r25	; 0x10
    20f6:	8f 87       	std	Y+15, r24	; 0x0f
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
    20f8:	6b 89       	ldd	r22, Y+19	; 0x13
    20fa:	7c 89       	ldd	r23, Y+20	; 0x14
    20fc:	8d 89       	ldd	r24, Y+21	; 0x15
    20fe:	9e 89       	ldd	r25, Y+22	; 0x16
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	48 ec       	ldi	r20, 0xC8	; 200
    2106:	52 e4       	ldi	r21, 0x42	; 66
    2108:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	7c 01       	movw	r14, r24
    2112:	8d 01       	movw	r16, r26
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	aa 27       	eor	r26, r26
    211a:	97 fd       	sbrc	r25, 7
    211c:	a0 95       	com	r26
    211e:	ba 2f       	mov	r27, r26
    2120:	20 ea       	ldi	r18, 0xA0	; 160
    2122:	36 e8       	ldi	r19, 0x86	; 134
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsi3>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	bc 01       	movw	r22, r24
    2136:	cd 01       	movw	r24, r26
    2138:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    213c:	9b 01       	movw	r18, r22
    213e:	ac 01       	movw	r20, r24
    2140:	c8 01       	movw	r24, r16
    2142:	b7 01       	movw	r22, r14
    2144:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	7c 01       	movw	r14, r24
    214e:	8d 01       	movw	r16, r26
    2150:	2f 81       	ldd	r18, Y+7	; 0x07
    2152:	38 85       	ldd	r19, Y+8	; 0x08
    2154:	80 e1       	ldi	r24, 0x10	; 16
    2156:	97 e2       	ldi	r25, 0x27	; 39
    2158:	ac 01       	movw	r20, r24
    215a:	24 9f       	mul	r18, r20
    215c:	c0 01       	movw	r24, r0
    215e:	25 9f       	mul	r18, r21
    2160:	90 0d       	add	r25, r0
    2162:	34 9f       	mul	r19, r20
    2164:	90 0d       	add	r25, r0
    2166:	11 24       	eor	r1, r1
    2168:	aa 27       	eor	r26, r26
    216a:	97 fd       	sbrc	r25, 7
    216c:	a0 95       	com	r26
    216e:	ba 2f       	mov	r27, r26
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2178:	9b 01       	movw	r18, r22
    217a:	ac 01       	movw	r20, r24
    217c:	c8 01       	movw	r24, r16
    217e:	b7 01       	movw	r22, r14
    2180:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	7c 01       	movw	r14, r24
    218a:	8d 01       	movw	r16, r26
    218c:	29 85       	ldd	r18, Y+9	; 0x09
    218e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2190:	88 ee       	ldi	r24, 0xE8	; 232
    2192:	93 e0       	ldi	r25, 0x03	; 3
    2194:	dc 01       	movw	r26, r24
    2196:	2a 9f       	mul	r18, r26
    2198:	c0 01       	movw	r24, r0
    219a:	2b 9f       	mul	r18, r27
    219c:	90 0d       	add	r25, r0
    219e:	3a 9f       	mul	r19, r26
    21a0:	90 0d       	add	r25, r0
    21a2:	11 24       	eor	r1, r1
    21a4:	aa 27       	eor	r26, r26
    21a6:	97 fd       	sbrc	r25, 7
    21a8:	a0 95       	com	r26
    21aa:	ba 2f       	mov	r27, r26
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    21b4:	9b 01       	movw	r18, r22
    21b6:	ac 01       	movw	r20, r24
    21b8:	c8 01       	movw	r24, r16
    21ba:	b7 01       	movw	r22, r14
    21bc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	7c 01       	movw	r14, r24
    21c6:	8d 01       	movw	r16, r26
    21c8:	2b 85       	ldd	r18, Y+11	; 0x0b
    21ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    21cc:	84 e6       	ldi	r24, 0x64	; 100
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	ac 01       	movw	r20, r24
    21d2:	24 9f       	mul	r18, r20
    21d4:	c0 01       	movw	r24, r0
    21d6:	25 9f       	mul	r18, r21
    21d8:	90 0d       	add	r25, r0
    21da:	34 9f       	mul	r19, r20
    21dc:	90 0d       	add	r25, r0
    21de:	11 24       	eor	r1, r1
    21e0:	aa 27       	eor	r26, r26
    21e2:	97 fd       	sbrc	r25, 7
    21e4:	a0 95       	com	r26
    21e6:	ba 2f       	mov	r27, r26
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    21f0:	9b 01       	movw	r18, r22
    21f2:	ac 01       	movw	r20, r24
    21f4:	c8 01       	movw	r24, r16
    21f6:	b7 01       	movw	r22, r14
    21f8:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    21fc:	dc 01       	movw	r26, r24
    21fe:	cb 01       	movw	r24, r22
    2200:	7c 01       	movw	r14, r24
    2202:	8d 01       	movw	r16, r26
    2204:	8f 85       	ldd	r24, Y+15	; 0x0f
    2206:	98 89       	ldd	r25, Y+16	; 0x10
    2208:	9c 01       	movw	r18, r24
    220a:	22 0f       	add	r18, r18
    220c:	33 1f       	adc	r19, r19
    220e:	c9 01       	movw	r24, r18
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	88 0f       	add	r24, r24
    2216:	99 1f       	adc	r25, r25
    2218:	82 0f       	add	r24, r18
    221a:	93 1f       	adc	r25, r19
    221c:	aa 27       	eor	r26, r26
    221e:	97 fd       	sbrc	r25, 7
    2220:	a0 95       	com	r26
    2222:	ba 2f       	mov	r27, r26
    2224:	bc 01       	movw	r22, r24
    2226:	cd 01       	movw	r24, r26
    2228:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    222c:	9b 01       	movw	r18, r22
    222e:	ac 01       	movw	r20, r24
    2230:	c8 01       	movw	r24, r16
    2232:	b7 01       	movw	r22, r14
    2234:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	9a 8b       	std	Y+18, r25	; 0x12
    224a:	89 8b       	std	Y+17, r24	; 0x11
    224c:	b1 c3       	rjmp	.+1890   	; 0x29b0 <floatToCharArray+0x146c>
	}

	else if(e == 0)	//is in the thousands
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	09 f0       	breq	.+2      	; 0x2258 <floatToCharArray+0xd14>
    2256:	a3 c1       	rjmp	.+838    	; 0x259e <floatToCharArray+0x105a>
	{
		character[0] = 0;
    2258:	1e 82       	std	Y+6, r1	; 0x06
    225a:	1d 82       	std	Y+5, r1	; 0x05
		character[1] = 0;
    225c:	18 86       	std	Y+8, r1	; 0x08
    225e:	1f 82       	std	Y+7, r1	; 0x07
		character[2] = 0;
    2260:	1a 86       	std	Y+10, r1	; 0x0a
    2262:	19 86       	std	Y+9, r1	; 0x09
		character[3] = newAverage - character[0]*1000 - character[1]*100 - character[2]*10;
    2264:	2d 81       	ldd	r18, Y+5	; 0x05
    2266:	3e 81       	ldd	r19, Y+6	; 0x06
    2268:	88 ee       	ldi	r24, 0xE8	; 232
    226a:	93 e0       	ldi	r25, 0x03	; 3
    226c:	dc 01       	movw	r26, r24
    226e:	2a 9f       	mul	r18, r26
    2270:	c0 01       	movw	r24, r0
    2272:	2b 9f       	mul	r18, r27
    2274:	90 0d       	add	r25, r0
    2276:	3a 9f       	mul	r19, r26
    2278:	90 0d       	add	r25, r0
    227a:	11 24       	eor	r1, r1
    227c:	aa 27       	eor	r26, r26
    227e:	97 fd       	sbrc	r25, 7
    2280:	a0 95       	com	r26
    2282:	ba 2f       	mov	r27, r26
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    228c:	9b 01       	movw	r18, r22
    228e:	ac 01       	movw	r20, r24
    2290:	6b 89       	ldd	r22, Y+19	; 0x13
    2292:	7c 89       	ldd	r23, Y+20	; 0x14
    2294:	8d 89       	ldd	r24, Y+21	; 0x15
    2296:	9e 89       	ldd	r25, Y+22	; 0x16
    2298:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	7c 01       	movw	r14, r24
    22a2:	8d 01       	movw	r16, r26
    22a4:	2f 81       	ldd	r18, Y+7	; 0x07
    22a6:	38 85       	ldd	r19, Y+8	; 0x08
    22a8:	84 e6       	ldi	r24, 0x64	; 100
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	ac 01       	movw	r20, r24
    22ae:	24 9f       	mul	r18, r20
    22b0:	c0 01       	movw	r24, r0
    22b2:	25 9f       	mul	r18, r21
    22b4:	90 0d       	add	r25, r0
    22b6:	34 9f       	mul	r19, r20
    22b8:	90 0d       	add	r25, r0
    22ba:	11 24       	eor	r1, r1
    22bc:	aa 27       	eor	r26, r26
    22be:	97 fd       	sbrc	r25, 7
    22c0:	a0 95       	com	r26
    22c2:	ba 2f       	mov	r27, r26
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    22cc:	9b 01       	movw	r18, r22
    22ce:	ac 01       	movw	r20, r24
    22d0:	c8 01       	movw	r24, r16
    22d2:	b7 01       	movw	r22, r14
    22d4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	7c 01       	movw	r14, r24
    22de:	8d 01       	movw	r16, r26
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	9c 01       	movw	r18, r24
    22e6:	22 0f       	add	r18, r18
    22e8:	33 1f       	adc	r19, r19
    22ea:	c9 01       	movw	r24, r18
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	88 0f       	add	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	82 0f       	add	r24, r18
    22f6:	93 1f       	adc	r25, r19
    22f8:	aa 27       	eor	r26, r26
    22fa:	97 fd       	sbrc	r25, 7
    22fc:	a0 95       	com	r26
    22fe:	ba 2f       	mov	r27, r26
    2300:	bc 01       	movw	r22, r24
    2302:	cd 01       	movw	r24, r26
    2304:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2308:	9b 01       	movw	r18, r22
    230a:	ac 01       	movw	r20, r24
    230c:	c8 01       	movw	r24, r16
    230e:	b7 01       	movw	r22, r14
    2310:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9c 87       	std	Y+12, r25	; 0x0c
    2326:	8b 87       	std	Y+11, r24	; 0x0b
		character[4] = -2;	//should be a decimal
    2328:	8e ef       	ldi	r24, 0xFE	; 254
    232a:	9f ef       	ldi	r25, 0xFF	; 255
    232c:	9e 87       	std	Y+14, r25	; 0x0e
    232e:	8d 87       	std	Y+13, r24	; 0x0d
		character[5] = newAverage*10 - character[0]*10000 - character[1]*1000 - character[2]*100 - character[3]*10;
    2330:	6b 89       	ldd	r22, Y+19	; 0x13
    2332:	7c 89       	ldd	r23, Y+20	; 0x14
    2334:	8d 89       	ldd	r24, Y+21	; 0x15
    2336:	9e 89       	ldd	r25, Y+22	; 0x16
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	7c 01       	movw	r14, r24
    234a:	8d 01       	movw	r16, r26
    234c:	2d 81       	ldd	r18, Y+5	; 0x05
    234e:	3e 81       	ldd	r19, Y+6	; 0x06
    2350:	80 e1       	ldi	r24, 0x10	; 16
    2352:	97 e2       	ldi	r25, 0x27	; 39
    2354:	dc 01       	movw	r26, r24
    2356:	2a 9f       	mul	r18, r26
    2358:	c0 01       	movw	r24, r0
    235a:	2b 9f       	mul	r18, r27
    235c:	90 0d       	add	r25, r0
    235e:	3a 9f       	mul	r19, r26
    2360:	90 0d       	add	r25, r0
    2362:	11 24       	eor	r1, r1
    2364:	aa 27       	eor	r26, r26
    2366:	97 fd       	sbrc	r25, 7
    2368:	a0 95       	com	r26
    236a:	ba 2f       	mov	r27, r26
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2374:	9b 01       	movw	r18, r22
    2376:	ac 01       	movw	r20, r24
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	7c 01       	movw	r14, r24
    2386:	8d 01       	movw	r16, r26
    2388:	2f 81       	ldd	r18, Y+7	; 0x07
    238a:	38 85       	ldd	r19, Y+8	; 0x08
    238c:	88 ee       	ldi	r24, 0xE8	; 232
    238e:	93 e0       	ldi	r25, 0x03	; 3
    2390:	ac 01       	movw	r20, r24
    2392:	24 9f       	mul	r18, r20
    2394:	c0 01       	movw	r24, r0
    2396:	25 9f       	mul	r18, r21
    2398:	90 0d       	add	r25, r0
    239a:	34 9f       	mul	r19, r20
    239c:	90 0d       	add	r25, r0
    239e:	11 24       	eor	r1, r1
    23a0:	aa 27       	eor	r26, r26
    23a2:	97 fd       	sbrc	r25, 7
    23a4:	a0 95       	com	r26
    23a6:	ba 2f       	mov	r27, r26
    23a8:	bc 01       	movw	r22, r24
    23aa:	cd 01       	movw	r24, r26
    23ac:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    23b0:	9b 01       	movw	r18, r22
    23b2:	ac 01       	movw	r20, r24
    23b4:	c8 01       	movw	r24, r16
    23b6:	b7 01       	movw	r22, r14
    23b8:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	7c 01       	movw	r14, r24
    23c2:	8d 01       	movw	r16, r26
    23c4:	29 85       	ldd	r18, Y+9	; 0x09
    23c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    23c8:	84 e6       	ldi	r24, 0x64	; 100
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	dc 01       	movw	r26, r24
    23ce:	2a 9f       	mul	r18, r26
    23d0:	c0 01       	movw	r24, r0
    23d2:	2b 9f       	mul	r18, r27
    23d4:	90 0d       	add	r25, r0
    23d6:	3a 9f       	mul	r19, r26
    23d8:	90 0d       	add	r25, r0
    23da:	11 24       	eor	r1, r1
    23dc:	aa 27       	eor	r26, r26
    23de:	97 fd       	sbrc	r25, 7
    23e0:	a0 95       	com	r26
    23e2:	ba 2f       	mov	r27, r26
    23e4:	bc 01       	movw	r22, r24
    23e6:	cd 01       	movw	r24, r26
    23e8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    23ec:	9b 01       	movw	r18, r22
    23ee:	ac 01       	movw	r20, r24
    23f0:	c8 01       	movw	r24, r16
    23f2:	b7 01       	movw	r22, r14
    23f4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	7c 01       	movw	r14, r24
    23fe:	8d 01       	movw	r16, r26
    2400:	8b 85       	ldd	r24, Y+11	; 0x0b
    2402:	9c 85       	ldd	r25, Y+12	; 0x0c
    2404:	9c 01       	movw	r18, r24
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	c9 01       	movw	r24, r18
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	82 0f       	add	r24, r18
    2416:	93 1f       	adc	r25, r19
    2418:	aa 27       	eor	r26, r26
    241a:	97 fd       	sbrc	r25, 7
    241c:	a0 95       	com	r26
    241e:	ba 2f       	mov	r27, r26
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2428:	9b 01       	movw	r18, r22
    242a:	ac 01       	movw	r20, r24
    242c:	c8 01       	movw	r24, r16
    242e:	b7 01       	movw	r22, r14
    2430:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	98 8b       	std	Y+16, r25	; 0x10
    2446:	8f 87       	std	Y+15, r24	; 0x0f
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
    2448:	6b 89       	ldd	r22, Y+19	; 0x13
    244a:	7c 89       	ldd	r23, Y+20	; 0x14
    244c:	8d 89       	ldd	r24, Y+21	; 0x15
    244e:	9e 89       	ldd	r25, Y+22	; 0x16
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	48 ec       	ldi	r20, 0xC8	; 200
    2456:	52 e4       	ldi	r21, 0x42	; 66
    2458:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	7c 01       	movw	r14, r24
    2462:	8d 01       	movw	r16, r26
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	aa 27       	eor	r26, r26
    246a:	97 fd       	sbrc	r25, 7
    246c:	a0 95       	com	r26
    246e:	ba 2f       	mov	r27, r26
    2470:	20 ea       	ldi	r18, 0xA0	; 160
    2472:	36 e8       	ldi	r19, 0x86	; 134
    2474:	41 e0       	ldi	r20, 0x01	; 1
    2476:	50 e0       	ldi	r21, 0x00	; 0
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsi3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    248c:	9b 01       	movw	r18, r22
    248e:	ac 01       	movw	r20, r24
    2490:	c8 01       	movw	r24, r16
    2492:	b7 01       	movw	r22, r14
    2494:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	7c 01       	movw	r14, r24
    249e:	8d 01       	movw	r16, r26
    24a0:	2f 81       	ldd	r18, Y+7	; 0x07
    24a2:	38 85       	ldd	r19, Y+8	; 0x08
    24a4:	80 e1       	ldi	r24, 0x10	; 16
    24a6:	97 e2       	ldi	r25, 0x27	; 39
    24a8:	ac 01       	movw	r20, r24
    24aa:	24 9f       	mul	r18, r20
    24ac:	c0 01       	movw	r24, r0
    24ae:	25 9f       	mul	r18, r21
    24b0:	90 0d       	add	r25, r0
    24b2:	34 9f       	mul	r19, r20
    24b4:	90 0d       	add	r25, r0
    24b6:	11 24       	eor	r1, r1
    24b8:	aa 27       	eor	r26, r26
    24ba:	97 fd       	sbrc	r25, 7
    24bc:	a0 95       	com	r26
    24be:	ba 2f       	mov	r27, r26
    24c0:	bc 01       	movw	r22, r24
    24c2:	cd 01       	movw	r24, r26
    24c4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    24c8:	9b 01       	movw	r18, r22
    24ca:	ac 01       	movw	r20, r24
    24cc:	c8 01       	movw	r24, r16
    24ce:	b7 01       	movw	r22, r14
    24d0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	7c 01       	movw	r14, r24
    24da:	8d 01       	movw	r16, r26
    24dc:	29 85       	ldd	r18, Y+9	; 0x09
    24de:	3a 85       	ldd	r19, Y+10	; 0x0a
    24e0:	88 ee       	ldi	r24, 0xE8	; 232
    24e2:	93 e0       	ldi	r25, 0x03	; 3
    24e4:	dc 01       	movw	r26, r24
    24e6:	2a 9f       	mul	r18, r26
    24e8:	c0 01       	movw	r24, r0
    24ea:	2b 9f       	mul	r18, r27
    24ec:	90 0d       	add	r25, r0
    24ee:	3a 9f       	mul	r19, r26
    24f0:	90 0d       	add	r25, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	aa 27       	eor	r26, r26
    24f6:	97 fd       	sbrc	r25, 7
    24f8:	a0 95       	com	r26
    24fa:	ba 2f       	mov	r27, r26
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2504:	9b 01       	movw	r18, r22
    2506:	ac 01       	movw	r20, r24
    2508:	c8 01       	movw	r24, r16
    250a:	b7 01       	movw	r22, r14
    250c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	7c 01       	movw	r14, r24
    2516:	8d 01       	movw	r16, r26
    2518:	2b 85       	ldd	r18, Y+11	; 0x0b
    251a:	3c 85       	ldd	r19, Y+12	; 0x0c
    251c:	84 e6       	ldi	r24, 0x64	; 100
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	ac 01       	movw	r20, r24
    2522:	24 9f       	mul	r18, r20
    2524:	c0 01       	movw	r24, r0
    2526:	25 9f       	mul	r18, r21
    2528:	90 0d       	add	r25, r0
    252a:	34 9f       	mul	r19, r20
    252c:	90 0d       	add	r25, r0
    252e:	11 24       	eor	r1, r1
    2530:	aa 27       	eor	r26, r26
    2532:	97 fd       	sbrc	r25, 7
    2534:	a0 95       	com	r26
    2536:	ba 2f       	mov	r27, r26
    2538:	bc 01       	movw	r22, r24
    253a:	cd 01       	movw	r24, r26
    253c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2540:	9b 01       	movw	r18, r22
    2542:	ac 01       	movw	r20, r24
    2544:	c8 01       	movw	r24, r16
    2546:	b7 01       	movw	r22, r14
    2548:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	7c 01       	movw	r14, r24
    2552:	8d 01       	movw	r16, r26
    2554:	8f 85       	ldd	r24, Y+15	; 0x0f
    2556:	98 89       	ldd	r25, Y+16	; 0x10
    2558:	9c 01       	movw	r18, r24
    255a:	22 0f       	add	r18, r18
    255c:	33 1f       	adc	r19, r19
    255e:	c9 01       	movw	r24, r18
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	82 0f       	add	r24, r18
    256a:	93 1f       	adc	r25, r19
    256c:	aa 27       	eor	r26, r26
    256e:	97 fd       	sbrc	r25, 7
    2570:	a0 95       	com	r26
    2572:	ba 2f       	mov	r27, r26
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    257c:	9b 01       	movw	r18, r22
    257e:	ac 01       	movw	r20, r24
    2580:	c8 01       	movw	r24, r16
    2582:	b7 01       	movw	r22, r14
    2584:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	bc 01       	movw	r22, r24
    258e:	cd 01       	movw	r24, r26
    2590:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	9a 8b       	std	Y+18, r25	; 0x12
    259a:	89 8b       	std	Y+17, r24	; 0x11
    259c:	09 c2       	rjmp	.+1042   	; 0x29b0 <floatToCharArray+0x146c>
	}

	else if(e == -1)	//is in the thousands
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	5f ef       	ldi	r21, 0xFF	; 255
    25a4:	8f 3f       	cpi	r24, 0xFF	; 255
    25a6:	95 07       	cpc	r25, r21
    25a8:	09 f0       	breq	.+2      	; 0x25ac <floatToCharArray+0x1068>
    25aa:	43 c1       	rjmp	.+646    	; 0x2832 <floatToCharArray+0x12ee>
	{
		character[0] = 0;
    25ac:	1e 82       	std	Y+6, r1	; 0x06
    25ae:	1d 82       	std	Y+5, r1	; 0x05
		character[1] = 0;
    25b0:	18 86       	std	Y+8, r1	; 0x08
    25b2:	1f 82       	std	Y+7, r1	; 0x07
		character[2] = 0;
    25b4:	1a 86       	std	Y+10, r1	; 0x0a
    25b6:	19 86       	std	Y+9, r1	; 0x09
		character[3] = 0;
    25b8:	1c 86       	std	Y+12, r1	; 0x0c
    25ba:	1b 86       	std	Y+11, r1	; 0x0b
		character[4] = -2;	//should be a decimal
    25bc:	8e ef       	ldi	r24, 0xFE	; 254
    25be:	9f ef       	ldi	r25, 0xFF	; 255
    25c0:	9e 87       	std	Y+14, r25	; 0x0e
    25c2:	8d 87       	std	Y+13, r24	; 0x0d
		character[5] = newAverage*10 - character[0]*10000 - character[1]*1000 - character[2]*100 - character[3]*10;
    25c4:	6b 89       	ldd	r22, Y+19	; 0x13
    25c6:	7c 89       	ldd	r23, Y+20	; 0x14
    25c8:	8d 89       	ldd	r24, Y+21	; 0x15
    25ca:	9e 89       	ldd	r25, Y+22	; 0x16
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	40 e2       	ldi	r20, 0x20	; 32
    25d2:	51 e4       	ldi	r21, 0x41	; 65
    25d4:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	7c 01       	movw	r14, r24
    25de:	8d 01       	movw	r16, r26
    25e0:	2d 81       	ldd	r18, Y+5	; 0x05
    25e2:	3e 81       	ldd	r19, Y+6	; 0x06
    25e4:	80 e1       	ldi	r24, 0x10	; 16
    25e6:	97 e2       	ldi	r25, 0x27	; 39
    25e8:	dc 01       	movw	r26, r24
    25ea:	2a 9f       	mul	r18, r26
    25ec:	c0 01       	movw	r24, r0
    25ee:	2b 9f       	mul	r18, r27
    25f0:	90 0d       	add	r25, r0
    25f2:	3a 9f       	mul	r19, r26
    25f4:	90 0d       	add	r25, r0
    25f6:	11 24       	eor	r1, r1
    25f8:	aa 27       	eor	r26, r26
    25fa:	97 fd       	sbrc	r25, 7
    25fc:	a0 95       	com	r26
    25fe:	ba 2f       	mov	r27, r26
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2608:	9b 01       	movw	r18, r22
    260a:	ac 01       	movw	r20, r24
    260c:	c8 01       	movw	r24, r16
    260e:	b7 01       	movw	r22, r14
    2610:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	7c 01       	movw	r14, r24
    261a:	8d 01       	movw	r16, r26
    261c:	2f 81       	ldd	r18, Y+7	; 0x07
    261e:	38 85       	ldd	r19, Y+8	; 0x08
    2620:	88 ee       	ldi	r24, 0xE8	; 232
    2622:	93 e0       	ldi	r25, 0x03	; 3
    2624:	ac 01       	movw	r20, r24
    2626:	24 9f       	mul	r18, r20
    2628:	c0 01       	movw	r24, r0
    262a:	25 9f       	mul	r18, r21
    262c:	90 0d       	add	r25, r0
    262e:	34 9f       	mul	r19, r20
    2630:	90 0d       	add	r25, r0
    2632:	11 24       	eor	r1, r1
    2634:	aa 27       	eor	r26, r26
    2636:	97 fd       	sbrc	r25, 7
    2638:	a0 95       	com	r26
    263a:	ba 2f       	mov	r27, r26
    263c:	bc 01       	movw	r22, r24
    263e:	cd 01       	movw	r24, r26
    2640:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2644:	9b 01       	movw	r18, r22
    2646:	ac 01       	movw	r20, r24
    2648:	c8 01       	movw	r24, r16
    264a:	b7 01       	movw	r22, r14
    264c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	7c 01       	movw	r14, r24
    2656:	8d 01       	movw	r16, r26
    2658:	29 85       	ldd	r18, Y+9	; 0x09
    265a:	3a 85       	ldd	r19, Y+10	; 0x0a
    265c:	84 e6       	ldi	r24, 0x64	; 100
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	dc 01       	movw	r26, r24
    2662:	2a 9f       	mul	r18, r26
    2664:	c0 01       	movw	r24, r0
    2666:	2b 9f       	mul	r18, r27
    2668:	90 0d       	add	r25, r0
    266a:	3a 9f       	mul	r19, r26
    266c:	90 0d       	add	r25, r0
    266e:	11 24       	eor	r1, r1
    2670:	aa 27       	eor	r26, r26
    2672:	97 fd       	sbrc	r25, 7
    2674:	a0 95       	com	r26
    2676:	ba 2f       	mov	r27, r26
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2680:	9b 01       	movw	r18, r22
    2682:	ac 01       	movw	r20, r24
    2684:	c8 01       	movw	r24, r16
    2686:	b7 01       	movw	r22, r14
    2688:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	7c 01       	movw	r14, r24
    2692:	8d 01       	movw	r16, r26
    2694:	8b 85       	ldd	r24, Y+11	; 0x0b
    2696:	9c 85       	ldd	r25, Y+12	; 0x0c
    2698:	9c 01       	movw	r18, r24
    269a:	22 0f       	add	r18, r18
    269c:	33 1f       	adc	r19, r19
    269e:	c9 01       	movw	r24, r18
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	88 0f       	add	r24, r24
    26a6:	99 1f       	adc	r25, r25
    26a8:	82 0f       	add	r24, r18
    26aa:	93 1f       	adc	r25, r19
    26ac:	aa 27       	eor	r26, r26
    26ae:	97 fd       	sbrc	r25, 7
    26b0:	a0 95       	com	r26
    26b2:	ba 2f       	mov	r27, r26
    26b4:	bc 01       	movw	r22, r24
    26b6:	cd 01       	movw	r24, r26
    26b8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	c8 01       	movw	r24, r16
    26c2:	b7 01       	movw	r22, r14
    26c4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
    26dc:	6b 89       	ldd	r22, Y+19	; 0x13
    26de:	7c 89       	ldd	r23, Y+20	; 0x14
    26e0:	8d 89       	ldd	r24, Y+21	; 0x15
    26e2:	9e 89       	ldd	r25, Y+22	; 0x16
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	48 ec       	ldi	r20, 0xC8	; 200
    26ea:	52 e4       	ldi	r21, 0x42	; 66
    26ec:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	7c 01       	movw	r14, r24
    26f6:	8d 01       	movw	r16, r26
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	aa 27       	eor	r26, r26
    26fe:	97 fd       	sbrc	r25, 7
    2700:	a0 95       	com	r26
    2702:	ba 2f       	mov	r27, r26
    2704:	20 ea       	ldi	r18, 0xA0	; 160
    2706:	36 e8       	ldi	r19, 0x86	; 134
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	50 e0       	ldi	r21, 0x00	; 0
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsi3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2720:	9b 01       	movw	r18, r22
    2722:	ac 01       	movw	r20, r24
    2724:	c8 01       	movw	r24, r16
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    272c:	dc 01       	movw	r26, r24
    272e:	cb 01       	movw	r24, r22
    2730:	7c 01       	movw	r14, r24
    2732:	8d 01       	movw	r16, r26
    2734:	2f 81       	ldd	r18, Y+7	; 0x07
    2736:	38 85       	ldd	r19, Y+8	; 0x08
    2738:	80 e1       	ldi	r24, 0x10	; 16
    273a:	97 e2       	ldi	r25, 0x27	; 39
    273c:	ac 01       	movw	r20, r24
    273e:	24 9f       	mul	r18, r20
    2740:	c0 01       	movw	r24, r0
    2742:	25 9f       	mul	r18, r21
    2744:	90 0d       	add	r25, r0
    2746:	34 9f       	mul	r19, r20
    2748:	90 0d       	add	r25, r0
    274a:	11 24       	eor	r1, r1
    274c:	aa 27       	eor	r26, r26
    274e:	97 fd       	sbrc	r25, 7
    2750:	a0 95       	com	r26
    2752:	ba 2f       	mov	r27, r26
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    275c:	9b 01       	movw	r18, r22
    275e:	ac 01       	movw	r20, r24
    2760:	c8 01       	movw	r24, r16
    2762:	b7 01       	movw	r22, r14
    2764:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	7c 01       	movw	r14, r24
    276e:	8d 01       	movw	r16, r26
    2770:	29 85       	ldd	r18, Y+9	; 0x09
    2772:	3a 85       	ldd	r19, Y+10	; 0x0a
    2774:	88 ee       	ldi	r24, 0xE8	; 232
    2776:	93 e0       	ldi	r25, 0x03	; 3
    2778:	dc 01       	movw	r26, r24
    277a:	2a 9f       	mul	r18, r26
    277c:	c0 01       	movw	r24, r0
    277e:	2b 9f       	mul	r18, r27
    2780:	90 0d       	add	r25, r0
    2782:	3a 9f       	mul	r19, r26
    2784:	90 0d       	add	r25, r0
    2786:	11 24       	eor	r1, r1
    2788:	aa 27       	eor	r26, r26
    278a:	97 fd       	sbrc	r25, 7
    278c:	a0 95       	com	r26
    278e:	ba 2f       	mov	r27, r26
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2798:	9b 01       	movw	r18, r22
    279a:	ac 01       	movw	r20, r24
    279c:	c8 01       	movw	r24, r16
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	7c 01       	movw	r14, r24
    27aa:	8d 01       	movw	r16, r26
    27ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    27ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    27b0:	84 e6       	ldi	r24, 0x64	; 100
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	ac 01       	movw	r20, r24
    27b6:	24 9f       	mul	r18, r20
    27b8:	c0 01       	movw	r24, r0
    27ba:	25 9f       	mul	r18, r21
    27bc:	90 0d       	add	r25, r0
    27be:	34 9f       	mul	r19, r20
    27c0:	90 0d       	add	r25, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	aa 27       	eor	r26, r26
    27c6:	97 fd       	sbrc	r25, 7
    27c8:	a0 95       	com	r26
    27ca:	ba 2f       	mov	r27, r26
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    27d4:	9b 01       	movw	r18, r22
    27d6:	ac 01       	movw	r20, r24
    27d8:	c8 01       	movw	r24, r16
    27da:	b7 01       	movw	r22, r14
    27dc:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	7c 01       	movw	r14, r24
    27e6:	8d 01       	movw	r16, r26
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	98 89       	ldd	r25, Y+16	; 0x10
    27ec:	9c 01       	movw	r18, r24
    27ee:	22 0f       	add	r18, r18
    27f0:	33 1f       	adc	r19, r19
    27f2:	c9 01       	movw	r24, r18
    27f4:	88 0f       	add	r24, r24
    27f6:	99 1f       	adc	r25, r25
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	82 0f       	add	r24, r18
    27fe:	93 1f       	adc	r25, r19
    2800:	aa 27       	eor	r26, r26
    2802:	97 fd       	sbrc	r25, 7
    2804:	a0 95       	com	r26
    2806:	ba 2f       	mov	r27, r26
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2810:	9b 01       	movw	r18, r22
    2812:	ac 01       	movw	r20, r24
    2814:	c8 01       	movw	r24, r16
    2816:	b7 01       	movw	r22, r14
    2818:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	bc 01       	movw	r22, r24
    2822:	cd 01       	movw	r24, r26
    2824:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
    2830:	bf c0       	rjmp	.+382    	; 0x29b0 <floatToCharArray+0x146c>
	}

	else if(e == -2)	//is in the thousands
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	5f ef       	ldi	r21, 0xFF	; 255
    2838:	8e 3f       	cpi	r24, 0xFE	; 254
    283a:	95 07       	cpc	r25, r21
    283c:	09 f0       	breq	.+2      	; 0x2840 <floatToCharArray+0x12fc>
    283e:	b8 c0       	rjmp	.+368    	; 0x29b0 <floatToCharArray+0x146c>
	{
		character[0] = 0;
    2840:	1e 82       	std	Y+6, r1	; 0x06
    2842:	1d 82       	std	Y+5, r1	; 0x05
		character[1] = 0;
    2844:	18 86       	std	Y+8, r1	; 0x08
    2846:	1f 82       	std	Y+7, r1	; 0x07
		character[2] = 0;
    2848:	1a 86       	std	Y+10, r1	; 0x0a
    284a:	19 86       	std	Y+9, r1	; 0x09
		character[3] = 0;
    284c:	1c 86       	std	Y+12, r1	; 0x0c
    284e:	1b 86       	std	Y+11, r1	; 0x0b
		character[4] = -2;	//should be a decimal
    2850:	8e ef       	ldi	r24, 0xFE	; 254
    2852:	9f ef       	ldi	r25, 0xFF	; 255
    2854:	9e 87       	std	Y+14, r25	; 0x0e
    2856:	8d 87       	std	Y+13, r24	; 0x0d
		character[5] = 0;
    2858:	18 8a       	std	Y+16, r1	; 0x10
    285a:	1f 86       	std	Y+15, r1	; 0x0f
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
    285c:	6b 89       	ldd	r22, Y+19	; 0x13
    285e:	7c 89       	ldd	r23, Y+20	; 0x14
    2860:	8d 89       	ldd	r24, Y+21	; 0x15
    2862:	9e 89       	ldd	r25, Y+22	; 0x16
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	48 ec       	ldi	r20, 0xC8	; 200
    286a:	52 e4       	ldi	r21, 0x42	; 66
    286c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	7c 01       	movw	r14, r24
    2876:	8d 01       	movw	r16, r26
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	aa 27       	eor	r26, r26
    287e:	97 fd       	sbrc	r25, 7
    2880:	a0 95       	com	r26
    2882:	ba 2f       	mov	r27, r26
    2884:	20 ea       	ldi	r18, 0xA0	; 160
    2886:	36 e8       	ldi	r19, 0x86	; 134
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__mulsi3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	bc 01       	movw	r22, r24
    289a:	cd 01       	movw	r24, r26
    289c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	c8 01       	movw	r24, r16
    28a6:	b7 01       	movw	r22, r14
    28a8:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	7c 01       	movw	r14, r24
    28b2:	8d 01       	movw	r16, r26
    28b4:	2f 81       	ldd	r18, Y+7	; 0x07
    28b6:	38 85       	ldd	r19, Y+8	; 0x08
    28b8:	80 e1       	ldi	r24, 0x10	; 16
    28ba:	97 e2       	ldi	r25, 0x27	; 39
    28bc:	dc 01       	movw	r26, r24
    28be:	2a 9f       	mul	r18, r26
    28c0:	c0 01       	movw	r24, r0
    28c2:	2b 9f       	mul	r18, r27
    28c4:	90 0d       	add	r25, r0
    28c6:	3a 9f       	mul	r19, r26
    28c8:	90 0d       	add	r25, r0
    28ca:	11 24       	eor	r1, r1
    28cc:	aa 27       	eor	r26, r26
    28ce:	97 fd       	sbrc	r25, 7
    28d0:	a0 95       	com	r26
    28d2:	ba 2f       	mov	r27, r26
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    28dc:	9b 01       	movw	r18, r22
    28de:	ac 01       	movw	r20, r24
    28e0:	c8 01       	movw	r24, r16
    28e2:	b7 01       	movw	r22, r14
    28e4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	7c 01       	movw	r14, r24
    28ee:	8d 01       	movw	r16, r26
    28f0:	29 85       	ldd	r18, Y+9	; 0x09
    28f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    28f4:	88 ee       	ldi	r24, 0xE8	; 232
    28f6:	93 e0       	ldi	r25, 0x03	; 3
    28f8:	ac 01       	movw	r20, r24
    28fa:	24 9f       	mul	r18, r20
    28fc:	c0 01       	movw	r24, r0
    28fe:	25 9f       	mul	r18, r21
    2900:	90 0d       	add	r25, r0
    2902:	34 9f       	mul	r19, r20
    2904:	90 0d       	add	r25, r0
    2906:	11 24       	eor	r1, r1
    2908:	aa 27       	eor	r26, r26
    290a:	97 fd       	sbrc	r25, 7
    290c:	a0 95       	com	r26
    290e:	ba 2f       	mov	r27, r26
    2910:	bc 01       	movw	r22, r24
    2912:	cd 01       	movw	r24, r26
    2914:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2918:	9b 01       	movw	r18, r22
    291a:	ac 01       	movw	r20, r24
    291c:	c8 01       	movw	r24, r16
    291e:	b7 01       	movw	r22, r14
    2920:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	7c 01       	movw	r14, r24
    292a:	8d 01       	movw	r16, r26
    292c:	2b 85       	ldd	r18, Y+11	; 0x0b
    292e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2930:	84 e6       	ldi	r24, 0x64	; 100
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	dc 01       	movw	r26, r24
    2936:	2a 9f       	mul	r18, r26
    2938:	c0 01       	movw	r24, r0
    293a:	2b 9f       	mul	r18, r27
    293c:	90 0d       	add	r25, r0
    293e:	3a 9f       	mul	r19, r26
    2940:	90 0d       	add	r25, r0
    2942:	11 24       	eor	r1, r1
    2944:	aa 27       	eor	r26, r26
    2946:	97 fd       	sbrc	r25, 7
    2948:	a0 95       	com	r26
    294a:	ba 2f       	mov	r27, r26
    294c:	bc 01       	movw	r22, r24
    294e:	cd 01       	movw	r24, r26
    2950:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	c8 01       	movw	r24, r16
    295a:	b7 01       	movw	r22, r14
    295c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	7c 01       	movw	r14, r24
    2966:	8d 01       	movw	r16, r26
    2968:	8f 85       	ldd	r24, Y+15	; 0x0f
    296a:	98 89       	ldd	r25, Y+16	; 0x10
    296c:	9c 01       	movw	r18, r24
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
    2972:	c9 01       	movw	r24, r18
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	82 0f       	add	r24, r18
    297e:	93 1f       	adc	r25, r19
    2980:	aa 27       	eor	r26, r26
    2982:	97 fd       	sbrc	r25, 7
    2984:	a0 95       	com	r26
    2986:	ba 2f       	mov	r27, r26
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    2990:	9b 01       	movw	r18, r22
    2992:	ac 01       	movw	r20, r24
    2994:	c8 01       	movw	r24, r16
    2996:	b7 01       	movw	r22, r14
    2998:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__subsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9a 8b       	std	Y+18, r25	; 0x12
    29ae:	89 8b       	std	Y+17, r24	; 0x11
	}
	for(int k=0; k<7; k++)
    29b0:	1a 82       	std	Y+2, r1	; 0x02
    29b2:	19 82       	std	Y+1, r1	; 0x01
    29b4:	1b c0       	rjmp	.+54     	; 0x29ec <floatToCharArray+0x14a8>
	{
		string[k] = character[k]+48;
    29b6:	29 81       	ldd	r18, Y+1	; 0x01
    29b8:	3a 81       	ldd	r19, Y+2	; 0x02
    29ba:	8f 89       	ldd	r24, Y+23	; 0x17
    29bc:	98 8d       	ldd	r25, Y+24	; 0x18
    29be:	dc 01       	movw	r26, r24
    29c0:	a2 0f       	add	r26, r18
    29c2:	b3 1f       	adc	r27, r19
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	9a 81       	ldd	r25, Y+2	; 0x02
    29c8:	9c 01       	movw	r18, r24
    29ca:	22 0f       	add	r18, r18
    29cc:	33 1f       	adc	r19, r19
    29ce:	ce 01       	movw	r24, r28
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	82 0f       	add	r24, r18
    29d4:	93 1f       	adc	r25, r19
    29d6:	fc 01       	movw	r30, r24
    29d8:	34 96       	adiw	r30, 0x04	; 4
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	80 5d       	subi	r24, 0xD0	; 208
    29e0:	8c 93       	st	X, r24
		character[3] = 0;
		character[4] = -2;	//should be a decimal
		character[5] = 0;
		character[6] = newAverage*100 - character[0]*100000 - character[1]*10000 - character[2]*1000 - character[3]*100 - character[5]*10;
	}
	for(int k=0; k<7; k++)
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	9a 81       	ldd	r25, Y+2	; 0x02
    29e6:	01 96       	adiw	r24, 0x01	; 1
    29e8:	9a 83       	std	Y+2, r25	; 0x02
    29ea:	89 83       	std	Y+1, r24	; 0x01
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	9a 81       	ldd	r25, Y+2	; 0x02
    29f0:	87 30       	cpi	r24, 0x07	; 7
    29f2:	91 05       	cpc	r25, r1
    29f4:	04 f3       	brlt	.-64     	; 0x29b6 <floatToCharArray+0x1472>
	{
		string[k] = character[k]+48;
	}
}
    29f6:	68 96       	adiw	r28, 0x18	; 24
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	08 95       	ret

00002a10 <USART_init>:
#define _RELAY 'R'//relay packet ID
#define _DATA 'D'//Data Packet ID
#define _ThisOutlet '2'	//outlet1
#define _RequestChar 'Q'	//request

void USART_init( unsigned int baud ){
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <USART_init+0x6>
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    2a1e:	e0 e4       	ldi	r30, 0x40	; 64
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	9a 81       	ldd	r25, Y+2	; 0x02
    2a26:	89 2f       	mov	r24, r25
    2a28:	99 27       	eor	r25, r25
    2a2a:	80 83       	st	Z, r24
	UBRRL = (unsigned char)baud;
    2a2c:	e9 e2       	ldi	r30, 0x29	; 41
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	89 81       	ldd	r24, Y+1	; 0x01
    2a32:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    2a34:	ea e2       	ldi	r30, 0x2A	; 42
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	88 e1       	ldi	r24, 0x18	; 24
    2a3a:	80 83       	st	Z, r24
	/* Set frame format: 8data,  1 stop bit */
	UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
    2a3c:	e0 e4       	ldi	r30, 0x40	; 64
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	86 e8       	ldi	r24, 0x86	; 134
    2a42:	80 83       	st	Z, r24
	UCSRB |= (1 << RXCIE);//enable the Recieve USART Interrupt
    2a44:	aa e2       	ldi	r26, 0x2A	; 42
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	ea e2       	ldi	r30, 0x2A	; 42
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	80 81       	ld	r24, Z
    2a4e:	80 68       	ori	r24, 0x80	; 128
    2a50:	8c 93       	st	X, r24
}//USART_Init
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <USART_tx>:


void USART_tx(unsigned char data){
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<UDRE)))
    2a68:	eb e2       	ldi	r30, 0x2B	; 43
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	88 2f       	mov	r24, r24
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	80 72       	andi	r24, 0x20	; 32
    2a74:	90 70       	andi	r25, 0x00	; 0
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	b9 f3       	breq	.-18     	; 0x2a68 <USART_tx+0xc>
		;
	UDR = data;
    2a7a:	ec e2       	ldi	r30, 0x2C	; 44
    2a7c:	f0 e0       	ldi	r31, 0x00	; 0
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	80 83       	st	Z, r24
}
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <USART_rx>:


unsigned char USART_rx(void){
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	cd b7       	in	r28, 0x3d	; 61
    2a90:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA & (1<<RXC)))
    2a92:	eb e2       	ldi	r30, 0x2B	; 43
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	88 23       	and	r24, r24
    2a9a:	dc f7       	brge	.-10     	; 0x2a92 <USART_rx+0x8>
		;
	return UDR;
    2a9c:	ec e2       	ldi	r30, 0x2C	; 44
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <sendPowerUsage>:

void sendPowerUsage(float newAverage)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	2d 97       	sbiw	r28, 0x0d	; 13
    2ab2:	0f b6       	in	r0, 0x3f	; 63
    2ab4:	f8 94       	cli
    2ab6:	de bf       	out	0x3e, r29	; 62
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	cd bf       	out	0x3d, r28	; 61
    2abc:	6a 87       	std	Y+10, r22	; 0x0a
    2abe:	7b 87       	std	Y+11, r23	; 0x0b
    2ac0:	8c 87       	std	Y+12, r24	; 0x0c
    2ac2:	9d 87       	std	Y+13, r25	; 0x0d
	char convertedFloatToString[7] = {'0'};
    2ac4:	87 e0       	ldi	r24, 0x07	; 7
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	33 96       	adiw	r30, 0x03	; 3
    2aca:	df 01       	movw	r26, r30
    2acc:	98 2f       	mov	r25, r24
    2ace:	1d 92       	st	X+, r1
    2ad0:	9a 95       	dec	r25
    2ad2:	e9 f7       	brne	.-6      	; 0x2ace <sendPowerUsage+0x26>
    2ad4:	80 e3       	ldi	r24, 0x30	; 48
    2ad6:	8b 83       	std	Y+3, r24	; 0x03

	if(newAverage < 0)
    2ad8:	6a 85       	ldd	r22, Y+10	; 0x0a
    2ada:	7b 85       	ldd	r23, Y+11	; 0x0b
    2adc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ade:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	50 e0       	ldi	r21, 0x00	; 0
    2ae8:	0e 94 39 1c 	call	0x3872	; 0x3872 <__cmpsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	44 f4       	brge	.+16     	; 0x2b00 <sendPowerUsage+0x58>
		newAverage = 0.0;
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	a0 e0       	ldi	r26, 0x00	; 0
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	8a 87       	std	Y+10, r24	; 0x0a
    2afa:	9b 87       	std	Y+11, r25	; 0x0b
    2afc:	ac 87       	std	Y+12, r26	; 0x0c
    2afe:	bd 87       	std	Y+13, r27	; 0x0d

	floatToCharArray(newAverage, convertedFloatToString);
    2b00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b04:	ac 85       	ldd	r26, Y+12	; 0x0c
    2b06:	bd 85       	ldd	r27, Y+13	; 0x0d
    2b08:	9e 01       	movw	r18, r28
    2b0a:	2d 5f       	subi	r18, 0xFD	; 253
    2b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	a9 01       	movw	r20, r18
    2b14:	0e 94 a2 0a 	call	0x1544	; 0x1544 <floatToCharArray>

	for(int k=0; k<7; k++)
    2b18:	1a 82       	std	Y+2, r1	; 0x02
    2b1a:	19 82       	std	Y+1, r1	; 0x01
    2b1c:	0f c0       	rjmp	.+30     	; 0x2b3c <sendPowerUsage+0x94>
	{
		USART_tx(convertedFloatToString[k]);
    2b1e:	29 81       	ldd	r18, Y+1	; 0x01
    2b20:	3a 81       	ldd	r19, Y+2	; 0x02
    2b22:	ce 01       	movw	r24, r28
    2b24:	03 96       	adiw	r24, 0x03	; 3
    2b26:	fc 01       	movw	r30, r24
    2b28:	e2 0f       	add	r30, r18
    2b2a:	f3 1f       	adc	r31, r19
    2b2c:	80 81       	ld	r24, Z
    2b2e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
	if(newAverage < 0)
		newAverage = 0.0;

	floatToCharArray(newAverage, convertedFloatToString);

	for(int k=0; k<7; k++)
    2b32:	89 81       	ldd	r24, Y+1	; 0x01
    2b34:	9a 81       	ldd	r25, Y+2	; 0x02
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	9a 83       	std	Y+2, r25	; 0x02
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	87 30       	cpi	r24, 0x07	; 7
    2b42:	91 05       	cpc	r25, r1
    2b44:	64 f3       	brlt	.-40     	; 0x2b1e <sendPowerUsage+0x76>
	{
		USART_tx(convertedFloatToString[k]);
	}
	return;
}
    2b46:	2d 96       	adiw	r28, 0x0d	; 13
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	cf 91       	pop	r28
    2b54:	df 91       	pop	r29
    2b56:	08 95       	ret

00002b58 <HandleWirelessData>:

void HandleWirelessData(unsigned char *incomingPacket, unsigned char *priceCharArray, unsigned char OnOff,float newAverage)
{
    2b58:	0f 93       	push	r16
    2b5a:	1f 93       	push	r17
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	69 97       	sbiw	r28, 0x19	; 25
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	98 8b       	std	Y+16, r25	; 0x10
    2b72:	8f 87       	std	Y+15, r24	; 0x0f
    2b74:	7a 8b       	std	Y+18, r23	; 0x12
    2b76:	69 8b       	std	Y+17, r22	; 0x11
    2b78:	4b 8b       	std	Y+19, r20	; 0x13
    2b7a:	0c 8b       	std	Y+20, r16	; 0x14
    2b7c:	1d 8b       	std	Y+21, r17	; 0x15
    2b7e:	2e 8b       	std	Y+22, r18	; 0x16
    2b80:	3f 8b       	std	Y+23, r19	; 0x17
	
	char transmitPriceReply[9];
	TIMSK &= ~(1<<OCIE0);//turns off the counter while transmitting wireless data 
    2b82:	a9 e5       	ldi	r26, 0x59	; 89
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e9 e5       	ldi	r30, 0x59	; 89
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	8d 7f       	andi	r24, 0xFD	; 253
    2b8e:	8c 93       	st	X, r24
	switch (incomingPacket[0])
    2b90:	ef 85       	ldd	r30, Y+15	; 0x0f
    2b92:	f8 89       	ldd	r31, Y+16	; 0x10
    2b94:	80 81       	ld	r24, Z
    2b96:	28 2f       	mov	r18, r24
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	39 8f       	std	Y+25, r19	; 0x19
    2b9c:	28 8f       	std	Y+24, r18	; 0x18
    2b9e:	88 8d       	ldd	r24, Y+24	; 0x18
    2ba0:	99 8d       	ldd	r25, Y+25	; 0x19
    2ba2:	80 35       	cpi	r24, 0x50	; 80
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <HandleWirelessData+0x52>
    2ba8:	75 c0       	rjmp	.+234    	; 0x2c94 <HandleWirelessData+0x13c>
    2baa:	28 8d       	ldd	r18, Y+24	; 0x18
    2bac:	39 8d       	ldd	r19, Y+25	; 0x19
    2bae:	22 35       	cpi	r18, 0x52	; 82
    2bb0:	31 05       	cpc	r19, r1
    2bb2:	29 f1       	breq	.+74     	; 0x2bfe <HandleWirelessData+0xa6>
    2bb4:	88 8d       	ldd	r24, Y+24	; 0x18
    2bb6:	99 8d       	ldd	r25, Y+25	; 0x19
    2bb8:	84 34       	cpi	r24, 0x44	; 68
    2bba:	91 05       	cpc	r25, r1
    2bbc:	09 f0       	breq	.+2      	; 0x2bc0 <HandleWirelessData+0x68>
    2bbe:	cf c0       	rjmp	.+414    	; 0x2d5e <HandleWirelessData+0x206>
	{
		case _DATA:
			if(_ThisOutlet == incomingPacket[1])	//if we are the WHO
    2bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc2:	98 89       	ldd	r25, Y+16	; 0x10
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	31 96       	adiw	r30, 0x01	; 1
    2bc8:	80 81       	ld	r24, Z
    2bca:	82 33       	cpi	r24, 0x32	; 50
    2bcc:	09 f0       	breq	.+2      	; 0x2bd0 <HandleWirelessData+0x78>
    2bce:	c7 c0       	rjmp	.+398    	; 0x2d5e <HandleWirelessData+0x206>
			{
				if(_RequestChar == incomingPacket[2])	//if REQUEST (should always be true)
    2bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd2:	98 89       	ldd	r25, Y+16	; 0x10
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	32 96       	adiw	r30, 0x02	; 2
    2bd8:	80 81       	ld	r24, Z
    2bda:	81 35       	cpi	r24, 0x51	; 81
    2bdc:	09 f0       	breq	.+2      	; 0x2be0 <HandleWirelessData+0x88>
    2bde:	bf c0       	rjmp	.+382    	; 0x2d5e <HandleWirelessData+0x206>
				{
					USART_tx(_DATA);//reply data
    2be0:	84 e4       	ldi	r24, 0x44	; 68
    2be2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
					USART_tx(_ThisOutlet);//who
    2be6:	82 e3       	ldi	r24, 0x32	; 50
    2be8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
					sendPowerUsage(newAverage);
    2bec:	8c 89       	ldd	r24, Y+20	; 0x14
    2bee:	9d 89       	ldd	r25, Y+21	; 0x15
    2bf0:	ae 89       	ldd	r26, Y+22	; 0x16
    2bf2:	bf 89       	ldd	r27, Y+23	; 0x17
    2bf4:	bc 01       	movw	r22, r24
    2bf6:	cd 01       	movw	r24, r26
    2bf8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <sendPowerUsage>
    2bfc:	b0 c0       	rjmp	.+352    	; 0x2d5e <HandleWirelessData+0x206>
				}//if
			}//if
			break;

		case _RELAY:
			if(_ThisOutlet == incomingPacket[1])	//if we are the WHO
    2bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c00:	98 89       	ldd	r25, Y+16	; 0x10
    2c02:	fc 01       	movw	r30, r24
    2c04:	31 96       	adiw	r30, 0x01	; 1
    2c06:	80 81       	ld	r24, Z
    2c08:	82 33       	cpi	r24, 0x32	; 50
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <HandleWirelessData+0xb6>
    2c0c:	a8 c0       	rjmp	.+336    	; 0x2d5e <HandleWirelessData+0x206>
			{
				//read button was pushed
				if(incomingPacket[2] == _RequestChar)	//if is a REQUEST
    2c0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c10:	98 89       	ldd	r25, Y+16	; 0x10
    2c12:	fc 01       	movw	r30, r24
    2c14:	32 96       	adiw	r30, 0x02	; 2
    2c16:	80 81       	ld	r24, Z
    2c18:	81 35       	cpi	r24, 0x51	; 81
    2c1a:	19 f5       	brne	.+70     	; 0x2c62 <HandleWirelessData+0x10a>
				{
					if(PORTB & 0b00000001)
    2c1c:	e8 e3       	ldi	r30, 0x38	; 56
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	80 81       	ld	r24, Z
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	81 70       	andi	r24, 0x01	; 1
    2c28:	90 70       	andi	r25, 0x00	; 0
    2c2a:	88 23       	and	r24, r24
    2c2c:	19 f0       	breq	.+6      	; 0x2c34 <HandleWirelessData+0xdc>
						OnOff = '1';
    2c2e:	81 e3       	ldi	r24, 0x31	; 49
    2c30:	8b 8b       	std	Y+19, r24	; 0x13
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <HandleWirelessData+0xe0>
					else
						OnOff = '0';
    2c34:	80 e3       	ldi	r24, 0x30	; 48
    2c36:	8b 8b       	std	Y+19, r24	; 0x13
					USART_tx(_RELAY);		//reply relay
    2c38:	82 e5       	ldi	r24, 0x52	; 82
    2c3a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
					USART_tx(_ThisOutlet);		//who
    2c3e:	82 e3       	ldi	r24, 0x32	; 50
    2c40:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
					USART_tx(OnOff);	//on/off current status
    2c44:	8b 89       	ldd	r24, Y+19	; 0x13
    2c46:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
		
					for(uint8_t k = 0; k<6; k++)
    2c4a:	1d 82       	std	Y+5, r1	; 0x05
    2c4c:	06 c0       	rjmp	.+12     	; 0x2c5a <HandleWirelessData+0x102>
						USART_tx('0');
    2c4e:	80 e3       	ldi	r24, 0x30	; 48
    2c50:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
						OnOff = '0';
					USART_tx(_RELAY);		//reply relay
					USART_tx(_ThisOutlet);		//who
					USART_tx(OnOff);	//on/off current status
		
					for(uint8_t k = 0; k<6; k++)
    2c54:	8d 81       	ldd	r24, Y+5	; 0x05
    2c56:	8f 5f       	subi	r24, 0xFF	; 255
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5c:	86 30       	cpi	r24, 0x06	; 6
    2c5e:	b8 f3       	brcs	.-18     	; 0x2c4e <HandleWirelessData+0xf6>
    2c60:	7e c0       	rjmp	.+252    	; 0x2d5e <HandleWirelessData+0x206>
						USART_tx('0');
				}//if
				//commit button was pushed
				else
				{
					OnOff = incomingPacket[2];
    2c62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c64:	98 89       	ldd	r25, Y+16	; 0x10
    2c66:	fc 01       	movw	r30, r24
    2c68:	32 96       	adiw	r30, 0x02	; 2
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8b 8b       	std	Y+19, r24	; 0x13
					if (OnOff == '1')
    2c6e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c70:	81 33       	cpi	r24, 0x31	; 49
    2c72:	41 f4       	brne	.+16     	; 0x2c84 <HandleWirelessData+0x12c>
						PORTB |= 0x01;
    2c74:	a8 e3       	ldi	r26, 0x38	; 56
    2c76:	b0 e0       	ldi	r27, 0x00	; 0
    2c78:	e8 e3       	ldi	r30, 0x38	; 56
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	80 81       	ld	r24, Z
    2c7e:	81 60       	ori	r24, 0x01	; 1
    2c80:	8c 93       	st	X, r24
    2c82:	6d c0       	rjmp	.+218    	; 0x2d5e <HandleWirelessData+0x206>
					else
						PORTB &= ~0x01;
    2c84:	a8 e3       	ldi	r26, 0x38	; 56
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e8 e3       	ldi	r30, 0x38	; 56
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	8e 7f       	andi	r24, 0xFE	; 254
    2c90:	8c 93       	st	X, r24
    2c92:	65 c0       	rjmp	.+202    	; 0x2d5e <HandleWirelessData+0x206>
				}//else
			}//if
			break;

		case _PRICE:
			if(incomingPacket[1] == _RequestChar)	//if it is a REQUEST
    2c94:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c96:	98 89       	ldd	r25, Y+16	; 0x10
    2c98:	fc 01       	movw	r30, r24
    2c9a:	31 96       	adiw	r30, 0x01	; 1
    2c9c:	80 81       	ld	r24, Z
    2c9e:	81 35       	cpi	r24, 0x51	; 81
    2ca0:	e1 f4       	brne	.+56     	; 0x2cda <HandleWirelessData+0x182>
			{
				if(_ThisOutlet == incomingPacket[2])	//if we are the WHO
    2ca2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca4:	98 89       	ldd	r25, Y+16	; 0x10
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	32 96       	adiw	r30, 0x02	; 2
    2caa:	80 81       	ld	r24, Z
    2cac:	82 33       	cpi	r24, 0x32	; 50
    2cae:	09 f0       	breq	.+2      	; 0x2cb2 <HandleWirelessData+0x15a>
    2cb0:	56 c0       	rjmp	.+172    	; 0x2d5e <HandleWirelessData+0x206>
				{
					for(uint8_t k = 0; k<9; k++)
    2cb2:	1c 82       	std	Y+4, r1	; 0x04
    2cb4:	0e c0       	rjmp	.+28     	; 0x2cd2 <HandleWirelessData+0x17a>
						USART_tx(transmitPriceReply[k]);
    2cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb8:	28 2f       	mov	r18, r24
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	06 96       	adiw	r24, 0x06	; 6
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	e2 0f       	add	r30, r18
    2cc4:	f3 1f       	adc	r31, r19
    2cc6:	80 81       	ld	r24, Z
    2cc8:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <USART_tx>
		case _PRICE:
			if(incomingPacket[1] == _RequestChar)	//if it is a REQUEST
			{
				if(_ThisOutlet == incomingPacket[2])	//if we are the WHO
				{
					for(uint8_t k = 0; k<9; k++)
    2ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	8c 83       	std	Y+4, r24	; 0x04
    2cd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd4:	89 30       	cpi	r24, 0x09	; 9
    2cd6:	78 f3       	brcs	.-34     	; 0x2cb6 <HandleWirelessData+0x15e>
    2cd8:	42 c0       	rjmp	.+132    	; 0x2d5e <HandleWirelessData+0x206>

			//if the second char received isn't a REQUEST, it is
			//automatically defined as a broadcasted price ->save it
			else
			{
				for(uint8_t k = 0; k<5; k++){
    2cda:	1b 82       	std	Y+3, r1	; 0x03
    2cdc:	18 c0       	rjmp	.+48     	; 0x2d0e <HandleWirelessData+0x1b6>
					priceCharArray[k] = incomingPacket[k+1];
    2cde:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce0:	28 2f       	mov	r18, r24
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	89 89       	ldd	r24, Y+17	; 0x11
    2ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ce8:	dc 01       	movw	r26, r24
    2cea:	a2 0f       	add	r26, r18
    2cec:	b3 1f       	adc	r27, r19
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	88 2f       	mov	r24, r24
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	9c 01       	movw	r18, r24
    2cf6:	2f 5f       	subi	r18, 0xFF	; 255
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfc:	98 89       	ldd	r25, Y+16	; 0x10
    2cfe:	fc 01       	movw	r30, r24
    2d00:	e2 0f       	add	r30, r18
    2d02:	f3 1f       	adc	r31, r19
    2d04:	80 81       	ld	r24, Z
    2d06:	8c 93       	st	X, r24

			//if the second char received isn't a REQUEST, it is
			//automatically defined as a broadcasted price ->save it
			else
			{
				for(uint8_t k = 0; k<5; k++){
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	8f 5f       	subi	r24, 0xFF	; 255
    2d0c:	8b 83       	std	Y+3, r24	; 0x03
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	85 30       	cpi	r24, 0x05	; 5
    2d12:	28 f3       	brcs	.-54     	; 0x2cde <HandleWirelessData+0x186>
					priceCharArray[k] = incomingPacket[k+1];
				}
					
				//set flag to say we have a full price at outlet
				transmitPriceReply[0] = 'P';
    2d14:	80 e5       	ldi	r24, 0x50	; 80
    2d16:	8e 83       	std	Y+6, r24	; 0x06
				transmitPriceReply[1] = '1';
    2d18:	81 e3       	ldi	r24, 0x31	; 49
    2d1a:	8f 83       	std	Y+7, r24	; 0x07
				for(uint8_t k = 0; k<5; k++)
    2d1c:	1a 82       	std	Y+2, r1	; 0x02
    2d1e:	18 c0       	rjmp	.+48     	; 0x2d50 <HandleWirelessData+0x1f8>
					transmitPriceReply[k+2] = priceCharArray[k];
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	88 2f       	mov	r24, r24
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	ac 01       	movw	r20, r24
    2d28:	4e 5f       	subi	r20, 0xFE	; 254
    2d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	89 89       	ldd	r24, Y+17	; 0x11
    2d34:	9a 89       	ldd	r25, Y+18	; 0x12
    2d36:	fc 01       	movw	r30, r24
    2d38:	e2 0f       	add	r30, r18
    2d3a:	f3 1f       	adc	r31, r19
    2d3c:	20 81       	ld	r18, Z
    2d3e:	ce 01       	movw	r24, r28
    2d40:	06 96       	adiw	r24, 0x06	; 6
    2d42:	fc 01       	movw	r30, r24
    2d44:	e4 0f       	add	r30, r20
    2d46:	f5 1f       	adc	r31, r21
    2d48:	20 83       	st	Z, r18
				}
					
				//set flag to say we have a full price at outlet
				transmitPriceReply[0] = 'P';
				transmitPriceReply[1] = '1';
				for(uint8_t k = 0; k<5; k++)
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	8a 83       	std	Y+2, r24	; 0x02
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	85 30       	cpi	r24, 0x05	; 5
    2d54:	28 f3       	brcs	.-54     	; 0x2d20 <HandleWirelessData+0x1c8>
					transmitPriceReply[k+2] = priceCharArray[k];
				transmitPriceReply[7] = '0';
    2d56:	80 e3       	ldi	r24, 0x30	; 48
    2d58:	8d 87       	std	Y+13, r24	; 0x0d
				transmitPriceReply[8] = '0';
    2d5a:	80 e3       	ldi	r24, 0x30	; 48
    2d5c:	8e 87       	std	Y+14, r24	; 0x0e
			}//else broadcasted price
			break;
		default:
			break;
	}//end packetID switch
	for(uint8_t k = 0; k<9; k++)
    2d5e:	19 82       	std	Y+1, r1	; 0x01
    2d60:	0c c0       	rjmp	.+24     	; 0x2d7a <HandleWirelessData+0x222>
		incomingPacket[k] = 0;	//clears packet so we know its fresh data
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d6a:	98 89       	ldd	r25, Y+16	; 0x10
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e2 0f       	add	r30, r18
    2d70:	f3 1f       	adc	r31, r19
    2d72:	10 82       	st	Z, r1
			}//else broadcasted price
			break;
		default:
			break;
	}//end packetID switch
	for(uint8_t k = 0; k<9; k++)
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	8f 5f       	subi	r24, 0xFF	; 255
    2d78:	89 83       	std	Y+1, r24	; 0x01
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	89 30       	cpi	r24, 0x09	; 9
    2d7e:	88 f3       	brcs	.-30     	; 0x2d62 <HandleWirelessData+0x20a>
		incomingPacket[k] = 0;	//clears packet so we know its fresh data
	TCNT0 = 0x00;			//resets the timer to start counting from zero
    2d80:	e2 e5       	ldi	r30, 0x52	; 82
    2d82:	f0 e0       	ldi	r31, 0x00	; 0
    2d84:	10 82       	st	Z, r1
	TIMSK |= (1<<OCIE0);		//turns time counter back on
    2d86:	a9 e5       	ldi	r26, 0x59	; 89
    2d88:	b0 e0       	ldi	r27, 0x00	; 0
    2d8a:	e9 e5       	ldi	r30, 0x59	; 89
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	80 81       	ld	r24, Z
    2d90:	82 60       	ori	r24, 0x02	; 2
    2d92:	8c 93       	st	X, r24
	return;
}
    2d94:	69 96       	adiw	r28, 0x19	; 25
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	de bf       	out	0x3e, r29	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	cd bf       	out	0x3d, r28	; 61
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	08 95       	ret

00002daa <__vector_13>:
unsigned int wirelessNew = 0;



ISR(USART_RXC_vect)
{	
    2daa:	1f 92       	push	r1
    2dac:	0f 92       	push	r0
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	0f 92       	push	r0
    2db2:	11 24       	eor	r1, r1
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	2f 93       	push	r18
    2dba:	3f 93       	push	r19
    2dbc:	4f 93       	push	r20
    2dbe:	5f 93       	push	r21
    2dc0:	6f 93       	push	r22
    2dc2:	7f 93       	push	r23
    2dc4:	8f 93       	push	r24
    2dc6:	9f 93       	push	r25
    2dc8:	af 93       	push	r26
    2dca:	bf 93       	push	r27
    2dcc:	ef 93       	push	r30
    2dce:	ff 93       	push	r31
    2dd0:	df 93       	push	r29
    2dd2:	cf 93       	push	r28
    2dd4:	0f 92       	push	r0
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
	cli();											//turn off interrupts so we can receive the whole packet
    2dda:	f8 94       	cli
	incomingPacket[0] = UDR;
    2ddc:	ec e2       	ldi	r30, 0x2C	; 44
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	80 81       	ld	r24, Z
    2de2:	80 93 6d 00 	sts	0x006D, r24
	for(uint8_t k = 1; k<9; k++)
    2de6:	81 e0       	ldi	r24, 0x01	; 1
    2de8:	89 83       	std	Y+1, r24	; 0x01
    2dea:	0c c0       	rjmp	.+24     	; 0x2e04 <__vector_13+0x5a>
		incomingPacket[k] = USART_rx();
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	08 2f       	mov	r16, r24
    2df0:	10 e0       	ldi	r17, 0x00	; 0
    2df2:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <USART_rx>
    2df6:	f8 01       	movw	r30, r16
    2df8:	e3 59       	subi	r30, 0x93	; 147
    2dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dfc:	80 83       	st	Z, r24

ISR(USART_RXC_vect)
{	
	cli();											//turn off interrupts so we can receive the whole packet
	incomingPacket[0] = UDR;
	for(uint8_t k = 1; k<9; k++)
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	8f 5f       	subi	r24, 0xFF	; 255
    2e02:	89 83       	std	Y+1, r24	; 0x01
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	89 30       	cpi	r24, 0x09	; 9
    2e08:	88 f3       	brcs	.-30     	; 0x2dec <__vector_13+0x42>
		incomingPacket[k] = USART_rx();
	wirelessNew = 1;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	90 93 8b 04 	sts	0x048B, r25
    2e12:	80 93 8a 04 	sts	0x048A, r24
	sei();
    2e16:	78 94       	sei
}
    2e18:	0f 90       	pop	r0
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	ff 91       	pop	r31
    2e20:	ef 91       	pop	r30
    2e22:	bf 91       	pop	r27
    2e24:	af 91       	pop	r26
    2e26:	9f 91       	pop	r25
    2e28:	8f 91       	pop	r24
    2e2a:	7f 91       	pop	r23
    2e2c:	6f 91       	pop	r22
    2e2e:	5f 91       	pop	r21
    2e30:	4f 91       	pop	r20
    2e32:	3f 91       	pop	r19
    2e34:	2f 91       	pop	r18
    2e36:	1f 91       	pop	r17
    2e38:	0f 91       	pop	r16
    2e3a:	0f 90       	pop	r0
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	0f 90       	pop	r0
    2e40:	1f 90       	pop	r1
    2e42:	18 95       	reti

00002e44 <__vector_16>:

ISR(ADC_vect)									//ADC conversion complete interrupt 
{
    2e44:	1f 92       	push	r1
    2e46:	0f 92       	push	r0
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	0f 92       	push	r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	0f 93       	push	r16
    2e50:	1f 93       	push	r17
    2e52:	2f 93       	push	r18
    2e54:	3f 93       	push	r19
    2e56:	4f 93       	push	r20
    2e58:	5f 93       	push	r21
    2e5a:	6f 93       	push	r22
    2e5c:	7f 93       	push	r23
    2e5e:	8f 93       	push	r24
    2e60:	9f 93       	push	r25
    2e62:	af 93       	push	r26
    2e64:	bf 93       	push	r27
    2e66:	ef 93       	push	r30
    2e68:	ff 93       	push	r31
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <__vector_16+0x2c>
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
	cli();										//turns off interrupts
    2e74:	f8 94       	cli
	vsamples[v]= ADC;							//store ADC sample into vsamples array
    2e76:	80 91 84 00 	lds	r24, 0x0084
    2e7a:	48 2f       	mov	r20, r24
    2e7c:	50 e0       	ldi	r21, 0x00	; 0
    2e7e:	e4 e2       	ldi	r30, 0x24	; 36
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	91 81       	ldd	r25, Z+1	; 0x01
    2e86:	9c 01       	movw	r18, r24
    2e88:	ca 01       	movw	r24, r20
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	fc 01       	movw	r30, r24
    2e90:	ea 57       	subi	r30, 0x7A	; 122
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	31 83       	std	Z+1, r19	; 0x01
    2e96:	20 83       	st	Z, r18
	ADCSRA &= ~(1<<ADEN);						//disables ADC
    2e98:	a6 e2       	ldi	r26, 0x26	; 38
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	e6 e2       	ldi	r30, 0x26	; 38
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	80 81       	ld	r24, Z
    2ea2:	8f 77       	andi	r24, 0x7F	; 127
    2ea4:	8c 93       	st	X, r24

	InitCurrentADC(gain);						//Sets up the ADC for Taking Current Samples
    2ea6:	80 91 66 00 	lds	r24, 0x0066
    2eaa:	0e 94 a3 09 	call	0x1346	; 0x1346 <InitCurrentADC>
	isamples[i] = TakeCurrentSample();
    2eae:	80 91 85 00 	lds	r24, 0x0085
    2eb2:	08 2f       	mov	r16, r24
    2eb4:	10 e0       	ldi	r17, 0x00	; 0
    2eb6:	0e 94 06 09 	call	0x120c	; 0x120c <TakeCurrentSample>
    2eba:	9c 01       	movw	r18, r24
    2ebc:	c8 01       	movw	r24, r16
    2ebe:	88 0f       	add	r24, r24
    2ec0:	99 1f       	adc	r25, r25
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	e4 5e       	subi	r30, 0xE4	; 228
    2ec6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec8:	31 83       	std	Z+1, r19	; 0x01
    2eca:	20 83       	st	Z, r18
	ADCSRA &= ~(1<<ADEN);						//disables ADC
    2ecc:	a6 e2       	ldi	r26, 0x26	; 38
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	e6 e2       	ldi	r30, 0x26	; 38
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	8f 77       	andi	r24, 0x7F	; 127
    2ed8:	8c 93       	st	X, r24
	if (isamples[i] > 512)									//if sample taken is greater than 512 bits, do 2's compliment and make it negative
    2eda:	80 91 85 00 	lds	r24, 0x0085
    2ede:	88 2f       	mov	r24, r24
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	88 0f       	add	r24, r24
    2ee4:	99 1f       	adc	r25, r25
    2ee6:	fc 01       	movw	r30, r24
    2ee8:	e4 5e       	subi	r30, 0xE4	; 228
    2eea:	fe 4f       	sbci	r31, 0xFE	; 254
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	22 e0       	ldi	r18, 0x02	; 2
    2ef2:	81 30       	cpi	r24, 0x01	; 1
    2ef4:	92 07       	cpc	r25, r18
    2ef6:	1c f1       	brlt	.+70     	; 0x2f3e <__vector_16+0xfa>
	{
		int negative = (~(isamples[i] - 1)) & 0x03FF;		//2's compliment of current samples
    2ef8:	80 91 85 00 	lds	r24, 0x0085
    2efc:	88 2f       	mov	r24, r24
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	88 0f       	add	r24, r24
    2f02:	99 1f       	adc	r25, r25
    2f04:	fc 01       	movw	r30, r24
    2f06:	e4 5e       	subi	r30, 0xE4	; 228
    2f08:	fe 4f       	sbci	r31, 0xFE	; 254
    2f0a:	80 81       	ld	r24, Z
    2f0c:	91 81       	ldd	r25, Z+1	; 0x01
    2f0e:	90 95       	com	r25
    2f10:	81 95       	neg	r24
    2f12:	9f 4f       	sbci	r25, 0xFF	; 255
    2f14:	93 70       	andi	r25, 0x03	; 3
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
		isamples[i] = -negative;
    2f1a:	80 91 85 00 	lds	r24, 0x0085
    2f1e:	28 2f       	mov	r18, r24
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	9a 81       	ldd	r25, Y+2	; 0x02
    2f26:	44 27       	eor	r20, r20
    2f28:	55 27       	eor	r21, r21
    2f2a:	48 1b       	sub	r20, r24
    2f2c:	59 0b       	sbc	r21, r25
    2f2e:	c9 01       	movw	r24, r18
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	fc 01       	movw	r30, r24
    2f36:	e4 5e       	subi	r30, 0xE4	; 228
    2f38:	fe 4f       	sbci	r31, 0xFE	; 254
    2f3a:	51 83       	std	Z+1, r21	; 0x01
    2f3c:	40 83       	st	Z, r20
	}// end if		

	initVoltageADC();							//initialize ADC
    2f3e:	0e 94 be 09 	call	0x137c	; 0x137c <initVoltageADC>
	ADCSRA &= ~(1<<ADEN);
    2f42:	a6 e2       	ldi	r26, 0x26	; 38
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e6 e2       	ldi	r30, 0x26	; 38
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	8f 77       	andi	r24, 0x7F	; 127
    2f4e:	8c 93       	st	X, r24
	v++;										//increment the sample indices
    2f50:	80 91 84 00 	lds	r24, 0x0084
    2f54:	8f 5f       	subi	r24, 0xFF	; 255
    2f56:	80 93 84 00 	sts	0x0084, r24
	i++;
    2f5a:	80 91 85 00 	lds	r24, 0x0085
    2f5e:	8f 5f       	subi	r24, 0xFF	; 255
    2f60:	80 93 85 00 	sts	0x0085, r24
	sei();
    2f64:	78 94       	sei
}//end ADC ISR
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	ff 91       	pop	r31
    2f70:	ef 91       	pop	r30
    2f72:	bf 91       	pop	r27
    2f74:	af 91       	pop	r26
    2f76:	9f 91       	pop	r25
    2f78:	8f 91       	pop	r24
    2f7a:	7f 91       	pop	r23
    2f7c:	6f 91       	pop	r22
    2f7e:	5f 91       	pop	r21
    2f80:	4f 91       	pop	r20
    2f82:	3f 91       	pop	r19
    2f84:	2f 91       	pop	r18
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	0f 90       	pop	r0
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	0f 90       	pop	r0
    2f90:	1f 90       	pop	r1
    2f92:	18 95       	reti

00002f94 <__vector_10>:

ISR(TIMER0_COMP_vect)		//timer counter compare match vector
{
    2f94:	1f 92       	push	r1
    2f96:	0f 92       	push	r0
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	0f 92       	push	r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	8f 93       	push	r24
    2fa0:	af 93       	push	r26
    2fa2:	bf 93       	push	r27
    2fa4:	ef 93       	push	r30
    2fa6:	ff 93       	push	r31
    2fa8:	df 93       	push	r29
    2faa:	cf 93       	push	r28
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = 0x00;			//resets the timer to start counting from zero
    2fb0:	e2 e5       	ldi	r30, 0x52	; 82
    2fb2:	f0 e0       	ldi	r31, 0x00	; 0
    2fb4:	10 82       	st	Z, r1
	TIFR |=(1<<OCF0);		//clears the interrupt flag
    2fb6:	a8 e5       	ldi	r26, 0x58	; 88
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	e8 e5       	ldi	r30, 0x58	; 88
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	82 60       	ori	r24, 0x02	; 2
    2fc2:	8c 93       	st	X, r24
	//this flag was not needed in the branch
	ADCSRA |= (1<<ADEN);
    2fc4:	a6 e2       	ldi	r26, 0x26	; 38
    2fc6:	b0 e0       	ldi	r27, 0x00	; 0
    2fc8:	e6 e2       	ldi	r30, 0x26	; 38
    2fca:	f0 e0       	ldi	r31, 0x00	; 0
    2fcc:	80 81       	ld	r24, Z
    2fce:	80 68       	ori	r24, 0x80	; 128
    2fd0:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);	//**Note this is now in ADCSRA initialization
    2fd2:	a6 e2       	ldi	r26, 0x26	; 38
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	e6 e2       	ldi	r30, 0x26	; 38
    2fd8:	f0 e0       	ldi	r31, 0x00	; 0
    2fda:	80 81       	ld	r24, Z
    2fdc:	80 64       	ori	r24, 0x40	; 64
    2fde:	8c 93       	st	X, r24
}//end Timer counter ISR
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	ff 91       	pop	r31
    2fe6:	ef 91       	pop	r30
    2fe8:	bf 91       	pop	r27
    2fea:	af 91       	pop	r26
    2fec:	8f 91       	pop	r24
    2fee:	0f 90       	pop	r0
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	0f 90       	pop	r0
    2ff4:	1f 90       	pop	r1
    2ff6:	18 95       	reti

00002ff8 <main>:



int main(void)				//Main program start
{
    2ff8:	cf 92       	push	r12
    2ffa:	df 92       	push	r13
    2ffc:	ef 92       	push	r14
    2ffe:	ff 92       	push	r15
    3000:	0f 93       	push	r16
    3002:	1f 93       	push	r17
    3004:	df 93       	push	r29
    3006:	cf 93       	push	r28
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	6a 97       	sbiw	r28, 0x1a	; 26
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	de bf       	out	0x3e, r29	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;			//PORTB output for flasing led test
    3018:	e7 e3       	ldi	r30, 0x37	; 55
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	8f ef       	ldi	r24, 0xFF	; 255
    301e:	80 83       	st	Z, r24
	PORTB |= 0x01;			//turns the outlet on initially
    3020:	a8 e3       	ldi	r26, 0x38	; 56
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	e8 e3       	ldi	r30, 0x38	; 56
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	81 60       	ori	r24, 0x01	; 1
    302c:	8c 93       	st	X, r24
	lcd_init();				//initialize lcd
    302e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_init>
	initCounter();			//initialize counter
    3032:	0e 94 82 0a 	call	0x1504	; 0x1504 <initCounter>
	initVoltageADC();		//initialize ADC
    3036:	0e 94 be 09 	call	0x137c	; 0x137c <initVoltageADC>
	USART_init(51);			//usart initialize with 9600 baud
    303a:	83 e3       	ldi	r24, 0x33	; 51
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 08 15 	call	0x2a10	; 0x2a10 <USART_init>
	sei();					//enables all interrups
    3042:	78 94       	sei
	uint8_t numberOfSetsTaken = 0;
    3044:	1a 8e       	std	Y+26, r1	; 0x1a
	float newAverage = 0;
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	a0 e0       	ldi	r26, 0x00	; 0
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	8e 8b       	std	Y+22, r24	; 0x16
    3050:	9f 8b       	std	Y+23, r25	; 0x17
    3052:	a8 8f       	std	Y+24, r26	; 0x18
    3054:	b9 8f       	std	Y+25, r27	; 0x19
	int newCurrentSampleMax;
	
	while(1)
	{
		
		if( numberOfSetsTaken < numberOfSetsInMovingAvgPower)
    3056:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3058:	8e 31       	cpi	r24, 0x1E	; 30
    305a:	08 f0       	brcs	.+2      	; 0x305e <main+0x66>
    305c:	fa c1       	rjmp	.+1012   	; 0x3452 <main+0x45a>
		{
			//waiting for 75 samples
			if(v == 75)
    305e:	80 91 84 00 	lds	r24, 0x0084
    3062:	8b 34       	cpi	r24, 0x4B	; 75
    3064:	c1 f7       	brne	.-16     	; 0x3056 <main+0x5e>
			{
				TIMSK &= ~(1<<OCIE0);
    3066:	a9 e5       	ldi	r26, 0x59	; 89
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	e9 e5       	ldi	r30, 0x59	; 89
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	8d 7f       	andi	r24, 0xFD	; 253
    3072:	8c 93       	st	X, r24
				
				
				newCurrentSampleMax = FindMaxCurrentSample(isamples);		//go to averaging function to get a single average of current
    3074:	8c e1       	ldi	r24, 0x1C	; 28
    3076:	91 e0       	ldi	r25, 0x01	; 1
    3078:	0e 94 2f 09 	call	0x125e	; 0x125e <FindMaxCurrentSample>
    307c:	9d 87       	std	Y+13, r25	; 0x0d
    307e:	8c 87       	std	Y+12, r24	; 0x0c
				FindNewGainValue(&gain, newCurrentSampleMax);					//Sets new Gain Value 1, 10 or 200, based on 75 previous Current Samples 
    3080:	86 e6       	ldi	r24, 0x66	; 102
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	2c 85       	ldd	r18, Y+12	; 0x0c
    3086:	3d 85       	ldd	r19, Y+13	; 0x0d
    3088:	b9 01       	movw	r22, r18
    308a:	0e 94 b8 08 	call	0x1170	; 0x1170 <FindNewGainValue>
				
				ConvertCurrentSamplesToAmps(isamples, iload, gain);
    308e:	40 91 66 00 	lds	r20, 0x0066
    3092:	8c e1       	ldi	r24, 0x1C	; 28
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	2e ed       	ldi	r18, 0xDE	; 222
    3098:	32 e0       	ldi	r19, 0x02	; 2
    309a:	b9 01       	movw	r22, r18
    309c:	0e 94 00 08 	call	0x1000	; 0x1000 <ConvertCurrentSamplesToAmps>
				ConvertVoltageSamplesToVolts(vsamples, vline);
    30a0:	86 e8       	ldi	r24, 0x86	; 134
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	22 eb       	ldi	r18, 0xB2	; 178
    30a6:	31 e0       	ldi	r19, 0x01	; 1
    30a8:	b9 01       	movw	r22, r18
    30aa:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <ConvertVoltageSamplesToVolts>
			
				powerUsage = calculateavgpower();
    30ae:	0e 94 91 1a 	call	0x3522	; 0x3522 <calculateavgpower>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	80 93 86 04 	sts	0x0486, r24
    30ba:	90 93 87 04 	sts	0x0487, r25
    30be:	a0 93 88 04 	sts	0x0488, r26
    30c2:	b0 93 89 04 	sts	0x0489, r27
				//newAverage = powerUsage;

				for(int k = 0; k<75; k++)
    30c6:	1f 82       	std	Y+7, r1	; 0x07
    30c8:	1e 82       	std	Y+6, r1	; 0x06
    30ca:	35 c0       	rjmp	.+106    	; 0x3136 <main+0x13e>
					iload[k] = iload[k]*iload[k];
    30cc:	ce 80       	ldd	r12, Y+6	; 0x06
    30ce:	df 80       	ldd	r13, Y+7	; 0x07
    30d0:	8e 81       	ldd	r24, Y+6	; 0x06
    30d2:	9f 81       	ldd	r25, Y+7	; 0x07
    30d4:	88 0f       	add	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	88 0f       	add	r24, r24
    30da:	99 1f       	adc	r25, r25
    30dc:	fc 01       	movw	r30, r24
    30de:	e2 52       	subi	r30, 0x22	; 34
    30e0:	fd 4f       	sbci	r31, 0xFD	; 253
    30e2:	e0 80       	ld	r14, Z
    30e4:	f1 80       	ldd	r15, Z+1	; 0x01
    30e6:	02 81       	ldd	r16, Z+2	; 0x02
    30e8:	13 81       	ldd	r17, Z+3	; 0x03
    30ea:	8e 81       	ldd	r24, Y+6	; 0x06
    30ec:	9f 81       	ldd	r25, Y+7	; 0x07
    30ee:	88 0f       	add	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	88 0f       	add	r24, r24
    30f4:	99 1f       	adc	r25, r25
    30f6:	fc 01       	movw	r30, r24
    30f8:	e2 52       	subi	r30, 0x22	; 34
    30fa:	fd 4f       	sbci	r31, 0xFD	; 253
    30fc:	20 81       	ld	r18, Z
    30fe:	31 81       	ldd	r19, Z+1	; 0x01
    3100:	42 81       	ldd	r20, Z+2	; 0x02
    3102:	53 81       	ldd	r21, Z+3	; 0x03
    3104:	c8 01       	movw	r24, r16
    3106:	b7 01       	movw	r22, r14
    3108:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9c 01       	movw	r18, r24
    3112:	ad 01       	movw	r20, r26
    3114:	c6 01       	movw	r24, r12
    3116:	88 0f       	add	r24, r24
    3118:	99 1f       	adc	r25, r25
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	fc 01       	movw	r30, r24
    3120:	e2 52       	subi	r30, 0x22	; 34
    3122:	fd 4f       	sbci	r31, 0xFD	; 253
    3124:	20 83       	st	Z, r18
    3126:	31 83       	std	Z+1, r19	; 0x01
    3128:	42 83       	std	Z+2, r20	; 0x02
    312a:	53 83       	std	Z+3, r21	; 0x03
				ConvertVoltageSamplesToVolts(vsamples, vline);
			
				powerUsage = calculateavgpower();
				//newAverage = powerUsage;

				for(int k = 0; k<75; k++)
    312c:	8e 81       	ldd	r24, Y+6	; 0x06
    312e:	9f 81       	ldd	r25, Y+7	; 0x07
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	9f 83       	std	Y+7, r25	; 0x07
    3134:	8e 83       	std	Y+6, r24	; 0x06
    3136:	8e 81       	ldd	r24, Y+6	; 0x06
    3138:	9f 81       	ldd	r25, Y+7	; 0x07
    313a:	8b 34       	cpi	r24, 0x4B	; 75
    313c:	91 05       	cpc	r25, r1
    313e:	34 f2       	brlt	.-116    	; 0x30cc <main+0xd4>
					iload[k] = iload[k]*iload[k];

				for(int k = 0; k<75; k++)
    3140:	1d 82       	std	Y+5, r1	; 0x05
    3142:	1c 82       	std	Y+4, r1	; 0x04
    3144:	1e c0       	rjmp	.+60     	; 0x3182 <main+0x18a>
					currentsum += iload[k];
    3146:	8c 81       	ldd	r24, Y+4	; 0x04
    3148:	9d 81       	ldd	r25, Y+5	; 0x05
    314a:	88 0f       	add	r24, r24
    314c:	99 1f       	adc	r25, r25
    314e:	88 0f       	add	r24, r24
    3150:	99 1f       	adc	r25, r25
    3152:	fc 01       	movw	r30, r24
    3154:	e2 52       	subi	r30, 0x22	; 34
    3156:	fd 4f       	sbci	r31, 0xFD	; 253
    3158:	20 81       	ld	r18, Z
    315a:	31 81       	ldd	r19, Z+1	; 0x01
    315c:	42 81       	ldd	r20, Z+2	; 0x02
    315e:	53 81       	ldd	r21, Z+3	; 0x03
    3160:	6e 85       	ldd	r22, Y+14	; 0x0e
    3162:	7f 85       	ldd	r23, Y+15	; 0x0f
    3164:	88 89       	ldd	r24, Y+16	; 0x10
    3166:	99 89       	ldd	r25, Y+17	; 0x11
    3168:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    316c:	dc 01       	movw	r26, r24
    316e:	cb 01       	movw	r24, r22
    3170:	8e 87       	std	Y+14, r24	; 0x0e
    3172:	9f 87       	std	Y+15, r25	; 0x0f
    3174:	a8 8b       	std	Y+16, r26	; 0x10
    3176:	b9 8b       	std	Y+17, r27	; 0x11
				//newAverage = powerUsage;

				for(int k = 0; k<75; k++)
					iload[k] = iload[k]*iload[k];

				for(int k = 0; k<75; k++)
    3178:	8c 81       	ldd	r24, Y+4	; 0x04
    317a:	9d 81       	ldd	r25, Y+5	; 0x05
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	9d 83       	std	Y+5, r25	; 0x05
    3180:	8c 83       	std	Y+4, r24	; 0x04
    3182:	8c 81       	ldd	r24, Y+4	; 0x04
    3184:	9d 81       	ldd	r25, Y+5	; 0x05
    3186:	8b 34       	cpi	r24, 0x4B	; 75
    3188:	91 05       	cpc	r25, r1
    318a:	ec f2       	brlt	.-70     	; 0x3146 <main+0x14e>
					currentsum += iload[k];

				currentsum = sqrt(currentsum/75);
    318c:	6e 85       	ldd	r22, Y+14	; 0x0e
    318e:	7f 85       	ldd	r23, Y+15	; 0x0f
    3190:	88 89       	ldd	r24, Y+16	; 0x10
    3192:	99 89       	ldd	r25, Y+17	; 0x11
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	46 e9       	ldi	r20, 0x96	; 150
    319a:	52 e4       	ldi	r21, 0x42	; 66
    319c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	bc 01       	movw	r22, r24
    31a6:	cd 01       	movw	r24, r26
    31a8:	0e 94 86 1e 	call	0x3d0c	; 0x3d0c <sqrt>
    31ac:	dc 01       	movw	r26, r24
    31ae:	cb 01       	movw	r24, r22
    31b0:	8e 87       	std	Y+14, r24	; 0x0e
    31b2:	9f 87       	std	Y+15, r25	; 0x0f
    31b4:	a8 8b       	std	Y+16, r26	; 0x10
    31b6:	b9 8b       	std	Y+17, r27	; 0x11
				newAverage = movingAveragePower(powerUsage);
    31b8:	80 91 86 04 	lds	r24, 0x0486
    31bc:	90 91 87 04 	lds	r25, 0x0487
    31c0:	a0 91 88 04 	lds	r26, 0x0488
    31c4:	b0 91 89 04 	lds	r27, 0x0489
    31c8:	bc 01       	movw	r22, r24
    31ca:	cd 01       	movw	r24, r26
    31cc:	0e 94 44 1b 	call	0x3688	; 0x3688 <movingAveragePower>
    31d0:	dc 01       	movw	r26, r24
    31d2:	cb 01       	movw	r24, r22
    31d4:	8e 8b       	std	Y+22, r24	; 0x16
    31d6:	9f 8b       	std	Y+23, r25	; 0x17
    31d8:	a8 8f       	std	Y+24, r26	; 0x18
    31da:	b9 8f       	std	Y+25, r27	; 0x19
				
				if(newAverage < 0)
    31dc:	6e 89       	ldd	r22, Y+22	; 0x16
    31de:	7f 89       	ldd	r23, Y+23	; 0x17
    31e0:	88 8d       	ldd	r24, Y+24	; 0x18
    31e2:	99 8d       	ldd	r25, Y+25	; 0x19
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e0       	ldi	r20, 0x00	; 0
    31ea:	50 e0       	ldi	r21, 0x00	; 0
    31ec:	0e 94 39 1c 	call	0x3872	; 0x3872 <__cmpsf2>
    31f0:	88 23       	and	r24, r24
    31f2:	44 f4       	brge	.+16     	; 0x3204 <main+0x20c>
					newAverage = 0.0;
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	a0 e0       	ldi	r26, 0x00	; 0
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	8e 8b       	std	Y+22, r24	; 0x16
    31fe:	9f 8b       	std	Y+23, r25	; 0x17
    3200:	a8 8f       	std	Y+24, r26	; 0x18
    3202:	b9 8f       	std	Y+25, r27	; 0x19
				
				float price = 0.0;
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	a0 e0       	ldi	r26, 0x00	; 0
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	88 87       	std	Y+8, r24	; 0x08
    320e:	99 87       	std	Y+9, r25	; 0x09
    3210:	aa 87       	std	Y+10, r26	; 0x0a
    3212:	bb 87       	std	Y+11, r27	; 0x0b
				price = (priceCharArray[0]-48)*0.1+
    3214:	80 91 68 00 	lds	r24, 0x0068
    3218:	88 2f       	mov	r24, r24
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	c0 97       	sbiw	r24, 0x30	; 48
    321e:	aa 27       	eor	r26, r26
    3220:	97 fd       	sbrc	r25, 7
    3222:	a0 95       	com	r26
    3224:	ba 2f       	mov	r27, r26
    3226:	bc 01       	movw	r22, r24
    3228:	cd 01       	movw	r24, r26
    322a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    322e:	dc 01       	movw	r26, r24
    3230:	cb 01       	movw	r24, r22
    3232:	bc 01       	movw	r22, r24
    3234:	cd 01       	movw	r24, r26
    3236:	2d ec       	ldi	r18, 0xCD	; 205
    3238:	3c ec       	ldi	r19, 0xCC	; 204
    323a:	4c ec       	ldi	r20, 0xCC	; 204
    323c:	5d e3       	ldi	r21, 0x3D	; 61
    323e:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	7c 01       	movw	r14, r24
    3248:	8d 01       	movw	r16, r26
    324a:	80 91 69 00 	lds	r24, 0x0069
    324e:	88 2f       	mov	r24, r24
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	c0 97       	sbiw	r24, 0x30	; 48
    3254:	aa 27       	eor	r26, r26
    3256:	97 fd       	sbrc	r25, 7
    3258:	a0 95       	com	r26
    325a:	ba 2f       	mov	r27, r26
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	bc 01       	movw	r22, r24
    326a:	cd 01       	movw	r24, r26
    326c:	2a e0       	ldi	r18, 0x0A	; 10
    326e:	37 ed       	ldi	r19, 0xD7	; 215
    3270:	43 e2       	ldi	r20, 0x23	; 35
    3272:	5c e3       	ldi	r21, 0x3C	; 60
    3274:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    3278:	dc 01       	movw	r26, r24
    327a:	cb 01       	movw	r24, r22
    327c:	9c 01       	movw	r18, r24
    327e:	ad 01       	movw	r20, r26
    3280:	c8 01       	movw	r24, r16
    3282:	b7 01       	movw	r22, r14
    3284:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	7c 01       	movw	r14, r24
    328e:	8d 01       	movw	r16, r26
    3290:	80 91 6a 00 	lds	r24, 0x006A
    3294:	88 2f       	mov	r24, r24
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	c0 97       	sbiw	r24, 0x30	; 48
    329a:	aa 27       	eor	r26, r26
    329c:	97 fd       	sbrc	r25, 7
    329e:	a0 95       	com	r26
    32a0:	ba 2f       	mov	r27, r26
    32a2:	bc 01       	movw	r22, r24
    32a4:	cd 01       	movw	r24, r26
    32a6:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    32aa:	dc 01       	movw	r26, r24
    32ac:	cb 01       	movw	r24, r22
    32ae:	bc 01       	movw	r22, r24
    32b0:	cd 01       	movw	r24, r26
    32b2:	2f e6       	ldi	r18, 0x6F	; 111
    32b4:	32 e1       	ldi	r19, 0x12	; 18
    32b6:	43 e8       	ldi	r20, 0x83	; 131
    32b8:	5a e3       	ldi	r21, 0x3A	; 58
    32ba:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	9c 01       	movw	r18, r24
    32c4:	ad 01       	movw	r20, r26
    32c6:	c8 01       	movw	r24, r16
    32c8:	b7 01       	movw	r22, r14
    32ca:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	7c 01       	movw	r14, r24
    32d4:	8d 01       	movw	r16, r26
    32d6:	80 91 6b 00 	lds	r24, 0x006B
    32da:	88 2f       	mov	r24, r24
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	c0 97       	sbiw	r24, 0x30	; 48
    32e0:	aa 27       	eor	r26, r26
    32e2:	97 fd       	sbrc	r25, 7
    32e4:	a0 95       	com	r26
    32e6:	ba 2f       	mov	r27, r26
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	bc 01       	movw	r22, r24
    32f6:	cd 01       	movw	r24, r26
    32f8:	27 e1       	ldi	r18, 0x17	; 23
    32fa:	37 eb       	ldi	r19, 0xB7	; 183
    32fc:	41 ed       	ldi	r20, 0xD1	; 209
    32fe:	58 e3       	ldi	r21, 0x38	; 56
    3300:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	9c 01       	movw	r18, r24
    330a:	ad 01       	movw	r20, r26
    330c:	c8 01       	movw	r24, r16
    330e:	b7 01       	movw	r22, r14
    3310:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    3314:	dc 01       	movw	r26, r24
    3316:	cb 01       	movw	r24, r22
    3318:	7c 01       	movw	r14, r24
    331a:	8d 01       	movw	r16, r26
    331c:	80 91 6c 00 	lds	r24, 0x006C
    3320:	88 2f       	mov	r24, r24
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	c0 97       	sbiw	r24, 0x30	; 48
    3326:	aa 27       	eor	r26, r26
    3328:	97 fd       	sbrc	r25, 7
    332a:	a0 95       	com	r26
    332c:	ba 2f       	mov	r27, r26
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <__floatsisf>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	2c ea       	ldi	r18, 0xAC	; 172
    3340:	35 ec       	ldi	r19, 0xC5	; 197
    3342:	47 e2       	ldi	r20, 0x27	; 39
    3344:	57 e3       	ldi	r21, 0x37	; 55
    3346:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	9c 01       	movw	r18, r24
    3350:	ad 01       	movw	r20, r26
    3352:	c8 01       	movw	r24, r16
    3354:	b7 01       	movw	r22, r14
    3356:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	88 87       	std	Y+8, r24	; 0x08
    3360:	99 87       	std	Y+9, r25	; 0x09
    3362:	aa 87       	std	Y+10, r26	; 0x0a
    3364:	bb 87       	std	Y+11, r27	; 0x0b
					(priceCharArray[1]-48)*0.01+
					(priceCharArray[2]-48)*0.001+
					(priceCharArray[3]-48)*0.0001+
					(priceCharArray[4]-48)*0.00001;
				newAveragePricePerMonth = newAverage/1000*720*price;
    3366:	6e 89       	ldd	r22, Y+22	; 0x16
    3368:	7f 89       	ldd	r23, Y+23	; 0x17
    336a:	88 8d       	ldd	r24, Y+24	; 0x18
    336c:	99 8d       	ldd	r25, Y+25	; 0x19
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	4a e7       	ldi	r20, 0x7A	; 122
    3374:	54 e4       	ldi	r21, 0x44	; 68
    3376:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22
    337e:	bc 01       	movw	r22, r24
    3380:	cd 01       	movw	r24, r26
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	44 e3       	ldi	r20, 0x34	; 52
    3388:	54 e4       	ldi	r21, 0x44	; 68
    338a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	bc 01       	movw	r22, r24
    3394:	cd 01       	movw	r24, r26
    3396:	28 85       	ldd	r18, Y+8	; 0x08
    3398:	39 85       	ldd	r19, Y+9	; 0x09
    339a:	4a 85       	ldd	r20, Y+10	; 0x0a
    339c:	5b 85       	ldd	r21, Y+11	; 0x0b
    339e:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	8a 8b       	std	Y+18, r24	; 0x12
    33a8:	9b 8b       	std	Y+19, r25	; 0x13
    33aa:	ac 8b       	std	Y+20, r26	; 0x14
    33ac:	bd 8b       	std	Y+21, r27	; 0x15

				for (uint8_t k = 0; k < 75; k++)
    33ae:	1b 82       	std	Y+3, r1	; 0x03
    33b0:	3b c0       	rjmp	.+118    	; 0x3428 <main+0x430>
				{
					vline[k]=0;			//return all arrays to zero
    33b2:	8b 81       	ldd	r24, Y+3	; 0x03
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	fc 01       	movw	r30, r24
    33c2:	ee 54       	subi	r30, 0x4E	; 78
    33c4:	fe 4f       	sbci	r31, 0xFE	; 254
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	a0 e0       	ldi	r26, 0x00	; 0
    33cc:	b0 e0       	ldi	r27, 0x00	; 0
    33ce:	80 83       	st	Z, r24
    33d0:	91 83       	std	Z+1, r25	; 0x01
    33d2:	a2 83       	std	Z+2, r26	; 0x02
    33d4:	b3 83       	std	Z+3, r27	; 0x03
					iload[k]=0;
    33d6:	8b 81       	ldd	r24, Y+3	; 0x03
    33d8:	88 2f       	mov	r24, r24
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	fc 01       	movw	r30, r24
    33e6:	e2 52       	subi	r30, 0x22	; 34
    33e8:	fd 4f       	sbci	r31, 0xFD	; 253
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	a0 e0       	ldi	r26, 0x00	; 0
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	80 83       	st	Z, r24
    33f4:	91 83       	std	Z+1, r25	; 0x01
    33f6:	a2 83       	std	Z+2, r26	; 0x02
    33f8:	b3 83       	std	Z+3, r27	; 0x03
					vsamples[k]=0;
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	88 2f       	mov	r24, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	88 0f       	add	r24, r24
    3402:	99 1f       	adc	r25, r25
    3404:	fc 01       	movw	r30, r24
    3406:	ea 57       	subi	r30, 0x7A	; 122
    3408:	ff 4f       	sbci	r31, 0xFF	; 255
    340a:	11 82       	std	Z+1, r1	; 0x01
    340c:	10 82       	st	Z, r1
					isamples[k]=0;
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	88 2f       	mov	r24, r24
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	fc 01       	movw	r30, r24
    341a:	e4 5e       	subi	r30, 0xE4	; 228
    341c:	fe 4f       	sbci	r31, 0xFE	; 254
    341e:	11 82       	std	Z+1, r1	; 0x01
    3420:	10 82       	st	Z, r1
					(priceCharArray[2]-48)*0.001+
					(priceCharArray[3]-48)*0.0001+
					(priceCharArray[4]-48)*0.00001;
				newAveragePricePerMonth = newAverage/1000*720*price;

				for (uint8_t k = 0; k < 75; k++)
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	8f 5f       	subi	r24, 0xFF	; 255
    3426:	8b 83       	std	Y+3, r24	; 0x03
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	8b 34       	cpi	r24, 0x4B	; 75
    342c:	10 f2       	brcs	.-124    	; 0x33b2 <main+0x3ba>
					iload[k]=0;
					vsamples[k]=0;
					isamples[k]=0;
				}
				
				v = 0;      //reset sample indices to zero
    342e:	10 92 84 00 	sts	0x0084, r1
				i = 0;
    3432:	10 92 85 00 	sts	0x0085, r1
				numberOfSetsTaken++;
    3436:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3438:	8f 5f       	subi	r24, 0xFF	; 255
    343a:	8a 8f       	std	Y+26, r24	; 0x1a
				TCNT0 = 0x00;			//resets the timer to start counting from zero
    343c:	e2 e5       	ldi	r30, 0x52	; 82
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	10 82       	st	Z, r1
				TIMSK |= (1<<OCIE0);		//turns time counter back on
    3442:	a9 e5       	ldi	r26, 0x59	; 89
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e9 e5       	ldi	r30, 0x59	; 89
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	82 60       	ori	r24, 0x02	; 2
    344e:	8c 93       	st	X, r24
    3450:	02 ce       	rjmp	.-1020   	; 0x3056 <main+0x5e>
			
			}//if(v==74)
		}
		else
		{
			TIMSK &= ~(1<<OCIE0); 
    3452:	a9 e5       	ldi	r26, 0x59	; 89
    3454:	b0 e0       	ldi	r27, 0x00	; 0
    3456:	e9 e5       	ldi	r30, 0x59	; 89
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	80 81       	ld	r24, Z
    345c:	8d 7f       	andi	r24, 0xFD	; 253
    345e:	8c 93       	st	X, r24
			lcd_clear();
    3460:	0e 94 41 02 	call	0x482	; 0x482 <lcd_clear>
			lcd_home();
    3464:	0e 94 4b 02 	call	0x496	; 0x496 <lcd_home>
			lcd_print_int16((int)newAverage);
    3468:	6e 89       	ldd	r22, Y+22	; 0x16
    346a:	7f 89       	ldd	r23, Y+23	; 0x17
    346c:	88 8d       	ldd	r24, Y+24	; 0x18
    346e:	99 8d       	ldd	r25, Y+25	; 0x19
    3470:	0e 94 a5 1c 	call	0x394a	; 0x394a <__fixsfsi>
    3474:	dc 01       	movw	r26, r24
    3476:	cb 01       	movw	r24, r22
    3478:	0e 94 38 04 	call	0x870	; 0x870 <lcd_print_int16>
			lcd_print_string(" Watts");
    347c:	86 e7       	ldi	r24, 0x76	; 118
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
			lcd_goto_xy(0,1);
    3484:	80 e0       	ldi	r24, 0x00	; 0
    3486:	61 e0       	ldi	r22, 0x01	; 1
    3488:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_goto_xy>
			lcd_print_string("$");
    348c:	8d e7       	ldi	r24, 0x7D	; 125
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
			lcd_print_float(newAveragePricePerMonth);
    3494:	8a 89       	ldd	r24, Y+18	; 0x12
    3496:	9b 89       	ldd	r25, Y+19	; 0x13
    3498:	ac 89       	ldd	r26, Y+20	; 0x14
    349a:	bd 89       	ldd	r27, Y+21	; 0x15
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print_float>
			lcd_print_string("/mo");
    34a4:	8f e7       	ldi	r24, 0x7F	; 127
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>

			for(int delay = 0 ; delay <= DelayBetweenSampleGroupsSeconds ; delay++)
    34ac:	1a 82       	std	Y+2, r1	; 0x02
    34ae:	19 82       	std	Y+1, r1	; 0x01
    34b0:	27 c0       	rjmp	.+78     	; 0x3500 <main+0x508>
			{
				delay_ms(1000);
    34b2:	88 ee       	ldi	r24, 0xE8	; 232
    34b4:	93 e0       	ldi	r25, 0x03	; 3
    34b6:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
			 	delay++;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	9a 81       	ldd	r25, Y+2	; 0x02
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
				//***** Wireless Data Being Handled *****
				if(wirelessNew == 1)
    34c4:	80 91 8a 04 	lds	r24, 0x048A
    34c8:	90 91 8b 04 	lds	r25, 0x048B
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	91 05       	cpc	r25, r1
    34d0:	91 f4       	brne	.+36     	; 0x34f6 <main+0x4fe>
				{
					HandleWirelessData(incomingPacket, priceCharArray, OnOff, newAverage);
    34d2:	e0 91 67 00 	lds	r30, 0x0067
    34d6:	8d e6       	ldi	r24, 0x6D	; 109
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	48 e6       	ldi	r20, 0x68	; 104
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	0e 89       	ldd	r16, Y+22	; 0x16
    34e0:	1f 89       	ldd	r17, Y+23	; 0x17
    34e2:	28 8d       	ldd	r18, Y+24	; 0x18
    34e4:	39 8d       	ldd	r19, Y+25	; 0x19
    34e6:	ba 01       	movw	r22, r20
    34e8:	4e 2f       	mov	r20, r30
    34ea:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <HandleWirelessData>
					wirelessNew = 0;		//sets that there is no New wireless packet
    34ee:	10 92 8b 04 	sts	0x048B, r1
    34f2:	10 92 8a 04 	sts	0x048A, r1
			lcd_goto_xy(0,1);
			lcd_print_string("$");
			lcd_print_float(newAveragePricePerMonth);
			lcd_print_string("/mo");

			for(int delay = 0 ; delay <= DelayBetweenSampleGroupsSeconds ; delay++)
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	01 96       	adiw	r24, 0x01	; 1
    34fc:	9a 83       	std	Y+2, r25	; 0x02
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	89 81       	ldd	r24, Y+1	; 0x01
    3502:	9a 81       	ldd	r25, Y+2	; 0x02
    3504:	8b 30       	cpi	r24, 0x0B	; 11
    3506:	91 05       	cpc	r25, r1
    3508:	a4 f2       	brlt	.-88     	; 0x34b2 <main+0x4ba>
					HandleWirelessData(incomingPacket, priceCharArray, OnOff, newAverage);
					wirelessNew = 0;		//sets that there is no New wireless packet
				}//if wirelessNew
			}//for delay		
			
			numberOfSetsTaken = 0;
    350a:	1a 8e       	std	Y+26, r1	; 0x1a
			TCNT0 = 0x00;			//resets the timer to start counting from zero
    350c:	e2 e5       	ldi	r30, 0x52	; 82
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	10 82       	st	Z, r1
			TIMSK |= (1<<OCIE0);		//turns time counter back on
    3512:	a9 e5       	ldi	r26, 0x59	; 89
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	e9 e5       	ldi	r30, 0x59	; 89
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	82 60       	ori	r24, 0x02	; 2
    351e:	8c 93       	st	X, r24
    3520:	9a cd       	rjmp	.-1228   	; 0x3056 <main+0x5e>

00003522 <calculateavgpower>:
	}//end while
}//end main


float calculateavgpower(void)
{
    3522:	cf 92       	push	r12
    3524:	df 92       	push	r13
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	c4 53       	subi	r28, 0x34	; 52
    3538:	d1 40       	sbci	r29, 0x01	; 1
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
	float avgpower=0;
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	a0 e0       	ldi	r26, 0x00	; 0
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	8d 83       	std	Y+5, r24	; 0x05
    354e:	9e 83       	std	Y+6, r25	; 0x06
    3550:	af 83       	std	Y+7, r26	; 0x07
    3552:	b8 87       	std	Y+8, r27	; 0x08
	float instPower[75] = {0};
    3554:	8c e2       	ldi	r24, 0x2C	; 44
    3556:	91 e0       	ldi	r25, 0x01	; 1
    3558:	fe 01       	movw	r30, r28
    355a:	39 96       	adiw	r30, 0x09	; 9
    355c:	df 01       	movw	r26, r30
    355e:	9c 01       	movw	r18, r24
    3560:	1d 92       	st	X+, r1
    3562:	21 50       	subi	r18, 0x01	; 1
    3564:	30 40       	sbci	r19, 0x00	; 0
    3566:	e1 f7       	brne	.-8      	; 0x3560 <calculateavgpower+0x3e>

	for(int k=0; k<75; k++)
    3568:	1c 82       	std	Y+4, r1	; 0x04
    356a:	1b 82       	std	Y+3, r1	; 0x03
    356c:	38 c0       	rjmp	.+112    	; 0x35de <calculateavgpower+0xbc>
		instPower[k] = (vline[k]*iload[k]);
    356e:	cb 80       	ldd	r12, Y+3	; 0x03
    3570:	dc 80       	ldd	r13, Y+4	; 0x04
    3572:	8b 81       	ldd	r24, Y+3	; 0x03
    3574:	9c 81       	ldd	r25, Y+4	; 0x04
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	88 0f       	add	r24, r24
    357c:	99 1f       	adc	r25, r25
    357e:	fc 01       	movw	r30, r24
    3580:	ee 54       	subi	r30, 0x4E	; 78
    3582:	fe 4f       	sbci	r31, 0xFE	; 254
    3584:	e0 80       	ld	r14, Z
    3586:	f1 80       	ldd	r15, Z+1	; 0x01
    3588:	02 81       	ldd	r16, Z+2	; 0x02
    358a:	13 81       	ldd	r17, Z+3	; 0x03
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	9c 81       	ldd	r25, Y+4	; 0x04
    3590:	88 0f       	add	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	88 0f       	add	r24, r24
    3596:	99 1f       	adc	r25, r25
    3598:	fc 01       	movw	r30, r24
    359a:	e2 52       	subi	r30, 0x22	; 34
    359c:	fd 4f       	sbci	r31, 0xFD	; 253
    359e:	20 81       	ld	r18, Z
    35a0:	31 81       	ldd	r19, Z+1	; 0x01
    35a2:	42 81       	ldd	r20, Z+2	; 0x02
    35a4:	53 81       	ldd	r21, Z+3	; 0x03
    35a6:	c8 01       	movw	r24, r16
    35a8:	b7 01       	movw	r22, r14
    35aa:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	ac 01       	movw	r20, r24
    35b4:	bd 01       	movw	r22, r26
    35b6:	96 01       	movw	r18, r12
    35b8:	22 0f       	add	r18, r18
    35ba:	33 1f       	adc	r19, r19
    35bc:	22 0f       	add	r18, r18
    35be:	33 1f       	adc	r19, r19
    35c0:	ce 01       	movw	r24, r28
    35c2:	01 96       	adiw	r24, 0x01	; 1
    35c4:	82 0f       	add	r24, r18
    35c6:	93 1f       	adc	r25, r19
    35c8:	fc 01       	movw	r30, r24
    35ca:	38 96       	adiw	r30, 0x08	; 8
    35cc:	40 83       	st	Z, r20
    35ce:	51 83       	std	Z+1, r21	; 0x01
    35d0:	62 83       	std	Z+2, r22	; 0x02
    35d2:	73 83       	std	Z+3, r23	; 0x03
float calculateavgpower(void)
{
	float avgpower=0;
	float instPower[75] = {0};

	for(int k=0; k<75; k++)
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	01 96       	adiw	r24, 0x01	; 1
    35da:	9c 83       	std	Y+4, r25	; 0x04
    35dc:	8b 83       	std	Y+3, r24	; 0x03
    35de:	8b 81       	ldd	r24, Y+3	; 0x03
    35e0:	9c 81       	ldd	r25, Y+4	; 0x04
    35e2:	8b 34       	cpi	r24, 0x4B	; 75
    35e4:	91 05       	cpc	r25, r1
    35e6:	1c f2       	brlt	.-122    	; 0x356e <calculateavgpower+0x4c>
		instPower[k] = (vline[k]*iload[k]);
	
	for(int k=0; k<75; k++)
    35e8:	1a 82       	std	Y+2, r1	; 0x02
    35ea:	19 82       	std	Y+1, r1	; 0x01
    35ec:	22 c0       	rjmp	.+68     	; 0x3632 <calculateavgpower+0x110>
		avgpower += instPower[k]; 		//add the divided samples 
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	9a 81       	ldd	r25, Y+2	; 0x02
    35f2:	9c 01       	movw	r18, r24
    35f4:	22 0f       	add	r18, r18
    35f6:	33 1f       	adc	r19, r19
    35f8:	22 0f       	add	r18, r18
    35fa:	33 1f       	adc	r19, r19
    35fc:	ce 01       	movw	r24, r28
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	82 0f       	add	r24, r18
    3602:	93 1f       	adc	r25, r19
    3604:	fc 01       	movw	r30, r24
    3606:	38 96       	adiw	r30, 0x08	; 8
    3608:	20 81       	ld	r18, Z
    360a:	31 81       	ldd	r19, Z+1	; 0x01
    360c:	42 81       	ldd	r20, Z+2	; 0x02
    360e:	53 81       	ldd	r21, Z+3	; 0x03
    3610:	6d 81       	ldd	r22, Y+5	; 0x05
    3612:	7e 81       	ldd	r23, Y+6	; 0x06
    3614:	8f 81       	ldd	r24, Y+7	; 0x07
    3616:	98 85       	ldd	r25, Y+8	; 0x08
    3618:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	8d 83       	std	Y+5, r24	; 0x05
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	af 83       	std	Y+7, r26	; 0x07
    3626:	b8 87       	std	Y+8, r27	; 0x08
	float instPower[75] = {0};

	for(int k=0; k<75; k++)
		instPower[k] = (vline[k]*iload[k]);
	
	for(int k=0; k<75; k++)
    3628:	89 81       	ldd	r24, Y+1	; 0x01
    362a:	9a 81       	ldd	r25, Y+2	; 0x02
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	9a 83       	std	Y+2, r25	; 0x02
    3630:	89 83       	std	Y+1, r24	; 0x01
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	9a 81       	ldd	r25, Y+2	; 0x02
    3636:	8b 34       	cpi	r24, 0x4B	; 75
    3638:	91 05       	cpc	r25, r1
    363a:	cc f2       	brlt	.-78     	; 0x35ee <calculateavgpower+0xcc>
		avgpower += instPower[k]; 		//add the divided samples 
	
	avgpower = avgpower/75.0;
    363c:	6d 81       	ldd	r22, Y+5	; 0x05
    363e:	7e 81       	ldd	r23, Y+6	; 0x06
    3640:	8f 81       	ldd	r24, Y+7	; 0x07
    3642:	98 85       	ldd	r25, Y+8	; 0x08
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	46 e9       	ldi	r20, 0x96	; 150
    364a:	52 e4       	ldi	r21, 0x42	; 66
    364c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    3650:	dc 01       	movw	r26, r24
    3652:	cb 01       	movw	r24, r22
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	af 83       	std	Y+7, r26	; 0x07
    365a:	b8 87       	std	Y+8, r27	; 0x08
	
	return avgpower;
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	af 81       	ldd	r26, Y+7	; 0x07
    3662:	b8 85       	ldd	r27, Y+8	; 0x08
}
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	cc 5c       	subi	r28, 0xCC	; 204
    366a:	de 4f       	sbci	r29, 0xFE	; 254
    366c:	0f b6       	in	r0, 0x3f	; 63
    366e:	f8 94       	cli
    3670:	de bf       	out	0x3e, r29	; 62
    3672:	0f be       	out	0x3f, r0	; 63
    3674:	cd bf       	out	0x3d, r28	; 61
    3676:	cf 91       	pop	r28
    3678:	df 91       	pop	r29
    367a:	1f 91       	pop	r17
    367c:	0f 91       	pop	r16
    367e:	ff 90       	pop	r15
    3680:	ef 90       	pop	r14
    3682:	df 90       	pop	r13
    3684:	cf 90       	pop	r12
    3686:	08 95       	ret

00003688 <movingAveragePower>:

float movingAveragePower(float averagePower)
{
    3688:	df 93       	push	r29
    368a:	cf 93       	push	r28
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62
    3690:	2a 97       	sbiw	r28, 0x0a	; 10
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	6f 83       	std	Y+7, r22	; 0x07
    369e:	78 87       	std	Y+8, r23	; 0x08
    36a0:	89 87       	std	Y+9, r24	; 0x09
    36a2:	9a 87       	std	Y+10, r25	; 0x0a
	for(uint8_t k = numberOfSetsInMovingAvgPower; k>1 ; k--)
    36a4:	8e e1       	ldi	r24, 0x1E	; 30
    36a6:	8a 83       	std	Y+2, r24	; 0x02
    36a8:	24 c0       	rjmp	.+72     	; 0x36f2 <movingAveragePower+0x6a>
		averagePowerArray[k-1] = averagePowerArray[k-2];
    36aa:	8a 81       	ldd	r24, Y+2	; 0x02
    36ac:	88 2f       	mov	r24, r24
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	bc 01       	movw	r22, r24
    36b2:	61 50       	subi	r22, 0x01	; 1
    36b4:	70 40       	sbci	r23, 0x00	; 0
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	88 2f       	mov	r24, r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	02 97       	sbiw	r24, 0x02	; 2
    36be:	88 0f       	add	r24, r24
    36c0:	99 1f       	adc	r25, r25
    36c2:	88 0f       	add	r24, r24
    36c4:	99 1f       	adc	r25, r25
    36c6:	fc 01       	movw	r30, r24
    36c8:	e6 5f       	subi	r30, 0xF6	; 246
    36ca:	fb 4f       	sbci	r31, 0xFB	; 251
    36cc:	20 81       	ld	r18, Z
    36ce:	31 81       	ldd	r19, Z+1	; 0x01
    36d0:	42 81       	ldd	r20, Z+2	; 0x02
    36d2:	53 81       	ldd	r21, Z+3	; 0x03
    36d4:	cb 01       	movw	r24, r22
    36d6:	88 0f       	add	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	fc 01       	movw	r30, r24
    36e0:	e6 5f       	subi	r30, 0xF6	; 246
    36e2:	fb 4f       	sbci	r31, 0xFB	; 251
    36e4:	20 83       	st	Z, r18
    36e6:	31 83       	std	Z+1, r19	; 0x01
    36e8:	42 83       	std	Z+2, r20	; 0x02
    36ea:	53 83       	std	Z+3, r21	; 0x03
	return avgpower;
}

float movingAveragePower(float averagePower)
{
	for(uint8_t k = numberOfSetsInMovingAvgPower; k>1 ; k--)
    36ec:	8a 81       	ldd	r24, Y+2	; 0x02
    36ee:	81 50       	subi	r24, 0x01	; 1
    36f0:	8a 83       	std	Y+2, r24	; 0x02
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	82 30       	cpi	r24, 0x02	; 2
    36f6:	c8 f6       	brcc	.-78     	; 0x36aa <movingAveragePower+0x22>
		averagePowerArray[k-1] = averagePowerArray[k-2];
	
	averagePowerArray[0] = averagePower;
    36f8:	8f 81       	ldd	r24, Y+7	; 0x07
    36fa:	98 85       	ldd	r25, Y+8	; 0x08
    36fc:	a9 85       	ldd	r26, Y+9	; 0x09
    36fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    3700:	80 93 0a 04 	sts	0x040A, r24
    3704:	90 93 0b 04 	sts	0x040B, r25
    3708:	a0 93 0c 04 	sts	0x040C, r26
    370c:	b0 93 0d 04 	sts	0x040D, r27
	
	float sumOfAverages = 0;
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	a0 e0       	ldi	r26, 0x00	; 0
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	8b 83       	std	Y+3, r24	; 0x03
    371a:	9c 83       	std	Y+4, r25	; 0x04
    371c:	ad 83       	std	Y+5, r26	; 0x05
    371e:	be 83       	std	Y+6, r27	; 0x06
	for(uint8_t k = 0; k <numberOfSetsInMovingAvgPower ; k++)
    3720:	19 82       	std	Y+1, r1	; 0x01
    3722:	1d c0       	rjmp	.+58     	; 0x375e <movingAveragePower+0xd6>
	{
		sumOfAverages +=averagePowerArray[k];
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	88 2f       	mov	r24, r24
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	88 0f       	add	r24, r24
    372c:	99 1f       	adc	r25, r25
    372e:	88 0f       	add	r24, r24
    3730:	99 1f       	adc	r25, r25
    3732:	fc 01       	movw	r30, r24
    3734:	e6 5f       	subi	r30, 0xF6	; 246
    3736:	fb 4f       	sbci	r31, 0xFB	; 251
    3738:	20 81       	ld	r18, Z
    373a:	31 81       	ldd	r19, Z+1	; 0x01
    373c:	42 81       	ldd	r20, Z+2	; 0x02
    373e:	53 81       	ldd	r21, Z+3	; 0x03
    3740:	6b 81       	ldd	r22, Y+3	; 0x03
    3742:	7c 81       	ldd	r23, Y+4	; 0x04
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__addsf3>
    374c:	dc 01       	movw	r26, r24
    374e:	cb 01       	movw	r24, r22
    3750:	8b 83       	std	Y+3, r24	; 0x03
    3752:	9c 83       	std	Y+4, r25	; 0x04
    3754:	ad 83       	std	Y+5, r26	; 0x05
    3756:	be 83       	std	Y+6, r27	; 0x06
		averagePowerArray[k-1] = averagePowerArray[k-2];
	
	averagePowerArray[0] = averagePower;
	
	float sumOfAverages = 0;
	for(uint8_t k = 0; k <numberOfSetsInMovingAvgPower ; k++)
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	8f 5f       	subi	r24, 0xFF	; 255
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	8e 31       	cpi	r24, 0x1E	; 30
    3762:	00 f3       	brcs	.-64     	; 0x3724 <movingAveragePower+0x9c>
	{
		sumOfAverages +=averagePowerArray[k];
	}

	sumOfAverages = sumOfAverages/(float)numberOfSetsInMovingAvgPower;
    3764:	6b 81       	ldd	r22, Y+3	; 0x03
    3766:	7c 81       	ldd	r23, Y+4	; 0x04
    3768:	8d 81       	ldd	r24, Y+5	; 0x05
    376a:	9e 81       	ldd	r25, Y+6	; 0x06
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 ef       	ldi	r20, 0xF0	; 240
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 3d 1c 	call	0x387a	; 0x387a <__divsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	8b 83       	std	Y+3, r24	; 0x03
    377e:	9c 83       	std	Y+4, r25	; 0x04
    3780:	ad 83       	std	Y+5, r26	; 0x05
    3782:	be 83       	std	Y+6, r27	; 0x06

	return sumOfAverages;
    3784:	8b 81       	ldd	r24, Y+3	; 0x03
    3786:	9c 81       	ldd	r25, Y+4	; 0x04
    3788:	ad 81       	ldd	r26, Y+5	; 0x05
    378a:	be 81       	ldd	r27, Y+6	; 0x06
}
    378c:	bc 01       	movw	r22, r24
    378e:	cd 01       	movw	r24, r26
    3790:	2a 96       	adiw	r28, 0x0a	; 10
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	08 95       	ret

000037a2 <exit>:
    37a2:	f8 94       	cli
    37a4:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <_exit>

000037a8 <__subsf3>:
    37a8:	50 58       	subi	r21, 0x80	; 128

000037aa <__addsf3>:
    37aa:	bb 27       	eor	r27, r27
    37ac:	aa 27       	eor	r26, r26
    37ae:	0e d0       	rcall	.+28     	; 0x37cc <__addsf3x>
    37b0:	75 c1       	rjmp	.+746    	; 0x3a9c <__fp_round>
    37b2:	66 d1       	rcall	.+716    	; 0x3a80 <__fp_pscA>
    37b4:	30 f0       	brcs	.+12     	; 0x37c2 <__addsf3+0x18>
    37b6:	6b d1       	rcall	.+726    	; 0x3a8e <__fp_pscB>
    37b8:	20 f0       	brcs	.+8      	; 0x37c2 <__addsf3+0x18>
    37ba:	31 f4       	brne	.+12     	; 0x37c8 <__addsf3+0x1e>
    37bc:	9f 3f       	cpi	r25, 0xFF	; 255
    37be:	11 f4       	brne	.+4      	; 0x37c4 <__addsf3+0x1a>
    37c0:	1e f4       	brtc	.+6      	; 0x37c8 <__addsf3+0x1e>
    37c2:	5b c1       	rjmp	.+694    	; 0x3a7a <__fp_nan>
    37c4:	0e f4       	brtc	.+2      	; 0x37c8 <__addsf3+0x1e>
    37c6:	e0 95       	com	r30
    37c8:	e7 fb       	bst	r30, 7
    37ca:	51 c1       	rjmp	.+674    	; 0x3a6e <__fp_inf>

000037cc <__addsf3x>:
    37cc:	e9 2f       	mov	r30, r25
    37ce:	77 d1       	rcall	.+750    	; 0x3abe <__fp_split3>
    37d0:	80 f3       	brcs	.-32     	; 0x37b2 <__addsf3+0x8>
    37d2:	ba 17       	cp	r27, r26
    37d4:	62 07       	cpc	r22, r18
    37d6:	73 07       	cpc	r23, r19
    37d8:	84 07       	cpc	r24, r20
    37da:	95 07       	cpc	r25, r21
    37dc:	18 f0       	brcs	.+6      	; 0x37e4 <__addsf3x+0x18>
    37de:	71 f4       	brne	.+28     	; 0x37fc <__addsf3x+0x30>
    37e0:	9e f5       	brtc	.+102    	; 0x3848 <__addsf3x+0x7c>
    37e2:	8f c1       	rjmp	.+798    	; 0x3b02 <__fp_zero>
    37e4:	0e f4       	brtc	.+2      	; 0x37e8 <__addsf3x+0x1c>
    37e6:	e0 95       	com	r30
    37e8:	0b 2e       	mov	r0, r27
    37ea:	ba 2f       	mov	r27, r26
    37ec:	a0 2d       	mov	r26, r0
    37ee:	0b 01       	movw	r0, r22
    37f0:	b9 01       	movw	r22, r18
    37f2:	90 01       	movw	r18, r0
    37f4:	0c 01       	movw	r0, r24
    37f6:	ca 01       	movw	r24, r20
    37f8:	a0 01       	movw	r20, r0
    37fa:	11 24       	eor	r1, r1
    37fc:	ff 27       	eor	r31, r31
    37fe:	59 1b       	sub	r21, r25
    3800:	99 f0       	breq	.+38     	; 0x3828 <__addsf3x+0x5c>
    3802:	59 3f       	cpi	r21, 0xF9	; 249
    3804:	50 f4       	brcc	.+20     	; 0x381a <__addsf3x+0x4e>
    3806:	50 3e       	cpi	r21, 0xE0	; 224
    3808:	68 f1       	brcs	.+90     	; 0x3864 <__addsf3x+0x98>
    380a:	1a 16       	cp	r1, r26
    380c:	f0 40       	sbci	r31, 0x00	; 0
    380e:	a2 2f       	mov	r26, r18
    3810:	23 2f       	mov	r18, r19
    3812:	34 2f       	mov	r19, r20
    3814:	44 27       	eor	r20, r20
    3816:	58 5f       	subi	r21, 0xF8	; 248
    3818:	f3 cf       	rjmp	.-26     	; 0x3800 <__addsf3x+0x34>
    381a:	46 95       	lsr	r20
    381c:	37 95       	ror	r19
    381e:	27 95       	ror	r18
    3820:	a7 95       	ror	r26
    3822:	f0 40       	sbci	r31, 0x00	; 0
    3824:	53 95       	inc	r21
    3826:	c9 f7       	brne	.-14     	; 0x381a <__addsf3x+0x4e>
    3828:	7e f4       	brtc	.+30     	; 0x3848 <__addsf3x+0x7c>
    382a:	1f 16       	cp	r1, r31
    382c:	ba 0b       	sbc	r27, r26
    382e:	62 0b       	sbc	r22, r18
    3830:	73 0b       	sbc	r23, r19
    3832:	84 0b       	sbc	r24, r20
    3834:	ba f0       	brmi	.+46     	; 0x3864 <__addsf3x+0x98>
    3836:	91 50       	subi	r25, 0x01	; 1
    3838:	a1 f0       	breq	.+40     	; 0x3862 <__addsf3x+0x96>
    383a:	ff 0f       	add	r31, r31
    383c:	bb 1f       	adc	r27, r27
    383e:	66 1f       	adc	r22, r22
    3840:	77 1f       	adc	r23, r23
    3842:	88 1f       	adc	r24, r24
    3844:	c2 f7       	brpl	.-16     	; 0x3836 <__addsf3x+0x6a>
    3846:	0e c0       	rjmp	.+28     	; 0x3864 <__addsf3x+0x98>
    3848:	ba 0f       	add	r27, r26
    384a:	62 1f       	adc	r22, r18
    384c:	73 1f       	adc	r23, r19
    384e:	84 1f       	adc	r24, r20
    3850:	48 f4       	brcc	.+18     	; 0x3864 <__addsf3x+0x98>
    3852:	87 95       	ror	r24
    3854:	77 95       	ror	r23
    3856:	67 95       	ror	r22
    3858:	b7 95       	ror	r27
    385a:	f7 95       	ror	r31
    385c:	9e 3f       	cpi	r25, 0xFE	; 254
    385e:	08 f0       	brcs	.+2      	; 0x3862 <__addsf3x+0x96>
    3860:	b3 cf       	rjmp	.-154    	; 0x37c8 <__addsf3+0x1e>
    3862:	93 95       	inc	r25
    3864:	88 0f       	add	r24, r24
    3866:	08 f0       	brcs	.+2      	; 0x386a <__addsf3x+0x9e>
    3868:	99 27       	eor	r25, r25
    386a:	ee 0f       	add	r30, r30
    386c:	97 95       	ror	r25
    386e:	87 95       	ror	r24
    3870:	08 95       	ret

00003872 <__cmpsf2>:
    3872:	d9 d0       	rcall	.+434    	; 0x3a26 <__fp_cmp>
    3874:	08 f4       	brcc	.+2      	; 0x3878 <__cmpsf2+0x6>
    3876:	81 e0       	ldi	r24, 0x01	; 1
    3878:	08 95       	ret

0000387a <__divsf3>:
    387a:	0c d0       	rcall	.+24     	; 0x3894 <__divsf3x>
    387c:	0f c1       	rjmp	.+542    	; 0x3a9c <__fp_round>
    387e:	07 d1       	rcall	.+526    	; 0x3a8e <__fp_pscB>
    3880:	40 f0       	brcs	.+16     	; 0x3892 <__divsf3+0x18>
    3882:	fe d0       	rcall	.+508    	; 0x3a80 <__fp_pscA>
    3884:	30 f0       	brcs	.+12     	; 0x3892 <__divsf3+0x18>
    3886:	21 f4       	brne	.+8      	; 0x3890 <__divsf3+0x16>
    3888:	5f 3f       	cpi	r21, 0xFF	; 255
    388a:	19 f0       	breq	.+6      	; 0x3892 <__divsf3+0x18>
    388c:	f0 c0       	rjmp	.+480    	; 0x3a6e <__fp_inf>
    388e:	51 11       	cpse	r21, r1
    3890:	39 c1       	rjmp	.+626    	; 0x3b04 <__fp_szero>
    3892:	f3 c0       	rjmp	.+486    	; 0x3a7a <__fp_nan>

00003894 <__divsf3x>:
    3894:	14 d1       	rcall	.+552    	; 0x3abe <__fp_split3>
    3896:	98 f3       	brcs	.-26     	; 0x387e <__divsf3+0x4>

00003898 <__divsf3_pse>:
    3898:	99 23       	and	r25, r25
    389a:	c9 f3       	breq	.-14     	; 0x388e <__divsf3+0x14>
    389c:	55 23       	and	r21, r21
    389e:	b1 f3       	breq	.-20     	; 0x388c <__divsf3+0x12>
    38a0:	95 1b       	sub	r25, r21
    38a2:	55 0b       	sbc	r21, r21
    38a4:	bb 27       	eor	r27, r27
    38a6:	aa 27       	eor	r26, r26
    38a8:	62 17       	cp	r22, r18
    38aa:	73 07       	cpc	r23, r19
    38ac:	84 07       	cpc	r24, r20
    38ae:	38 f0       	brcs	.+14     	; 0x38be <__divsf3_pse+0x26>
    38b0:	9f 5f       	subi	r25, 0xFF	; 255
    38b2:	5f 4f       	sbci	r21, 0xFF	; 255
    38b4:	22 0f       	add	r18, r18
    38b6:	33 1f       	adc	r19, r19
    38b8:	44 1f       	adc	r20, r20
    38ba:	aa 1f       	adc	r26, r26
    38bc:	a9 f3       	breq	.-22     	; 0x38a8 <__divsf3_pse+0x10>
    38be:	33 d0       	rcall	.+102    	; 0x3926 <__divsf3_pse+0x8e>
    38c0:	0e 2e       	mov	r0, r30
    38c2:	3a f0       	brmi	.+14     	; 0x38d2 <__divsf3_pse+0x3a>
    38c4:	e0 e8       	ldi	r30, 0x80	; 128
    38c6:	30 d0       	rcall	.+96     	; 0x3928 <__divsf3_pse+0x90>
    38c8:	91 50       	subi	r25, 0x01	; 1
    38ca:	50 40       	sbci	r21, 0x00	; 0
    38cc:	e6 95       	lsr	r30
    38ce:	00 1c       	adc	r0, r0
    38d0:	ca f7       	brpl	.-14     	; 0x38c4 <__divsf3_pse+0x2c>
    38d2:	29 d0       	rcall	.+82     	; 0x3926 <__divsf3_pse+0x8e>
    38d4:	fe 2f       	mov	r31, r30
    38d6:	27 d0       	rcall	.+78     	; 0x3926 <__divsf3_pse+0x8e>
    38d8:	66 0f       	add	r22, r22
    38da:	77 1f       	adc	r23, r23
    38dc:	88 1f       	adc	r24, r24
    38de:	bb 1f       	adc	r27, r27
    38e0:	26 17       	cp	r18, r22
    38e2:	37 07       	cpc	r19, r23
    38e4:	48 07       	cpc	r20, r24
    38e6:	ab 07       	cpc	r26, r27
    38e8:	b0 e8       	ldi	r27, 0x80	; 128
    38ea:	09 f0       	breq	.+2      	; 0x38ee <__divsf3_pse+0x56>
    38ec:	bb 0b       	sbc	r27, r27
    38ee:	80 2d       	mov	r24, r0
    38f0:	bf 01       	movw	r22, r30
    38f2:	ff 27       	eor	r31, r31
    38f4:	93 58       	subi	r25, 0x83	; 131
    38f6:	5f 4f       	sbci	r21, 0xFF	; 255
    38f8:	2a f0       	brmi	.+10     	; 0x3904 <__divsf3_pse+0x6c>
    38fa:	9e 3f       	cpi	r25, 0xFE	; 254
    38fc:	51 05       	cpc	r21, r1
    38fe:	68 f0       	brcs	.+26     	; 0x391a <__divsf3_pse+0x82>
    3900:	b6 c0       	rjmp	.+364    	; 0x3a6e <__fp_inf>
    3902:	00 c1       	rjmp	.+512    	; 0x3b04 <__fp_szero>
    3904:	5f 3f       	cpi	r21, 0xFF	; 255
    3906:	ec f3       	brlt	.-6      	; 0x3902 <__divsf3_pse+0x6a>
    3908:	98 3e       	cpi	r25, 0xE8	; 232
    390a:	dc f3       	brlt	.-10     	; 0x3902 <__divsf3_pse+0x6a>
    390c:	86 95       	lsr	r24
    390e:	77 95       	ror	r23
    3910:	67 95       	ror	r22
    3912:	b7 95       	ror	r27
    3914:	f7 95       	ror	r31
    3916:	9f 5f       	subi	r25, 0xFF	; 255
    3918:	c9 f7       	brne	.-14     	; 0x390c <__divsf3_pse+0x74>
    391a:	88 0f       	add	r24, r24
    391c:	91 1d       	adc	r25, r1
    391e:	96 95       	lsr	r25
    3920:	87 95       	ror	r24
    3922:	97 f9       	bld	r25, 7
    3924:	08 95       	ret
    3926:	e1 e0       	ldi	r30, 0x01	; 1
    3928:	66 0f       	add	r22, r22
    392a:	77 1f       	adc	r23, r23
    392c:	88 1f       	adc	r24, r24
    392e:	bb 1f       	adc	r27, r27
    3930:	62 17       	cp	r22, r18
    3932:	73 07       	cpc	r23, r19
    3934:	84 07       	cpc	r24, r20
    3936:	ba 07       	cpc	r27, r26
    3938:	20 f0       	brcs	.+8      	; 0x3942 <__divsf3_pse+0xaa>
    393a:	62 1b       	sub	r22, r18
    393c:	73 0b       	sbc	r23, r19
    393e:	84 0b       	sbc	r24, r20
    3940:	ba 0b       	sbc	r27, r26
    3942:	ee 1f       	adc	r30, r30
    3944:	88 f7       	brcc	.-30     	; 0x3928 <__divsf3_pse+0x90>
    3946:	e0 95       	com	r30
    3948:	08 95       	ret

0000394a <__fixsfsi>:
    394a:	04 d0       	rcall	.+8      	; 0x3954 <__fixunssfsi>
    394c:	68 94       	set
    394e:	b1 11       	cpse	r27, r1
    3950:	d9 c0       	rjmp	.+434    	; 0x3b04 <__fp_szero>
    3952:	08 95       	ret

00003954 <__fixunssfsi>:
    3954:	bc d0       	rcall	.+376    	; 0x3ace <__fp_splitA>
    3956:	88 f0       	brcs	.+34     	; 0x397a <__fixunssfsi+0x26>
    3958:	9f 57       	subi	r25, 0x7F	; 127
    395a:	90 f0       	brcs	.+36     	; 0x3980 <__fixunssfsi+0x2c>
    395c:	b9 2f       	mov	r27, r25
    395e:	99 27       	eor	r25, r25
    3960:	b7 51       	subi	r27, 0x17	; 23
    3962:	a0 f0       	brcs	.+40     	; 0x398c <__fixunssfsi+0x38>
    3964:	d1 f0       	breq	.+52     	; 0x399a <__fixunssfsi+0x46>
    3966:	66 0f       	add	r22, r22
    3968:	77 1f       	adc	r23, r23
    396a:	88 1f       	adc	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	1a f0       	brmi	.+6      	; 0x3976 <__fixunssfsi+0x22>
    3970:	ba 95       	dec	r27
    3972:	c9 f7       	brne	.-14     	; 0x3966 <__fixunssfsi+0x12>
    3974:	12 c0       	rjmp	.+36     	; 0x399a <__fixunssfsi+0x46>
    3976:	b1 30       	cpi	r27, 0x01	; 1
    3978:	81 f0       	breq	.+32     	; 0x399a <__fixunssfsi+0x46>
    397a:	c3 d0       	rcall	.+390    	; 0x3b02 <__fp_zero>
    397c:	b1 e0       	ldi	r27, 0x01	; 1
    397e:	08 95       	ret
    3980:	c0 c0       	rjmp	.+384    	; 0x3b02 <__fp_zero>
    3982:	67 2f       	mov	r22, r23
    3984:	78 2f       	mov	r23, r24
    3986:	88 27       	eor	r24, r24
    3988:	b8 5f       	subi	r27, 0xF8	; 248
    398a:	39 f0       	breq	.+14     	; 0x399a <__fixunssfsi+0x46>
    398c:	b9 3f       	cpi	r27, 0xF9	; 249
    398e:	cc f3       	brlt	.-14     	; 0x3982 <__fixunssfsi+0x2e>
    3990:	86 95       	lsr	r24
    3992:	77 95       	ror	r23
    3994:	67 95       	ror	r22
    3996:	b3 95       	inc	r27
    3998:	d9 f7       	brne	.-10     	; 0x3990 <__fixunssfsi+0x3c>
    399a:	3e f4       	brtc	.+14     	; 0x39aa <__fixunssfsi+0x56>
    399c:	90 95       	com	r25
    399e:	80 95       	com	r24
    39a0:	70 95       	com	r23
    39a2:	61 95       	neg	r22
    39a4:	7f 4f       	sbci	r23, 0xFF	; 255
    39a6:	8f 4f       	sbci	r24, 0xFF	; 255
    39a8:	9f 4f       	sbci	r25, 0xFF	; 255
    39aa:	08 95       	ret

000039ac <__floatunsisf>:
    39ac:	e8 94       	clt
    39ae:	09 c0       	rjmp	.+18     	; 0x39c2 <__floatsisf+0x12>

000039b0 <__floatsisf>:
    39b0:	97 fb       	bst	r25, 7
    39b2:	3e f4       	brtc	.+14     	; 0x39c2 <__floatsisf+0x12>
    39b4:	90 95       	com	r25
    39b6:	80 95       	com	r24
    39b8:	70 95       	com	r23
    39ba:	61 95       	neg	r22
    39bc:	7f 4f       	sbci	r23, 0xFF	; 255
    39be:	8f 4f       	sbci	r24, 0xFF	; 255
    39c0:	9f 4f       	sbci	r25, 0xFF	; 255
    39c2:	99 23       	and	r25, r25
    39c4:	a9 f0       	breq	.+42     	; 0x39f0 <__floatsisf+0x40>
    39c6:	f9 2f       	mov	r31, r25
    39c8:	96 e9       	ldi	r25, 0x96	; 150
    39ca:	bb 27       	eor	r27, r27
    39cc:	93 95       	inc	r25
    39ce:	f6 95       	lsr	r31
    39d0:	87 95       	ror	r24
    39d2:	77 95       	ror	r23
    39d4:	67 95       	ror	r22
    39d6:	b7 95       	ror	r27
    39d8:	f1 11       	cpse	r31, r1
    39da:	f8 cf       	rjmp	.-16     	; 0x39cc <__floatsisf+0x1c>
    39dc:	fa f4       	brpl	.+62     	; 0x3a1c <__floatsisf+0x6c>
    39de:	bb 0f       	add	r27, r27
    39e0:	11 f4       	brne	.+4      	; 0x39e6 <__floatsisf+0x36>
    39e2:	60 ff       	sbrs	r22, 0
    39e4:	1b c0       	rjmp	.+54     	; 0x3a1c <__floatsisf+0x6c>
    39e6:	6f 5f       	subi	r22, 0xFF	; 255
    39e8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ea:	8f 4f       	sbci	r24, 0xFF	; 255
    39ec:	9f 4f       	sbci	r25, 0xFF	; 255
    39ee:	16 c0       	rjmp	.+44     	; 0x3a1c <__floatsisf+0x6c>
    39f0:	88 23       	and	r24, r24
    39f2:	11 f0       	breq	.+4      	; 0x39f8 <__floatsisf+0x48>
    39f4:	96 e9       	ldi	r25, 0x96	; 150
    39f6:	11 c0       	rjmp	.+34     	; 0x3a1a <__floatsisf+0x6a>
    39f8:	77 23       	and	r23, r23
    39fa:	21 f0       	breq	.+8      	; 0x3a04 <__floatsisf+0x54>
    39fc:	9e e8       	ldi	r25, 0x8E	; 142
    39fe:	87 2f       	mov	r24, r23
    3a00:	76 2f       	mov	r23, r22
    3a02:	05 c0       	rjmp	.+10     	; 0x3a0e <__floatsisf+0x5e>
    3a04:	66 23       	and	r22, r22
    3a06:	71 f0       	breq	.+28     	; 0x3a24 <__floatsisf+0x74>
    3a08:	96 e8       	ldi	r25, 0x86	; 134
    3a0a:	86 2f       	mov	r24, r22
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	2a f0       	brmi	.+10     	; 0x3a1c <__floatsisf+0x6c>
    3a12:	9a 95       	dec	r25
    3a14:	66 0f       	add	r22, r22
    3a16:	77 1f       	adc	r23, r23
    3a18:	88 1f       	adc	r24, r24
    3a1a:	da f7       	brpl	.-10     	; 0x3a12 <__floatsisf+0x62>
    3a1c:	88 0f       	add	r24, r24
    3a1e:	96 95       	lsr	r25
    3a20:	87 95       	ror	r24
    3a22:	97 f9       	bld	r25, 7
    3a24:	08 95       	ret

00003a26 <__fp_cmp>:
    3a26:	99 0f       	add	r25, r25
    3a28:	00 08       	sbc	r0, r0
    3a2a:	55 0f       	add	r21, r21
    3a2c:	aa 0b       	sbc	r26, r26
    3a2e:	e0 e8       	ldi	r30, 0x80	; 128
    3a30:	fe ef       	ldi	r31, 0xFE	; 254
    3a32:	16 16       	cp	r1, r22
    3a34:	17 06       	cpc	r1, r23
    3a36:	e8 07       	cpc	r30, r24
    3a38:	f9 07       	cpc	r31, r25
    3a3a:	c0 f0       	brcs	.+48     	; 0x3a6c <__fp_cmp+0x46>
    3a3c:	12 16       	cp	r1, r18
    3a3e:	13 06       	cpc	r1, r19
    3a40:	e4 07       	cpc	r30, r20
    3a42:	f5 07       	cpc	r31, r21
    3a44:	98 f0       	brcs	.+38     	; 0x3a6c <__fp_cmp+0x46>
    3a46:	62 1b       	sub	r22, r18
    3a48:	73 0b       	sbc	r23, r19
    3a4a:	84 0b       	sbc	r24, r20
    3a4c:	95 0b       	sbc	r25, r21
    3a4e:	39 f4       	brne	.+14     	; 0x3a5e <__fp_cmp+0x38>
    3a50:	0a 26       	eor	r0, r26
    3a52:	61 f0       	breq	.+24     	; 0x3a6c <__fp_cmp+0x46>
    3a54:	23 2b       	or	r18, r19
    3a56:	24 2b       	or	r18, r20
    3a58:	25 2b       	or	r18, r21
    3a5a:	21 f4       	brne	.+8      	; 0x3a64 <__fp_cmp+0x3e>
    3a5c:	08 95       	ret
    3a5e:	0a 26       	eor	r0, r26
    3a60:	09 f4       	brne	.+2      	; 0x3a64 <__fp_cmp+0x3e>
    3a62:	a1 40       	sbci	r26, 0x01	; 1
    3a64:	a6 95       	lsr	r26
    3a66:	8f ef       	ldi	r24, 0xFF	; 255
    3a68:	81 1d       	adc	r24, r1
    3a6a:	81 1d       	adc	r24, r1
    3a6c:	08 95       	ret

00003a6e <__fp_inf>:
    3a6e:	97 f9       	bld	r25, 7
    3a70:	9f 67       	ori	r25, 0x7F	; 127
    3a72:	80 e8       	ldi	r24, 0x80	; 128
    3a74:	70 e0       	ldi	r23, 0x00	; 0
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	08 95       	ret

00003a7a <__fp_nan>:
    3a7a:	9f ef       	ldi	r25, 0xFF	; 255
    3a7c:	80 ec       	ldi	r24, 0xC0	; 192
    3a7e:	08 95       	ret

00003a80 <__fp_pscA>:
    3a80:	00 24       	eor	r0, r0
    3a82:	0a 94       	dec	r0
    3a84:	16 16       	cp	r1, r22
    3a86:	17 06       	cpc	r1, r23
    3a88:	18 06       	cpc	r1, r24
    3a8a:	09 06       	cpc	r0, r25
    3a8c:	08 95       	ret

00003a8e <__fp_pscB>:
    3a8e:	00 24       	eor	r0, r0
    3a90:	0a 94       	dec	r0
    3a92:	12 16       	cp	r1, r18
    3a94:	13 06       	cpc	r1, r19
    3a96:	14 06       	cpc	r1, r20
    3a98:	05 06       	cpc	r0, r21
    3a9a:	08 95       	ret

00003a9c <__fp_round>:
    3a9c:	09 2e       	mov	r0, r25
    3a9e:	03 94       	inc	r0
    3aa0:	00 0c       	add	r0, r0
    3aa2:	11 f4       	brne	.+4      	; 0x3aa8 <__fp_round+0xc>
    3aa4:	88 23       	and	r24, r24
    3aa6:	52 f0       	brmi	.+20     	; 0x3abc <__fp_round+0x20>
    3aa8:	bb 0f       	add	r27, r27
    3aaa:	40 f4       	brcc	.+16     	; 0x3abc <__fp_round+0x20>
    3aac:	bf 2b       	or	r27, r31
    3aae:	11 f4       	brne	.+4      	; 0x3ab4 <__fp_round+0x18>
    3ab0:	60 ff       	sbrs	r22, 0
    3ab2:	04 c0       	rjmp	.+8      	; 0x3abc <__fp_round+0x20>
    3ab4:	6f 5f       	subi	r22, 0xFF	; 255
    3ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    3aba:	9f 4f       	sbci	r25, 0xFF	; 255
    3abc:	08 95       	ret

00003abe <__fp_split3>:
    3abe:	57 fd       	sbrc	r21, 7
    3ac0:	90 58       	subi	r25, 0x80	; 128
    3ac2:	44 0f       	add	r20, r20
    3ac4:	55 1f       	adc	r21, r21
    3ac6:	59 f0       	breq	.+22     	; 0x3ade <__fp_splitA+0x10>
    3ac8:	5f 3f       	cpi	r21, 0xFF	; 255
    3aca:	71 f0       	breq	.+28     	; 0x3ae8 <__fp_splitA+0x1a>
    3acc:	47 95       	ror	r20

00003ace <__fp_splitA>:
    3ace:	88 0f       	add	r24, r24
    3ad0:	97 fb       	bst	r25, 7
    3ad2:	99 1f       	adc	r25, r25
    3ad4:	61 f0       	breq	.+24     	; 0x3aee <__fp_splitA+0x20>
    3ad6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ad8:	79 f0       	breq	.+30     	; 0x3af8 <__fp_splitA+0x2a>
    3ada:	87 95       	ror	r24
    3adc:	08 95       	ret
    3ade:	12 16       	cp	r1, r18
    3ae0:	13 06       	cpc	r1, r19
    3ae2:	14 06       	cpc	r1, r20
    3ae4:	55 1f       	adc	r21, r21
    3ae6:	f2 cf       	rjmp	.-28     	; 0x3acc <__fp_split3+0xe>
    3ae8:	46 95       	lsr	r20
    3aea:	f1 df       	rcall	.-30     	; 0x3ace <__fp_splitA>
    3aec:	08 c0       	rjmp	.+16     	; 0x3afe <__fp_splitA+0x30>
    3aee:	16 16       	cp	r1, r22
    3af0:	17 06       	cpc	r1, r23
    3af2:	18 06       	cpc	r1, r24
    3af4:	99 1f       	adc	r25, r25
    3af6:	f1 cf       	rjmp	.-30     	; 0x3ada <__fp_splitA+0xc>
    3af8:	86 95       	lsr	r24
    3afa:	71 05       	cpc	r23, r1
    3afc:	61 05       	cpc	r22, r1
    3afe:	08 94       	sec
    3b00:	08 95       	ret

00003b02 <__fp_zero>:
    3b02:	e8 94       	clt

00003b04 <__fp_szero>:
    3b04:	bb 27       	eor	r27, r27
    3b06:	66 27       	eor	r22, r22
    3b08:	77 27       	eor	r23, r23
    3b0a:	cb 01       	movw	r24, r22
    3b0c:	97 f9       	bld	r25, 7
    3b0e:	08 95       	ret

00003b10 <log10>:
    3b10:	0a d0       	rcall	.+20     	; 0x3b26 <log>
    3b12:	29 ed       	ldi	r18, 0xD9	; 217
    3b14:	3b e5       	ldi	r19, 0x5B	; 91
    3b16:	4e ed       	ldi	r20, 0xDE	; 222
    3b18:	5e e3       	ldi	r21, 0x3E	; 62
    3b1a:	45 c0       	rjmp	.+138    	; 0x3ba6 <__mulsf3>
    3b1c:	0e f0       	brts	.+2      	; 0x3b20 <log10+0x10>
    3b1e:	65 c1       	rjmp	.+714    	; 0x3dea <__fp_mpack>
    3b20:	ac cf       	rjmp	.-168    	; 0x3a7a <__fp_nan>
    3b22:	68 94       	set
    3b24:	a4 cf       	rjmp	.-184    	; 0x3a6e <__fp_inf>

00003b26 <log>:
    3b26:	d3 df       	rcall	.-90     	; 0x3ace <__fp_splitA>
    3b28:	c8 f3       	brcs	.-14     	; 0x3b1c <log10+0xc>
    3b2a:	99 23       	and	r25, r25
    3b2c:	d1 f3       	breq	.-12     	; 0x3b22 <log10+0x12>
    3b2e:	c6 f3       	brts	.-16     	; 0x3b20 <log10+0x10>
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	1f 93       	push	r17
    3b36:	0f 93       	push	r16
    3b38:	ff 92       	push	r15
    3b3a:	c9 2f       	mov	r28, r25
    3b3c:	dd 27       	eor	r29, r29
    3b3e:	88 23       	and	r24, r24
    3b40:	2a f0       	brmi	.+10     	; 0x3b4c <log+0x26>
    3b42:	21 97       	sbiw	r28, 0x01	; 1
    3b44:	66 0f       	add	r22, r22
    3b46:	77 1f       	adc	r23, r23
    3b48:	88 1f       	adc	r24, r24
    3b4a:	da f7       	brpl	.-10     	; 0x3b42 <log+0x1c>
    3b4c:	20 e0       	ldi	r18, 0x00	; 0
    3b4e:	30 e0       	ldi	r19, 0x00	; 0
    3b50:	40 e8       	ldi	r20, 0x80	; 128
    3b52:	5f eb       	ldi	r21, 0xBF	; 191
    3b54:	9f e3       	ldi	r25, 0x3F	; 63
    3b56:	88 39       	cpi	r24, 0x98	; 152
    3b58:	20 f0       	brcs	.+8      	; 0x3b62 <log+0x3c>
    3b5a:	80 3e       	cpi	r24, 0xE0	; 224
    3b5c:	30 f0       	brcs	.+12     	; 0x3b6a <log+0x44>
    3b5e:	21 96       	adiw	r28, 0x01	; 1
    3b60:	8f 77       	andi	r24, 0x7F	; 127
    3b62:	23 de       	rcall	.-954    	; 0x37aa <__addsf3>
    3b64:	e4 e5       	ldi	r30, 0x54	; 84
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	03 c0       	rjmp	.+6      	; 0x3b70 <log+0x4a>
    3b6a:	1f de       	rcall	.-962    	; 0x37aa <__addsf3>
    3b6c:	e1 e8       	ldi	r30, 0x81	; 129
    3b6e:	f0 e0       	ldi	r31, 0x00	; 0
    3b70:	51 d1       	rcall	.+674    	; 0x3e14 <__fp_powser>
    3b72:	8b 01       	movw	r16, r22
    3b74:	be 01       	movw	r22, r28
    3b76:	ec 01       	movw	r28, r24
    3b78:	fb 2e       	mov	r15, r27
    3b7a:	6f 57       	subi	r22, 0x7F	; 127
    3b7c:	71 09       	sbc	r23, r1
    3b7e:	75 95       	asr	r23
    3b80:	77 1f       	adc	r23, r23
    3b82:	88 0b       	sbc	r24, r24
    3b84:	99 0b       	sbc	r25, r25
    3b86:	14 df       	rcall	.-472    	; 0x39b0 <__floatsisf>
    3b88:	28 e1       	ldi	r18, 0x18	; 24
    3b8a:	32 e7       	ldi	r19, 0x72	; 114
    3b8c:	41 e3       	ldi	r20, 0x31	; 49
    3b8e:	5f e3       	ldi	r21, 0x3F	; 63
    3b90:	16 d0       	rcall	.+44     	; 0x3bbe <__mulsf3x>
    3b92:	af 2d       	mov	r26, r15
    3b94:	98 01       	movw	r18, r16
    3b96:	ae 01       	movw	r20, r28
    3b98:	ff 90       	pop	r15
    3b9a:	0f 91       	pop	r16
    3b9c:	1f 91       	pop	r17
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	14 de       	rcall	.-984    	; 0x37cc <__addsf3x>
    3ba4:	7b cf       	rjmp	.-266    	; 0x3a9c <__fp_round>

00003ba6 <__mulsf3>:
    3ba6:	0b d0       	rcall	.+22     	; 0x3bbe <__mulsf3x>
    3ba8:	79 cf       	rjmp	.-270    	; 0x3a9c <__fp_round>
    3baa:	6a df       	rcall	.-300    	; 0x3a80 <__fp_pscA>
    3bac:	28 f0       	brcs	.+10     	; 0x3bb8 <__mulsf3+0x12>
    3bae:	6f df       	rcall	.-290    	; 0x3a8e <__fp_pscB>
    3bb0:	18 f0       	brcs	.+6      	; 0x3bb8 <__mulsf3+0x12>
    3bb2:	95 23       	and	r25, r21
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <__mulsf3+0x12>
    3bb6:	5b cf       	rjmp	.-330    	; 0x3a6e <__fp_inf>
    3bb8:	60 cf       	rjmp	.-320    	; 0x3a7a <__fp_nan>
    3bba:	11 24       	eor	r1, r1
    3bbc:	a3 cf       	rjmp	.-186    	; 0x3b04 <__fp_szero>

00003bbe <__mulsf3x>:
    3bbe:	7f df       	rcall	.-258    	; 0x3abe <__fp_split3>
    3bc0:	a0 f3       	brcs	.-24     	; 0x3baa <__mulsf3+0x4>

00003bc2 <__mulsf3_pse>:
    3bc2:	95 9f       	mul	r25, r21
    3bc4:	d1 f3       	breq	.-12     	; 0x3bba <__mulsf3+0x14>
    3bc6:	95 0f       	add	r25, r21
    3bc8:	50 e0       	ldi	r21, 0x00	; 0
    3bca:	55 1f       	adc	r21, r21
    3bcc:	62 9f       	mul	r22, r18
    3bce:	f0 01       	movw	r30, r0
    3bd0:	72 9f       	mul	r23, r18
    3bd2:	bb 27       	eor	r27, r27
    3bd4:	f0 0d       	add	r31, r0
    3bd6:	b1 1d       	adc	r27, r1
    3bd8:	63 9f       	mul	r22, r19
    3bda:	aa 27       	eor	r26, r26
    3bdc:	f0 0d       	add	r31, r0
    3bde:	b1 1d       	adc	r27, r1
    3be0:	aa 1f       	adc	r26, r26
    3be2:	64 9f       	mul	r22, r20
    3be4:	66 27       	eor	r22, r22
    3be6:	b0 0d       	add	r27, r0
    3be8:	a1 1d       	adc	r26, r1
    3bea:	66 1f       	adc	r22, r22
    3bec:	82 9f       	mul	r24, r18
    3bee:	22 27       	eor	r18, r18
    3bf0:	b0 0d       	add	r27, r0
    3bf2:	a1 1d       	adc	r26, r1
    3bf4:	62 1f       	adc	r22, r18
    3bf6:	73 9f       	mul	r23, r19
    3bf8:	b0 0d       	add	r27, r0
    3bfa:	a1 1d       	adc	r26, r1
    3bfc:	62 1f       	adc	r22, r18
    3bfe:	83 9f       	mul	r24, r19
    3c00:	a0 0d       	add	r26, r0
    3c02:	61 1d       	adc	r22, r1
    3c04:	22 1f       	adc	r18, r18
    3c06:	74 9f       	mul	r23, r20
    3c08:	33 27       	eor	r19, r19
    3c0a:	a0 0d       	add	r26, r0
    3c0c:	61 1d       	adc	r22, r1
    3c0e:	23 1f       	adc	r18, r19
    3c10:	84 9f       	mul	r24, r20
    3c12:	60 0d       	add	r22, r0
    3c14:	21 1d       	adc	r18, r1
    3c16:	82 2f       	mov	r24, r18
    3c18:	76 2f       	mov	r23, r22
    3c1a:	6a 2f       	mov	r22, r26
    3c1c:	11 24       	eor	r1, r1
    3c1e:	9f 57       	subi	r25, 0x7F	; 127
    3c20:	50 40       	sbci	r21, 0x00	; 0
    3c22:	8a f0       	brmi	.+34     	; 0x3c46 <__mulsf3_pse+0x84>
    3c24:	e1 f0       	breq	.+56     	; 0x3c5e <__mulsf3_pse+0x9c>
    3c26:	88 23       	and	r24, r24
    3c28:	4a f0       	brmi	.+18     	; 0x3c3c <__mulsf3_pse+0x7a>
    3c2a:	ee 0f       	add	r30, r30
    3c2c:	ff 1f       	adc	r31, r31
    3c2e:	bb 1f       	adc	r27, r27
    3c30:	66 1f       	adc	r22, r22
    3c32:	77 1f       	adc	r23, r23
    3c34:	88 1f       	adc	r24, r24
    3c36:	91 50       	subi	r25, 0x01	; 1
    3c38:	50 40       	sbci	r21, 0x00	; 0
    3c3a:	a9 f7       	brne	.-22     	; 0x3c26 <__mulsf3_pse+0x64>
    3c3c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c3e:	51 05       	cpc	r21, r1
    3c40:	70 f0       	brcs	.+28     	; 0x3c5e <__mulsf3_pse+0x9c>
    3c42:	15 cf       	rjmp	.-470    	; 0x3a6e <__fp_inf>
    3c44:	5f cf       	rjmp	.-322    	; 0x3b04 <__fp_szero>
    3c46:	5f 3f       	cpi	r21, 0xFF	; 255
    3c48:	ec f3       	brlt	.-6      	; 0x3c44 <__mulsf3_pse+0x82>
    3c4a:	98 3e       	cpi	r25, 0xE8	; 232
    3c4c:	dc f3       	brlt	.-10     	; 0x3c44 <__mulsf3_pse+0x82>
    3c4e:	86 95       	lsr	r24
    3c50:	77 95       	ror	r23
    3c52:	67 95       	ror	r22
    3c54:	b7 95       	ror	r27
    3c56:	f7 95       	ror	r31
    3c58:	e7 95       	ror	r30
    3c5a:	9f 5f       	subi	r25, 0xFF	; 255
    3c5c:	c1 f7       	brne	.-16     	; 0x3c4e <__mulsf3_pse+0x8c>
    3c5e:	fe 2b       	or	r31, r30
    3c60:	88 0f       	add	r24, r24
    3c62:	91 1d       	adc	r25, r1
    3c64:	96 95       	lsr	r25
    3c66:	87 95       	ror	r24
    3c68:	97 f9       	bld	r25, 7
    3c6a:	08 95       	ret

00003c6c <pow>:
    3c6c:	fa 01       	movw	r30, r20
    3c6e:	ee 0f       	add	r30, r30
    3c70:	ff 1f       	adc	r31, r31
    3c72:	30 96       	adiw	r30, 0x00	; 0
    3c74:	21 05       	cpc	r18, r1
    3c76:	31 05       	cpc	r19, r1
    3c78:	99 f1       	breq	.+102    	; 0x3ce0 <pow+0x74>
    3c7a:	61 15       	cp	r22, r1
    3c7c:	71 05       	cpc	r23, r1
    3c7e:	61 f4       	brne	.+24     	; 0x3c98 <pow+0x2c>
    3c80:	80 38       	cpi	r24, 0x80	; 128
    3c82:	bf e3       	ldi	r27, 0x3F	; 63
    3c84:	9b 07       	cpc	r25, r27
    3c86:	49 f1       	breq	.+82     	; 0x3cda <pow+0x6e>
    3c88:	68 94       	set
    3c8a:	90 38       	cpi	r25, 0x80	; 128
    3c8c:	81 05       	cpc	r24, r1
    3c8e:	61 f0       	breq	.+24     	; 0x3ca8 <pow+0x3c>
    3c90:	80 38       	cpi	r24, 0x80	; 128
    3c92:	bf ef       	ldi	r27, 0xFF	; 255
    3c94:	9b 07       	cpc	r25, r27
    3c96:	41 f0       	breq	.+16     	; 0x3ca8 <pow+0x3c>
    3c98:	99 23       	and	r25, r25
    3c9a:	42 f5       	brpl	.+80     	; 0x3cec <pow+0x80>
    3c9c:	ff 3f       	cpi	r31, 0xFF	; 255
    3c9e:	e1 05       	cpc	r30, r1
    3ca0:	31 05       	cpc	r19, r1
    3ca2:	21 05       	cpc	r18, r1
    3ca4:	11 f1       	breq	.+68     	; 0x3cea <pow+0x7e>
    3ca6:	e8 94       	clt
    3ca8:	08 94       	sec
    3caa:	e7 95       	ror	r30
    3cac:	d9 01       	movw	r26, r18
    3cae:	aa 23       	and	r26, r26
    3cb0:	29 f4       	brne	.+10     	; 0x3cbc <pow+0x50>
    3cb2:	ab 2f       	mov	r26, r27
    3cb4:	be 2f       	mov	r27, r30
    3cb6:	f8 5f       	subi	r31, 0xF8	; 248
    3cb8:	d0 f3       	brcs	.-12     	; 0x3cae <pow+0x42>
    3cba:	10 c0       	rjmp	.+32     	; 0x3cdc <pow+0x70>
    3cbc:	ff 5f       	subi	r31, 0xFF	; 255
    3cbe:	70 f4       	brcc	.+28     	; 0x3cdc <pow+0x70>
    3cc0:	a6 95       	lsr	r26
    3cc2:	e0 f7       	brcc	.-8      	; 0x3cbc <pow+0x50>
    3cc4:	f7 39       	cpi	r31, 0x97	; 151
    3cc6:	50 f0       	brcs	.+20     	; 0x3cdc <pow+0x70>
    3cc8:	19 f0       	breq	.+6      	; 0x3cd0 <pow+0x64>
    3cca:	ff 3a       	cpi	r31, 0xAF	; 175
    3ccc:	38 f4       	brcc	.+14     	; 0x3cdc <pow+0x70>
    3cce:	9f 77       	andi	r25, 0x7F	; 127
    3cd0:	9f 93       	push	r25
    3cd2:	0c d0       	rcall	.+24     	; 0x3cec <pow+0x80>
    3cd4:	0f 90       	pop	r0
    3cd6:	07 fc       	sbrc	r0, 7
    3cd8:	90 58       	subi	r25, 0x80	; 128
    3cda:	08 95       	ret
    3cdc:	3e f0       	brts	.+14     	; 0x3cec <pow+0x80>
    3cde:	cd ce       	rjmp	.-614    	; 0x3a7a <__fp_nan>
    3ce0:	60 e0       	ldi	r22, 0x00	; 0
    3ce2:	70 e0       	ldi	r23, 0x00	; 0
    3ce4:	80 e8       	ldi	r24, 0x80	; 128
    3ce6:	9f e3       	ldi	r25, 0x3F	; 63
    3ce8:	08 95       	ret
    3cea:	4f e7       	ldi	r20, 0x7F	; 127
    3cec:	9f 77       	andi	r25, 0x7F	; 127
    3cee:	5f 93       	push	r21
    3cf0:	4f 93       	push	r20
    3cf2:	3f 93       	push	r19
    3cf4:	2f 93       	push	r18
    3cf6:	17 df       	rcall	.-466    	; 0x3b26 <log>
    3cf8:	2f 91       	pop	r18
    3cfa:	3f 91       	pop	r19
    3cfc:	4f 91       	pop	r20
    3cfe:	5f 91       	pop	r21
    3d00:	52 df       	rcall	.-348    	; 0x3ba6 <__mulsf3>
    3d02:	47 c0       	rjmp	.+142    	; 0x3d92 <exp>
    3d04:	11 f4       	brne	.+4      	; 0x3d0a <pow+0x9e>
    3d06:	0e f4       	brtc	.+2      	; 0x3d0a <pow+0x9e>
    3d08:	b8 ce       	rjmp	.-656    	; 0x3a7a <__fp_nan>
    3d0a:	6f c0       	rjmp	.+222    	; 0x3dea <__fp_mpack>

00003d0c <sqrt>:
    3d0c:	e0 de       	rcall	.-576    	; 0x3ace <__fp_splitA>
    3d0e:	d0 f3       	brcs	.-12     	; 0x3d04 <pow+0x98>
    3d10:	99 23       	and	r25, r25
    3d12:	d9 f3       	breq	.-10     	; 0x3d0a <pow+0x9e>
    3d14:	ce f3       	brts	.-14     	; 0x3d08 <pow+0x9c>
    3d16:	9f 57       	subi	r25, 0x7F	; 127
    3d18:	55 0b       	sbc	r21, r21
    3d1a:	87 ff       	sbrs	r24, 7
    3d1c:	74 d0       	rcall	.+232    	; 0x3e06 <__fp_norm2>
    3d1e:	00 24       	eor	r0, r0
    3d20:	a0 e6       	ldi	r26, 0x60	; 96
    3d22:	40 ea       	ldi	r20, 0xA0	; 160
    3d24:	90 01       	movw	r18, r0
    3d26:	80 58       	subi	r24, 0x80	; 128
    3d28:	56 95       	lsr	r21
    3d2a:	97 95       	ror	r25
    3d2c:	28 f4       	brcc	.+10     	; 0x3d38 <sqrt+0x2c>
    3d2e:	80 5c       	subi	r24, 0xC0	; 192
    3d30:	66 0f       	add	r22, r22
    3d32:	77 1f       	adc	r23, r23
    3d34:	88 1f       	adc	r24, r24
    3d36:	20 f0       	brcs	.+8      	; 0x3d40 <sqrt+0x34>
    3d38:	26 17       	cp	r18, r22
    3d3a:	37 07       	cpc	r19, r23
    3d3c:	48 07       	cpc	r20, r24
    3d3e:	30 f4       	brcc	.+12     	; 0x3d4c <sqrt+0x40>
    3d40:	62 1b       	sub	r22, r18
    3d42:	73 0b       	sbc	r23, r19
    3d44:	84 0b       	sbc	r24, r20
    3d46:	20 29       	or	r18, r0
    3d48:	31 29       	or	r19, r1
    3d4a:	4a 2b       	or	r20, r26
    3d4c:	a6 95       	lsr	r26
    3d4e:	17 94       	ror	r1
    3d50:	07 94       	ror	r0
    3d52:	20 25       	eor	r18, r0
    3d54:	31 25       	eor	r19, r1
    3d56:	4a 27       	eor	r20, r26
    3d58:	58 f7       	brcc	.-42     	; 0x3d30 <sqrt+0x24>
    3d5a:	66 0f       	add	r22, r22
    3d5c:	77 1f       	adc	r23, r23
    3d5e:	88 1f       	adc	r24, r24
    3d60:	20 f0       	brcs	.+8      	; 0x3d6a <sqrt+0x5e>
    3d62:	26 17       	cp	r18, r22
    3d64:	37 07       	cpc	r19, r23
    3d66:	48 07       	cpc	r20, r24
    3d68:	30 f4       	brcc	.+12     	; 0x3d76 <sqrt+0x6a>
    3d6a:	62 0b       	sbc	r22, r18
    3d6c:	73 0b       	sbc	r23, r19
    3d6e:	84 0b       	sbc	r24, r20
    3d70:	20 0d       	add	r18, r0
    3d72:	31 1d       	adc	r19, r1
    3d74:	41 1d       	adc	r20, r1
    3d76:	a0 95       	com	r26
    3d78:	81 f7       	brne	.-32     	; 0x3d5a <sqrt+0x4e>
    3d7a:	b9 01       	movw	r22, r18
    3d7c:	84 2f       	mov	r24, r20
    3d7e:	91 58       	subi	r25, 0x81	; 129
    3d80:	88 0f       	add	r24, r24
    3d82:	96 95       	lsr	r25
    3d84:	87 95       	ror	r24
    3d86:	08 95       	ret
    3d88:	19 f4       	brne	.+6      	; 0x3d90 <sqrt+0x84>
    3d8a:	0e f0       	brts	.+2      	; 0x3d8e <sqrt+0x82>
    3d8c:	70 ce       	rjmp	.-800    	; 0x3a6e <__fp_inf>
    3d8e:	b9 ce       	rjmp	.-654    	; 0x3b02 <__fp_zero>
    3d90:	74 ce       	rjmp	.-792    	; 0x3a7a <__fp_nan>

00003d92 <exp>:
    3d92:	9d de       	rcall	.-710    	; 0x3ace <__fp_splitA>
    3d94:	c8 f3       	brcs	.-14     	; 0x3d88 <sqrt+0x7c>
    3d96:	96 38       	cpi	r25, 0x86	; 134
    3d98:	c0 f7       	brcc	.-16     	; 0x3d8a <sqrt+0x7e>
    3d9a:	07 f8       	bld	r0, 7
    3d9c:	0f 92       	push	r0
    3d9e:	e8 94       	clt
    3da0:	2b e3       	ldi	r18, 0x3B	; 59
    3da2:	3a ea       	ldi	r19, 0xAA	; 170
    3da4:	48 eb       	ldi	r20, 0xB8	; 184
    3da6:	5f e7       	ldi	r21, 0x7F	; 127
    3da8:	0c df       	rcall	.-488    	; 0x3bc2 <__mulsf3_pse>
    3daa:	0f 92       	push	r0
    3dac:	0f 92       	push	r0
    3dae:	0f 92       	push	r0
    3db0:	4d b7       	in	r20, 0x3d	; 61
    3db2:	5e b7       	in	r21, 0x3e	; 62
    3db4:	0f 92       	push	r0
    3db6:	90 d0       	rcall	.+288    	; 0x3ed8 <modf>
    3db8:	ee ea       	ldi	r30, 0xAE	; 174
    3dba:	f0 e0       	ldi	r31, 0x00	; 0
    3dbc:	2b d0       	rcall	.+86     	; 0x3e14 <__fp_powser>
    3dbe:	4f 91       	pop	r20
    3dc0:	5f 91       	pop	r21
    3dc2:	ef 91       	pop	r30
    3dc4:	ff 91       	pop	r31
    3dc6:	e5 95       	asr	r30
    3dc8:	ee 1f       	adc	r30, r30
    3dca:	ff 1f       	adc	r31, r31
    3dcc:	49 f0       	breq	.+18     	; 0x3de0 <exp+0x4e>
    3dce:	fe 57       	subi	r31, 0x7E	; 126
    3dd0:	e0 68       	ori	r30, 0x80	; 128
    3dd2:	44 27       	eor	r20, r20
    3dd4:	ee 0f       	add	r30, r30
    3dd6:	44 1f       	adc	r20, r20
    3dd8:	fa 95       	dec	r31
    3dda:	e1 f7       	brne	.-8      	; 0x3dd4 <exp+0x42>
    3ddc:	41 95       	neg	r20
    3dde:	55 0b       	sbc	r21, r21
    3de0:	47 d0       	rcall	.+142    	; 0x3e70 <ldexp>
    3de2:	0f 90       	pop	r0
    3de4:	07 fe       	sbrs	r0, 7
    3de6:	3b c0       	rjmp	.+118    	; 0x3e5e <inverse>
    3de8:	08 95       	ret

00003dea <__fp_mpack>:
    3dea:	9f 3f       	cpi	r25, 0xFF	; 255
    3dec:	31 f0       	breq	.+12     	; 0x3dfa <__fp_mpack_finite+0xc>

00003dee <__fp_mpack_finite>:
    3dee:	91 50       	subi	r25, 0x01	; 1
    3df0:	20 f4       	brcc	.+8      	; 0x3dfa <__fp_mpack_finite+0xc>
    3df2:	87 95       	ror	r24
    3df4:	77 95       	ror	r23
    3df6:	67 95       	ror	r22
    3df8:	b7 95       	ror	r27
    3dfa:	88 0f       	add	r24, r24
    3dfc:	91 1d       	adc	r25, r1
    3dfe:	96 95       	lsr	r25
    3e00:	87 95       	ror	r24
    3e02:	97 f9       	bld	r25, 7
    3e04:	08 95       	ret

00003e06 <__fp_norm2>:
    3e06:	91 50       	subi	r25, 0x01	; 1
    3e08:	50 40       	sbci	r21, 0x00	; 0
    3e0a:	66 0f       	add	r22, r22
    3e0c:	77 1f       	adc	r23, r23
    3e0e:	88 1f       	adc	r24, r24
    3e10:	d2 f7       	brpl	.-12     	; 0x3e06 <__fp_norm2>
    3e12:	08 95       	ret

00003e14 <__fp_powser>:
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	1f 93       	push	r17
    3e1a:	0f 93       	push	r16
    3e1c:	ff 92       	push	r15
    3e1e:	ef 92       	push	r14
    3e20:	df 92       	push	r13
    3e22:	7b 01       	movw	r14, r22
    3e24:	8c 01       	movw	r16, r24
    3e26:	68 94       	set
    3e28:	05 c0       	rjmp	.+10     	; 0x3e34 <__fp_powser+0x20>
    3e2a:	da 2e       	mov	r13, r26
    3e2c:	ef 01       	movw	r28, r30
    3e2e:	c7 de       	rcall	.-626    	; 0x3bbe <__mulsf3x>
    3e30:	fe 01       	movw	r30, r28
    3e32:	e8 94       	clt
    3e34:	a5 91       	lpm	r26, Z+
    3e36:	25 91       	lpm	r18, Z+
    3e38:	35 91       	lpm	r19, Z+
    3e3a:	45 91       	lpm	r20, Z+
    3e3c:	55 91       	lpm	r21, Z+
    3e3e:	ae f3       	brts	.-22     	; 0x3e2a <__fp_powser+0x16>
    3e40:	ef 01       	movw	r28, r30
    3e42:	c4 dc       	rcall	.-1656   	; 0x37cc <__addsf3x>
    3e44:	fe 01       	movw	r30, r28
    3e46:	97 01       	movw	r18, r14
    3e48:	a8 01       	movw	r20, r16
    3e4a:	da 94       	dec	r13
    3e4c:	79 f7       	brne	.-34     	; 0x3e2c <__fp_powser+0x18>
    3e4e:	df 90       	pop	r13
    3e50:	ef 90       	pop	r14
    3e52:	ff 90       	pop	r15
    3e54:	0f 91       	pop	r16
    3e56:	1f 91       	pop	r17
    3e58:	cf 91       	pop	r28
    3e5a:	df 91       	pop	r29
    3e5c:	08 95       	ret

00003e5e <inverse>:
    3e5e:	9b 01       	movw	r18, r22
    3e60:	ac 01       	movw	r20, r24
    3e62:	60 e0       	ldi	r22, 0x00	; 0
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	80 e8       	ldi	r24, 0x80	; 128
    3e68:	9f e3       	ldi	r25, 0x3F	; 63
    3e6a:	07 cd       	rjmp	.-1522   	; 0x387a <__divsf3>
    3e6c:	00 ce       	rjmp	.-1024   	; 0x3a6e <__fp_inf>
    3e6e:	bd cf       	rjmp	.-134    	; 0x3dea <__fp_mpack>

00003e70 <ldexp>:
    3e70:	2e de       	rcall	.-932    	; 0x3ace <__fp_splitA>
    3e72:	e8 f3       	brcs	.-6      	; 0x3e6e <inverse+0x10>
    3e74:	99 23       	and	r25, r25
    3e76:	d9 f3       	breq	.-10     	; 0x3e6e <inverse+0x10>
    3e78:	94 0f       	add	r25, r20
    3e7a:	51 1d       	adc	r21, r1
    3e7c:	bb f3       	brvs	.-18     	; 0x3e6c <inverse+0xe>
    3e7e:	91 50       	subi	r25, 0x01	; 1
    3e80:	50 40       	sbci	r21, 0x00	; 0
    3e82:	94 f0       	brlt	.+36     	; 0x3ea8 <ldexp+0x38>
    3e84:	59 f0       	breq	.+22     	; 0x3e9c <ldexp+0x2c>
    3e86:	88 23       	and	r24, r24
    3e88:	32 f0       	brmi	.+12     	; 0x3e96 <ldexp+0x26>
    3e8a:	66 0f       	add	r22, r22
    3e8c:	77 1f       	adc	r23, r23
    3e8e:	88 1f       	adc	r24, r24
    3e90:	91 50       	subi	r25, 0x01	; 1
    3e92:	50 40       	sbci	r21, 0x00	; 0
    3e94:	c1 f7       	brne	.-16     	; 0x3e86 <ldexp+0x16>
    3e96:	9e 3f       	cpi	r25, 0xFE	; 254
    3e98:	51 05       	cpc	r21, r1
    3e9a:	44 f7       	brge	.-48     	; 0x3e6c <inverse+0xe>
    3e9c:	88 0f       	add	r24, r24
    3e9e:	91 1d       	adc	r25, r1
    3ea0:	96 95       	lsr	r25
    3ea2:	87 95       	ror	r24
    3ea4:	97 f9       	bld	r25, 7
    3ea6:	08 95       	ret
    3ea8:	5f 3f       	cpi	r21, 0xFF	; 255
    3eaa:	ac f0       	brlt	.+42     	; 0x3ed6 <ldexp+0x66>
    3eac:	98 3e       	cpi	r25, 0xE8	; 232
    3eae:	9c f0       	brlt	.+38     	; 0x3ed6 <ldexp+0x66>
    3eb0:	bb 27       	eor	r27, r27
    3eb2:	86 95       	lsr	r24
    3eb4:	77 95       	ror	r23
    3eb6:	67 95       	ror	r22
    3eb8:	b7 95       	ror	r27
    3eba:	08 f4       	brcc	.+2      	; 0x3ebe <ldexp+0x4e>
    3ebc:	b1 60       	ori	r27, 0x01	; 1
    3ebe:	93 95       	inc	r25
    3ec0:	c1 f7       	brne	.-16     	; 0x3eb2 <ldexp+0x42>
    3ec2:	bb 0f       	add	r27, r27
    3ec4:	58 f7       	brcc	.-42     	; 0x3e9c <ldexp+0x2c>
    3ec6:	11 f4       	brne	.+4      	; 0x3ecc <ldexp+0x5c>
    3ec8:	60 ff       	sbrs	r22, 0
    3eca:	e8 cf       	rjmp	.-48     	; 0x3e9c <ldexp+0x2c>
    3ecc:	6f 5f       	subi	r22, 0xFF	; 255
    3ece:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed4:	e3 cf       	rjmp	.-58     	; 0x3e9c <ldexp+0x2c>
    3ed6:	16 ce       	rjmp	.-980    	; 0x3b04 <__fp_szero>

00003ed8 <modf>:
    3ed8:	fa 01       	movw	r30, r20
    3eda:	dc 01       	movw	r26, r24
    3edc:	aa 0f       	add	r26, r26
    3ede:	bb 1f       	adc	r27, r27
    3ee0:	9b 01       	movw	r18, r22
    3ee2:	ac 01       	movw	r20, r24
    3ee4:	bf 57       	subi	r27, 0x7F	; 127
    3ee6:	28 f4       	brcc	.+10     	; 0x3ef2 <modf+0x1a>
    3ee8:	22 27       	eor	r18, r18
    3eea:	33 27       	eor	r19, r19
    3eec:	44 27       	eor	r20, r20
    3eee:	50 78       	andi	r21, 0x80	; 128
    3ef0:	1f c0       	rjmp	.+62     	; 0x3f30 <modf+0x58>
    3ef2:	b7 51       	subi	r27, 0x17	; 23
    3ef4:	88 f4       	brcc	.+34     	; 0x3f18 <modf+0x40>
    3ef6:	ab 2f       	mov	r26, r27
    3ef8:	00 24       	eor	r0, r0
    3efa:	46 95       	lsr	r20
    3efc:	37 95       	ror	r19
    3efe:	27 95       	ror	r18
    3f00:	01 1c       	adc	r0, r1
    3f02:	a3 95       	inc	r26
    3f04:	d2 f3       	brmi	.-12     	; 0x3efa <modf+0x22>
    3f06:	00 20       	and	r0, r0
    3f08:	69 f0       	breq	.+26     	; 0x3f24 <modf+0x4c>
    3f0a:	22 0f       	add	r18, r18
    3f0c:	33 1f       	adc	r19, r19
    3f0e:	44 1f       	adc	r20, r20
    3f10:	b3 95       	inc	r27
    3f12:	da f3       	brmi	.-10     	; 0x3f0a <modf+0x32>
    3f14:	0d d0       	rcall	.+26     	; 0x3f30 <modf+0x58>
    3f16:	48 cc       	rjmp	.-1904   	; 0x37a8 <__subsf3>
    3f18:	61 30       	cpi	r22, 0x01	; 1
    3f1a:	71 05       	cpc	r23, r1
    3f1c:	a0 e8       	ldi	r26, 0x80	; 128
    3f1e:	8a 07       	cpc	r24, r26
    3f20:	b9 46       	sbci	r27, 0x69	; 105
    3f22:	30 f4       	brcc	.+12     	; 0x3f30 <modf+0x58>
    3f24:	9b 01       	movw	r18, r22
    3f26:	ac 01       	movw	r20, r24
    3f28:	66 27       	eor	r22, r22
    3f2a:	77 27       	eor	r23, r23
    3f2c:	88 27       	eor	r24, r24
    3f2e:	90 78       	andi	r25, 0x80	; 128
    3f30:	30 96       	adiw	r30, 0x00	; 0
    3f32:	21 f0       	breq	.+8      	; 0x3f3c <modf+0x64>
    3f34:	20 83       	st	Z, r18
    3f36:	31 83       	std	Z+1, r19	; 0x01
    3f38:	42 83       	std	Z+2, r20	; 0x02
    3f3a:	53 83       	std	Z+3, r21	; 0x03
    3f3c:	08 95       	ret

00003f3e <__mulsi3>:
    3f3e:	62 9f       	mul	r22, r18
    3f40:	d0 01       	movw	r26, r0
    3f42:	73 9f       	mul	r23, r19
    3f44:	f0 01       	movw	r30, r0
    3f46:	82 9f       	mul	r24, r18
    3f48:	e0 0d       	add	r30, r0
    3f4a:	f1 1d       	adc	r31, r1
    3f4c:	64 9f       	mul	r22, r20
    3f4e:	e0 0d       	add	r30, r0
    3f50:	f1 1d       	adc	r31, r1
    3f52:	92 9f       	mul	r25, r18
    3f54:	f0 0d       	add	r31, r0
    3f56:	83 9f       	mul	r24, r19
    3f58:	f0 0d       	add	r31, r0
    3f5a:	74 9f       	mul	r23, r20
    3f5c:	f0 0d       	add	r31, r0
    3f5e:	65 9f       	mul	r22, r21
    3f60:	f0 0d       	add	r31, r0
    3f62:	99 27       	eor	r25, r25
    3f64:	72 9f       	mul	r23, r18
    3f66:	b0 0d       	add	r27, r0
    3f68:	e1 1d       	adc	r30, r1
    3f6a:	f9 1f       	adc	r31, r25
    3f6c:	63 9f       	mul	r22, r19
    3f6e:	b0 0d       	add	r27, r0
    3f70:	e1 1d       	adc	r30, r1
    3f72:	f9 1f       	adc	r31, r25
    3f74:	bd 01       	movw	r22, r26
    3f76:	cf 01       	movw	r24, r30
    3f78:	11 24       	eor	r1, r1
    3f7a:	08 95       	ret

00003f7c <__udivmodqi4>:
    3f7c:	99 1b       	sub	r25, r25
    3f7e:	79 e0       	ldi	r23, 0x09	; 9
    3f80:	04 c0       	rjmp	.+8      	; 0x3f8a <__udivmodqi4_ep>

00003f82 <__udivmodqi4_loop>:
    3f82:	99 1f       	adc	r25, r25
    3f84:	96 17       	cp	r25, r22
    3f86:	08 f0       	brcs	.+2      	; 0x3f8a <__udivmodqi4_ep>
    3f88:	96 1b       	sub	r25, r22

00003f8a <__udivmodqi4_ep>:
    3f8a:	88 1f       	adc	r24, r24
    3f8c:	7a 95       	dec	r23
    3f8e:	c9 f7       	brne	.-14     	; 0x3f82 <__udivmodqi4_loop>
    3f90:	80 95       	com	r24
    3f92:	08 95       	ret

00003f94 <__divmodqi4>:
    3f94:	87 fb       	bst	r24, 7
    3f96:	08 2e       	mov	r0, r24
    3f98:	06 26       	eor	r0, r22
    3f9a:	87 fd       	sbrc	r24, 7
    3f9c:	81 95       	neg	r24
    3f9e:	67 fd       	sbrc	r22, 7
    3fa0:	61 95       	neg	r22
    3fa2:	ec df       	rcall	.-40     	; 0x3f7c <__udivmodqi4>
    3fa4:	0e f4       	brtc	.+2      	; 0x3fa8 <__divmodqi4_1>
    3fa6:	91 95       	neg	r25

00003fa8 <__divmodqi4_1>:
    3fa8:	07 fc       	sbrc	r0, 7
    3faa:	81 95       	neg	r24

00003fac <__divmodqi4_exit>:
    3fac:	08 95       	ret

00003fae <__udivmodhi4>:
    3fae:	aa 1b       	sub	r26, r26
    3fb0:	bb 1b       	sub	r27, r27
    3fb2:	51 e1       	ldi	r21, 0x11	; 17
    3fb4:	07 c0       	rjmp	.+14     	; 0x3fc4 <__udivmodhi4_ep>

00003fb6 <__udivmodhi4_loop>:
    3fb6:	aa 1f       	adc	r26, r26
    3fb8:	bb 1f       	adc	r27, r27
    3fba:	a6 17       	cp	r26, r22
    3fbc:	b7 07       	cpc	r27, r23
    3fbe:	10 f0       	brcs	.+4      	; 0x3fc4 <__udivmodhi4_ep>
    3fc0:	a6 1b       	sub	r26, r22
    3fc2:	b7 0b       	sbc	r27, r23

00003fc4 <__udivmodhi4_ep>:
    3fc4:	88 1f       	adc	r24, r24
    3fc6:	99 1f       	adc	r25, r25
    3fc8:	5a 95       	dec	r21
    3fca:	a9 f7       	brne	.-22     	; 0x3fb6 <__udivmodhi4_loop>
    3fcc:	80 95       	com	r24
    3fce:	90 95       	com	r25
    3fd0:	bc 01       	movw	r22, r24
    3fd2:	cd 01       	movw	r24, r26
    3fd4:	08 95       	ret

00003fd6 <__divmodhi4>:
    3fd6:	97 fb       	bst	r25, 7
    3fd8:	09 2e       	mov	r0, r25
    3fda:	07 26       	eor	r0, r23
    3fdc:	0a d0       	rcall	.+20     	; 0x3ff2 <__divmodhi4_neg1>
    3fde:	77 fd       	sbrc	r23, 7
    3fe0:	04 d0       	rcall	.+8      	; 0x3fea <__divmodhi4_neg2>
    3fe2:	e5 df       	rcall	.-54     	; 0x3fae <__udivmodhi4>
    3fe4:	06 d0       	rcall	.+12     	; 0x3ff2 <__divmodhi4_neg1>
    3fe6:	00 20       	and	r0, r0
    3fe8:	1a f4       	brpl	.+6      	; 0x3ff0 <__divmodhi4_exit>

00003fea <__divmodhi4_neg2>:
    3fea:	70 95       	com	r23
    3fec:	61 95       	neg	r22
    3fee:	7f 4f       	sbci	r23, 0xFF	; 255

00003ff0 <__divmodhi4_exit>:
    3ff0:	08 95       	ret

00003ff2 <__divmodhi4_neg1>:
    3ff2:	f6 f7       	brtc	.-4      	; 0x3ff0 <__divmodhi4_exit>
    3ff4:	90 95       	com	r25
    3ff6:	81 95       	neg	r24
    3ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffa:	08 95       	ret

00003ffc <_exit>:
    3ffc:	f8 94       	cli

00003ffe <__stop_program>:
    3ffe:	ff cf       	rjmp	.-2      	; 0x3ffe <__stop_program>
