
SamplingAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000230a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000230a  0000239e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000718  0080006c  0080006c  000023aa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002d2  00000000  00000000  000023ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d5  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018f  00000000  00000000  00002e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ce4  00000000  00000000  00003000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00003ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <__vector_10>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 00 08 	jmp	0x1000	; 0x1000 <__vector_16>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <lcd_print_int16+0x38>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea e0       	ldi	r30, 0x0A	; 10
      ea:	f3 e2       	ldi	r31, 0x23	; 35
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <.do_copy_data_start>

000000ee <.do_copy_data_loop>:
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0

000000f2 <.do_copy_data_start>:
      f2:	ac 36       	cpi	r26, 0x6C	; 108
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <.do_copy_data_loop>

000000f8 <__do_clear_bss>:
      f8:	17 e0       	ldi	r17, 0x07	; 7
      fa:	ac e6       	ldi	r26, 0x6C	; 108
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a4 38       	cpi	r26, 0x84	; 132
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 08 0a 	call	0x1410	; 0x1410 <main>
     10c:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <delay_ms>:
#include <inttypes.h>

// delay for ms milli-seconds 
// delay times are only half-way accurate if optimization is turned on!
void delay_ms(uint16_t ms) 
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	00 d0       	rcall	.+0      	; 0x11a <delay_ms+0x6>
     11a:	00 d0       	rcall	.+0      	; 0x11c <delay_ms+0x8>
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	9c 83       	std	Y+4, r25	; 0x04
     122:	8b 83       	std	Y+3, r24	; 0x03
	volatile uint16_t i;

	for(i=ms;i>0;i--)
     124:	8b 81       	ldd	r24, Y+3	; 0x03
     126:	9c 81       	ldd	r25, Y+4	; 0x04
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	09 c0       	rjmp	.+18     	; 0x140 <delay_ms+0x2c>
	{
		delay_us(1000);
     12e:	88 ee       	ldi	r24, 0xE8	; 232
     130:	93 e0       	ldi	r25, 0x03	; 3
     132:	0e 94 ab 00 	call	0x156	; 0x156 <delay_us>
// delay times are only half-way accurate if optimization is turned on!
void delay_ms(uint16_t ms) 
{
	volatile uint16_t i;

	for(i=ms;i>0;i--)
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	9a 81       	ldd	r25, Y+2	; 0x02
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	9a 83       	std	Y+2, r25	; 0x02
     13e:	89 83       	std	Y+1, r24	; 0x01
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	00 97       	sbiw	r24, 0x00	; 0
     146:	99 f7       	brne	.-26     	; 0x12e <delay_ms+0x1a>
	{
		delay_us(1000);
	}
} 
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	0f 90       	pop	r0
     150:	cf 91       	pop	r28
     152:	df 91       	pop	r29
     154:	08 95       	ret

00000156 <delay_us>:
// delay for us micro-seconds 
// delay times are only half-way accurate if optimization is turned on to level 3!
// max value for us is 65535/4*CYCLES_PER_US
// which is app. 17777 for 14.7456MHZ
void delay_us(uint16_t us)
{
     156:	df 93       	push	r29
     158:	cf 93       	push	r28
     15a:	00 d0       	rcall	.+0      	; 0x15c <delay_us+0x6>
     15c:	00 d0       	rcall	.+0      	; 0x15e <delay_us+0x8>
     15e:	cd b7       	in	r28, 0x3d	; 61
     160:	de b7       	in	r29, 0x3e	; 62
     162:	9c 83       	std	Y+4, r25	; 0x04
     164:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t _count;
	_count=us/4*CYCLES_PER_US;
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	9c 81       	ldd	r25, Y+4	; 0x04
     16a:	96 95       	lsr	r25
     16c:	87 95       	ror	r24
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	cc 01       	movw	r24, r24
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b0 e0       	ldi	r27, 0x00	; 0
     178:	bc 01       	movw	r22, r24
     17a:	cd 01       	movw	r24, r26
     17c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__floatunsisf>
     180:	dc 01       	movw	r26, r24
     182:	cb 01       	movw	r24, r22
     184:	bc 01       	movw	r22, r24
     186:	cd 01       	movw	r24, r26
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e0       	ldi	r20, 0x00	; 0
     18e:	51 e4       	ldi	r21, 0x41	; 65
     190:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
     194:	dc 01       	movw	r26, r24
     196:	cb 01       	movw	r24, r22
     198:	bc 01       	movw	r22, r24
     19a:	cd 01       	movw	r24, r26
     19c:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     1a0:	dc 01       	movw	r26, r24
     1a2:	cb 01       	movw	r24, r22
     1a4:	9a 83       	std	Y+2, r25	; 0x02
     1a6:	89 83       	std	Y+1, r24	; 0x01
	
	asm volatile (
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	9a 81       	ldd	r25, Y+2	; 0x02
     1ac:	01 97       	sbiw	r24, 0x01	; 1
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <delay_us+0x56>
     1b0:	9a 83       	std	Y+2, r25	; 0x02
     1b2:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (_count)
		: "0" (_count)
	);
}
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
     1b8:	0f 90       	pop	r0
     1ba:	0f 90       	pop	r0
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <lcd_init>:
// initializes LCD
//  - init PORT DDR and PINS
//  - set two line display
//  - clear display and set cursor to home
void lcd_init(void)
{
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	delay_ms(100);			// wait 100ms for the LCD to come out of RESET
     1ca:	84 e6       	ldi	r24, 0x64	; 100
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
	lcd_port_init();		// init the port pins
     1d2:	0e 94 03 01 	call	0x206	; 0x206 <lcd_port_init>
	lcd_cmd_write(0x33);	// init LCD to 4-bit interface
     1d6:	83 e3       	ldi	r24, 0x33	; 51
     1d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x32);	// init LCD to 4-bit interface
     1dc:	82 e3       	ldi	r24, 0x32	; 50
     1de:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x28);	// set two-line display
     1e2:	88 e2       	ldi	r24, 0x28	; 40
     1e4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x0C);
     1e8:	8c e0       	ldi	r24, 0x0C	; 12
     1ea:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(0x06);
     1ee:	86 e0       	ldi	r24, 0x06	; 6
     1f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(LCD_CLR);	// clear display
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
	lcd_cmd_write(LCD_HOME);
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <lcd_port_init>:
// initializes the ports
// sets the 4 upper bits of the data port (i.e. the LCD data is always connected
// to the upper 4 bits of a port)
// sets the control port (this could be anywhere)
void lcd_port_init(void)
{
     206:	df 93       	push	r29
     208:	cf 93       	push	r28
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
	sbi(LCD_DATA_DDR,7);						// set pin 7-4 of LCD data port to output
     20e:	a4 e3       	ldi	r26, 0x34	; 52
     210:	b0 e0       	ldi	r27, 0x00	; 0
     212:	e4 e3       	ldi	r30, 0x34	; 52
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	80 68       	ori	r24, 0x80	; 128
     21a:	8c 93       	st	X, r24
	sbi(LCD_DATA_DDR,6);
     21c:	a4 e3       	ldi	r26, 0x34	; 52
     21e:	b0 e0       	ldi	r27, 0x00	; 0
     220:	e4 e3       	ldi	r30, 0x34	; 52
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	80 81       	ld	r24, Z
     226:	80 64       	ori	r24, 0x40	; 64
     228:	8c 93       	st	X, r24
	sbi(LCD_DATA_DDR,5);
     22a:	a4 e3       	ldi	r26, 0x34	; 52
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e4 e3       	ldi	r30, 0x34	; 52
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	80 62       	ori	r24, 0x20	; 32
     236:	8c 93       	st	X, r24
	sbi(LCD_DATA_DDR,4);
     238:	a4 e3       	ldi	r26, 0x34	; 52
     23a:	b0 e0       	ldi	r27, 0x00	; 0
     23c:	e4 e3       	ldi	r30, 0x34	; 52
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	80 61       	ori	r24, 0x10	; 16
     244:	8c 93       	st	X, r24

	cbi(LCD_CTRL_PORT, LCD_CTRL_RS);			// clear bits of control port
     246:	a5 e3       	ldi	r26, 0x35	; 53
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	e5 e3       	ldi	r30, 0x35	; 53
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8b 7f       	andi	r24, 0xFB	; 251
     252:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_RW);
     254:	a5 e3       	ldi	r26, 0x35	; 53
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	e5 e3       	ldi	r30, 0x35	; 53
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	8d 7f       	andi	r24, 0xFD	; 253
     260:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT, LCD_CTRL_E);
     262:	a5 e3       	ldi	r26, 0x35	; 53
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	e5 e3       	ldi	r30, 0x35	; 53
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	80 81       	ld	r24, Z
     26c:	8e 7f       	andi	r24, 0xFE	; 254
     26e:	8c 93       	st	X, r24


	sbi(LCD_CTRL_DDR,LCD_CTRL_RS);				// set pins of control port to output
     270:	a4 e3       	ldi	r26, 0x34	; 52
     272:	b0 e0       	ldi	r27, 0x00	; 0
     274:	e4 e3       	ldi	r30, 0x34	; 52
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	84 60       	ori	r24, 0x04	; 4
     27c:	8c 93       	st	X, r24
	sbi(LCD_CTRL_DDR,LCD_CTRL_RW);
     27e:	a4 e3       	ldi	r26, 0x34	; 52
     280:	b0 e0       	ldi	r27, 0x00	; 0
     282:	e4 e3       	ldi	r30, 0x34	; 52
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	82 60       	ori	r24, 0x02	; 2
     28a:	8c 93       	st	X, r24
	sbi(LCD_CTRL_DDR,LCD_CTRL_E);
     28c:	a4 e3       	ldi	r26, 0x34	; 52
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e4 e3       	ldi	r30, 0x34	; 52
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	81 60       	ori	r24, 0x01	; 1
     298:	8c 93       	st	X, r24
}
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <lcd_cmd_write>:

// sends a command byte to LCD
void lcd_cmd_write(uint8_t cmd)
{
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	0f 92       	push	r0
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	89 83       	std	Y+1, r24	; 0x01
	cbi(LCD_CTRL_PORT,LCD_CTRL_RS);						// lower RS -> command follows
     2ac:	a5 e3       	ldi	r26, 0x35	; 53
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e5 e3       	ldi	r30, 0x35	; 53
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	8b 7f       	andi	r24, 0xFB	; 251
     2b8:	8c 93       	st	X, r24
	delay_ms(2);
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     2c2:	a5 e3       	ldi	r26, 0x35	; 53
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e5 e3       	ldi	r30, 0x35	; 53
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	81 60       	ori	r24, 0x01	; 1
     2ce:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(cmd&0xF0);		// send upper nibble
     2d0:	a5 e3       	ldi	r26, 0x35	; 53
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e5 e3       	ldi	r30, 0x35	; 53
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	98 2f       	mov	r25, r24
     2dc:	9f 70       	andi	r25, 0x0F	; 15
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	80 7f       	andi	r24, 0xF0	; 240
     2e2:	89 2b       	or	r24, r25
     2e4:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     2e6:	a5 e3       	ldi	r26, 0x35	; 53
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e5 e3       	ldi	r30, 0x35	; 53
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8e 7f       	andi	r24, 0xFE	; 254
     2f2:	8c 93       	st	X, r24
	delay_ms(2);										// wait 2ms so display uploads data
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
														// some commands take more than 1ms

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     2fc:	a5 e3       	ldi	r26, 0x35	; 53
     2fe:	b0 e0       	ldi	r27, 0x00	; 0
     300:	e5 e3       	ldi	r30, 0x35	; 53
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	80 81       	ld	r24, Z
     306:	81 60       	ori	r24, 0x01	; 1
     308:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((cmd<<4)&0xF0);	// send lower nibble
     30a:	a5 e3       	ldi	r26, 0x35	; 53
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e5 e3       	ldi	r30, 0x35	; 53
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	28 2f       	mov	r18, r24
     316:	2f 70       	andi	r18, 0x0F	; 15
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	82 95       	swap	r24
     320:	92 95       	swap	r25
     322:	90 7f       	andi	r25, 0xF0	; 240
     324:	98 27       	eor	r25, r24
     326:	80 7f       	andi	r24, 0xF0	; 240
     328:	98 27       	eor	r25, r24
     32a:	82 2b       	or	r24, r18
     32c:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     32e:	a5 e3       	ldi	r26, 0x35	; 53
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e5 e3       	ldi	r30, 0x35	; 53
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	8e 7f       	andi	r24, 0xFE	; 254
     33a:	8c 93       	st	X, r24
	delay_ms(2);										// wait 2ms so display uploads data
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_RS);						// raise RS end of command
     344:	a5 e3       	ldi	r26, 0x35	; 53
     346:	b0 e0       	ldi	r27, 0x00	; 0
     348:	e5 e3       	ldi	r30, 0x35	; 53
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	80 81       	ld	r24, Z
     34e:	84 60       	ori	r24, 0x04	; 4
     350:	8c 93       	st	X, r24
	delay_ms(2);
     352:	82 e0       	ldi	r24, 0x02	; 2
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
}
     35a:	0f 90       	pop	r0
     35c:	cf 91       	pop	r28
     35e:	df 91       	pop	r29
     360:	08 95       	ret

00000362 <lcd_data_write>:

// sends a data byte to LCD
void lcd_data_write(uint8_t data)
{
     362:	df 93       	push	r29
     364:	cf 93       	push	r28
     366:	0f 92       	push	r0
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	89 83       	std	Y+1, r24	; 0x01
	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     36e:	a5 e3       	ldi	r26, 0x35	; 53
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e5 e3       	ldi	r30, 0x35	; 53
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|(data&0xF0);		// send upper nibble
     37c:	a5 e3       	ldi	r26, 0x35	; 53
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	e5 e3       	ldi	r30, 0x35	; 53
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	98 2f       	mov	r25, r24
     388:	9f 70       	andi	r25, 0x0F	; 15
     38a:	89 81       	ldd	r24, Y+1	; 0x01
     38c:	80 7f       	andi	r24, 0xF0	; 240
     38e:	89 2b       	or	r24, r25
     390:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     392:	a5 e3       	ldi	r26, 0x35	; 53
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	e5 e3       	ldi	r30, 0x35	; 53
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	80 81       	ld	r24, Z
     39c:	8e 7f       	andi	r24, 0xFE	; 254
     39e:	8c 93       	st	X, r24
	delay_ms(2);										// wait 1ms so display uploads data
     3a0:	82 e0       	ldi	r24, 0x02	; 2
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>

	sbi(LCD_CTRL_PORT,LCD_CTRL_E);						// raise E
     3a8:	a5 e3       	ldi	r26, 0x35	; 53
     3aa:	b0 e0       	ldi	r27, 0x00	; 0
     3ac:	e5 e3       	ldi	r30, 0x35	; 53
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	80 81       	ld	r24, Z
     3b2:	81 60       	ori	r24, 0x01	; 1
     3b4:	8c 93       	st	X, r24
	LCD_DATA_PORT=(LCD_DATA_PORT&0x0F)|((data<<4)&0xF0);// send lower nibble
     3b6:	a5 e3       	ldi	r26, 0x35	; 53
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	e5 e3       	ldi	r30, 0x35	; 53
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	28 2f       	mov	r18, r24
     3c2:	2f 70       	andi	r18, 0x0F	; 15
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	82 95       	swap	r24
     3cc:	92 95       	swap	r25
     3ce:	90 7f       	andi	r25, 0xF0	; 240
     3d0:	98 27       	eor	r25, r24
     3d2:	80 7f       	andi	r24, 0xF0	; 240
     3d4:	98 27       	eor	r25, r24
     3d6:	82 2b       	or	r24, r18
     3d8:	8c 93       	st	X, r24
	cbi(LCD_CTRL_PORT,LCD_CTRL_E);						// lower E
     3da:	a5 e3       	ldi	r26, 0x35	; 53
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e5 e3       	ldi	r30, 0x35	; 53
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	8e 7f       	andi	r24, 0xFE	; 254
     3e6:	8c 93       	st	X, r24
	delay_ms(2);										// wait 1ms so display uploads data
     3e8:	82 e0       	ldi	r24, 0x02	; 2
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
}
     3f0:	0f 90       	pop	r0
     3f2:	cf 91       	pop	r28
     3f4:	df 91       	pop	r29
     3f6:	08 95       	ret

000003f8 <lcd_goto_xy>:

// sets LCD cursor to position x,y
void lcd_goto_xy(uint8_t x,uint8_t y)
{
     3f8:	df 93       	push	r29
     3fa:	cf 93       	push	r28
     3fc:	00 d0       	rcall	.+0      	; 0x3fe <lcd_goto_xy+0x6>
     3fe:	00 d0       	rcall	.+0      	; 0x400 <lcd_goto_xy+0x8>
     400:	0f 92       	push	r0
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
     406:	8a 83       	std	Y+2, r24	; 0x02
     408:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t DDRAMAddr;
	 
	switch(y)							// get the right starting address for the line
     40a:	8b 81       	ldd	r24, Y+3	; 0x03
     40c:	28 2f       	mov	r18, r24
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	3d 83       	std	Y+5, r19	; 0x05
     412:	2c 83       	std	Y+4, r18	; 0x04
     414:	8c 81       	ldd	r24, Y+4	; 0x04
     416:	9d 81       	ldd	r25, Y+5	; 0x05
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	91 05       	cpc	r25, r1
     41c:	c1 f0       	breq	.+48     	; 0x44e <lcd_goto_xy+0x56>
     41e:	2c 81       	ldd	r18, Y+4	; 0x04
     420:	3d 81       	ldd	r19, Y+5	; 0x05
     422:	22 30       	cpi	r18, 0x02	; 2
     424:	31 05       	cpc	r19, r1
     426:	2c f4       	brge	.+10     	; 0x432 <lcd_goto_xy+0x3a>
     428:	8c 81       	ldd	r24, Y+4	; 0x04
     42a:	9d 81       	ldd	r25, Y+5	; 0x05
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	61 f0       	breq	.+24     	; 0x448 <lcd_goto_xy+0x50>
     430:	1a c0       	rjmp	.+52     	; 0x466 <lcd_goto_xy+0x6e>
     432:	2c 81       	ldd	r18, Y+4	; 0x04
     434:	3d 81       	ldd	r19, Y+5	; 0x05
     436:	22 30       	cpi	r18, 0x02	; 2
     438:	31 05       	cpc	r19, r1
     43a:	69 f0       	breq	.+26     	; 0x456 <lcd_goto_xy+0x5e>
     43c:	8c 81       	ldd	r24, Y+4	; 0x04
     43e:	9d 81       	ldd	r25, Y+5	; 0x05
     440:	83 30       	cpi	r24, 0x03	; 3
     442:	91 05       	cpc	r25, r1
     444:	61 f0       	breq	.+24     	; 0x45e <lcd_goto_xy+0x66>
     446:	0f c0       	rjmp	.+30     	; 0x466 <lcd_goto_xy+0x6e>
	{									// and add offset for x position
		case 0: DDRAMAddr = LCD_LINE0_DDRAMADDR+x; break;
     448:	8a 81       	ldd	r24, Y+2	; 0x02
     44a:	89 83       	std	Y+1, r24	; 0x01
     44c:	0e c0       	rjmp	.+28     	; 0x46a <lcd_goto_xy+0x72>
		case 1: DDRAMAddr = LCD_LINE1_DDRAMADDR+x; break;
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	80 5c       	subi	r24, 0xC0	; 192
     452:	89 83       	std	Y+1, r24	; 0x01
     454:	0a c0       	rjmp	.+20     	; 0x46a <lcd_goto_xy+0x72>
		case 2: DDRAMAddr = LCD_LINE2_DDRAMADDR+x; break;
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	8c 5e       	subi	r24, 0xEC	; 236
     45a:	89 83       	std	Y+1, r24	; 0x01
     45c:	06 c0       	rjmp	.+12     	; 0x46a <lcd_goto_xy+0x72>
		case 3: DDRAMAddr = LCD_LINE3_DDRAMADDR+x; break;
     45e:	8a 81       	ldd	r24, Y+2	; 0x02
     460:	8c 5a       	subi	r24, 0xAC	; 172
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	02 c0       	rjmp	.+4      	; 0x46a <lcd_goto_xy+0x72>
		default: DDRAMAddr = LCD_LINE0_DDRAMADDR+x;
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
	}

	// set data address
	lcd_cmd_write(1<<LCD_DDRAM | DDRAMAddr);
     46a:	89 81       	ldd	r24, Y+1	; 0x01
     46c:	80 68       	ori	r24, 0x80	; 128
     46e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	cf 91       	pop	r28
     47e:	df 91       	pop	r29
     480:	08 95       	ret

00000482 <lcd_clear>:

// clears LCD display
void lcd_clear(void)
{
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
	lcd_cmd_write(LCD_CLR);		// clear display
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     490:	cf 91       	pop	r28
     492:	df 91       	pop	r29
     494:	08 95       	ret

00000496 <lcd_home>:

// sets LCD cursor to home
void lcd_home(void)
{
     496:	df 93       	push	r29
     498:	cf 93       	push	r28
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
	lcd_cmd_write(LCD_HOME);	// cursor home
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cmd_write>
}
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <lcd_print_char>:

// prints a char
void lcd_print_char(uint8_t symbol)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	0f 92       	push	r0
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	89 83       	std	Y+1, r24	; 0x01
	lcd_data_write(symbol);
     4b6:	89 81       	ldd	r24, Y+1	; 0x01
     4b8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     4bc:	0f 90       	pop	r0
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <lcd_print_string>:

// prints a null-terminated string on LCD
void lcd_print_string(char *string)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <lcd_print_string+0x6>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01
     4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <lcd_print_string+0x24>
	while(*string!=0)
	{
		lcd_data_write(*string);
     4d4:	e9 81       	ldd	r30, Y+1	; 0x01
     4d6:	fa 81       	ldd	r31, Y+2	; 0x02
     4d8:	80 81       	ld	r24, Z
     4da:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		string++;
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	9a 83       	std	Y+2, r25	; 0x02
     4e6:	89 83       	std	Y+1, r24	; 0x01
}

// prints a null-terminated string on LCD
void lcd_print_string(char *string)
{
	while(*string!=0)
     4e8:	e9 81       	ldd	r30, Y+1	; 0x01
     4ea:	fa 81       	ldd	r31, Y+2	; 0x02
     4ec:	80 81       	ld	r24, Z
     4ee:	88 23       	and	r24, r24
     4f0:	89 f7       	brne	.-30     	; 0x4d4 <lcd_print_string+0x10>
	{
		lcd_data_write(*string);
		string++;
	}
}
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	08 95       	ret

000004fc <lcd_print_hex>:

// prints hex number on LCD
void lcd_print_hex(uint8_t hex)
{
     4fc:	df 93       	push	r29
     4fe:	cf 93       	push	r28
     500:	00 d0       	rcall	.+0      	; 0x502 <lcd_print_hex+0x6>
     502:	0f 92       	push	r0
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t hi,lo;

	hi=hex&0xF0;
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	80 7f       	andi	r24, 0xF0	; 240
     50e:	8a 83       	std	Y+2, r24	; 0x02
	hi=hi>>4;
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	82 95       	swap	r24
     514:	8f 70       	andi	r24, 0x0F	; 15
     516:	8a 83       	std	Y+2, r24	; 0x02
	hi=hi+'0';
     518:	8a 81       	ldd	r24, Y+2	; 0x02
     51a:	80 5d       	subi	r24, 0xD0	; 208
     51c:	8a 83       	std	Y+2, r24	; 0x02
	if(hi>'9')
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	8a 33       	cpi	r24, 0x3A	; 58
     522:	18 f0       	brcs	.+6      	; 0x52a <lcd_print_hex+0x2e>
	{
		hi=hi+7;
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	89 5f       	subi	r24, 0xF9	; 249
     528:	8a 83       	std	Y+2, r24	; 0x02
	}
	lo=hex&0x0F;
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	8f 70       	andi	r24, 0x0F	; 15
     52e:	89 83       	std	Y+1, r24	; 0x01
	lo=lo+'0';
     530:	89 81       	ldd	r24, Y+1	; 0x01
     532:	80 5d       	subi	r24, 0xD0	; 208
     534:	89 83       	std	Y+1, r24	; 0x01
	if(lo>'9')
     536:	89 81       	ldd	r24, Y+1	; 0x01
     538:	8a 33       	cpi	r24, 0x3A	; 58
     53a:	18 f0       	brcs	.+6      	; 0x542 <lcd_print_hex+0x46>
	{
		lo=lo+7;
     53c:	89 81       	ldd	r24, Y+1	; 0x01
     53e:	89 5f       	subi	r24, 0xF9	; 249
     540:	89 83       	std	Y+1, r24	; 0x01
	}

	lcd_data_write(hi);
     542:	8a 81       	ldd	r24, Y+2	; 0x02
     544:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
	lcd_data_write(lo);
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	cf 91       	pop	r28
     556:	df 91       	pop	r29
     558:	08 95       	ret

0000055a <lcd_print_uint8>:

// print uint8 on LCD
void lcd_print_uint8(uint8_t no)
{
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	00 d0       	rcall	.+0      	; 0x560 <lcd_print_uint8+0x6>
     560:	0f 92       	push	r0
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t y,leading;
	leading=1;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	89 83       	std	Y+1, r24	; 0x01
	y=no/100;
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	94 e6       	ldi	r25, 0x64	; 100
     570:	69 2f       	mov	r22, r25
     572:	0e 94 43 11 	call	0x2286	; 0x2286 <__udivmodqi4>
     576:	8a 83       	std	Y+2, r24	; 0x02
	if(y>0)
     578:	8a 81       	ldd	r24, Y+2	; 0x02
     57a:	88 23       	and	r24, r24
     57c:	29 f0       	breq	.+10     	; 0x588 <lcd_print_uint8+0x2e>
	{
		lcd_data_write(y+'0');
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	80 5d       	subi	r24, 0xD0	; 208
     582:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     586:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*100;
     588:	8a 81       	ldd	r24, Y+2	; 0x02
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	8c e9       	ldi	r24, 0x9C	; 156
     590:	9f ef       	ldi	r25, 0xFF	; 255
     592:	ac 01       	movw	r20, r24
     594:	24 9f       	mul	r18, r20
     596:	c0 01       	movw	r24, r0
     598:	25 9f       	mul	r18, r21
     59a:	90 0d       	add	r25, r0
     59c:	34 9f       	mul	r19, r20
     59e:	90 0d       	add	r25, r0
     5a0:	11 24       	eor	r1, r1
     5a2:	98 2f       	mov	r25, r24
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	89 0f       	add	r24, r25
     5a8:	8b 83       	std	Y+3, r24	; 0x03
	y=no/10;
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9a e0       	ldi	r25, 0x0A	; 10
     5ae:	69 2f       	mov	r22, r25
     5b0:	0e 94 43 11 	call	0x2286	; 0x2286 <__udivmodqi4>
     5b4:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     5b6:	8a 81       	ldd	r24, Y+2	; 0x02
     5b8:	88 23       	and	r24, r24
     5ba:	19 f4       	brne	.+6      	; 0x5c2 <lcd_print_uint8+0x68>
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	88 23       	and	r24, r24
     5c0:	31 f4       	brne	.+12     	; 0x5ce <lcd_print_uint8+0x74>
	{
		lcd_data_write(y+'0');
     5c2:	8a 81       	ldd	r24, Y+2	; 0x02
     5c4:	80 5d       	subi	r24, 0xD0	; 208
     5c6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9c 01       	movw	r18, r24
     5d6:	22 0f       	add	r18, r18
     5d8:	33 1f       	adc	r19, r19
     5da:	c9 01       	movw	r24, r18
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	82 0f       	add	r24, r18
     5e6:	93 1f       	adc	r25, r19
     5e8:	90 95       	com	r25
     5ea:	81 95       	neg	r24
     5ec:	9f 4f       	sbci	r25, 0xFF	; 255
     5ee:	98 2f       	mov	r25, r24
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	89 0f       	add	r24, r25
     5f4:	8b 83       	std	Y+3, r24	; 0x03
	lcd_data_write(no+'0');
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	80 5d       	subi	r24, 0xD0	; 208
     5fa:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <lcd_print_int8>:

// print int8 on LCD
void lcd_print_int8(int8_t no)
{
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	00 d0       	rcall	.+0      	; 0x610 <lcd_print_int8+0x6>
     610:	0f 92       	push	r0
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	8b 83       	std	Y+3, r24	; 0x03
	int8_t y;
	uint8_t	leading;
	leading=1;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	89 83       	std	Y+1, r24	; 0x01
	if(no<0)
     61c:	8b 81       	ldd	r24, Y+3	; 0x03
     61e:	88 23       	and	r24, r24
     620:	04 f5       	brge	.+64     	; 0x662 <lcd_print_int8+0x58>
	{
		lcd_print_string("-");
     622:	80 e6       	ldi	r24, 0x60	; 96
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
		y=no/(-100);
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c e9       	ldi	r25, 0x9C	; 156
     62e:	69 2f       	mov	r22, r25
     630:	0e 94 4f 11 	call	0x229e	; 0x229e <__divmodqi4>
     634:	8a 83       	std	Y+2, r24	; 0x02
		no=-(no+y*100);
     636:	8a 81       	ldd	r24, Y+2	; 0x02
     638:	28 2f       	mov	r18, r24
     63a:	33 27       	eor	r19, r19
     63c:	27 fd       	sbrc	r18, 7
     63e:	30 95       	com	r19
     640:	8c e9       	ldi	r24, 0x9C	; 156
     642:	9f ef       	ldi	r25, 0xFF	; 255
     644:	ac 01       	movw	r20, r24
     646:	24 9f       	mul	r18, r20
     648:	c0 01       	movw	r24, r0
     64a:	25 9f       	mul	r18, r21
     64c:	90 0d       	add	r25, r0
     64e:	34 9f       	mul	r19, r20
     650:	90 0d       	add	r25, r0
     652:	11 24       	eor	r1, r1
     654:	98 2f       	mov	r25, r24
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	59 2f       	mov	r21, r25
     65a:	58 1b       	sub	r21, r24
     65c:	85 2f       	mov	r24, r21
     65e:	8b 83       	std	Y+3, r24	; 0x03
     660:	19 c0       	rjmp	.+50     	; 0x694 <lcd_print_int8+0x8a>
	}
	else
	{
		y=no/100;
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	94 e6       	ldi	r25, 0x64	; 100
     666:	69 2f       	mov	r22, r25
     668:	0e 94 4f 11 	call	0x229e	; 0x229e <__divmodqi4>
     66c:	8a 83       	std	Y+2, r24	; 0x02
		no=no-y*100;
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	28 2f       	mov	r18, r24
     672:	33 27       	eor	r19, r19
     674:	27 fd       	sbrc	r18, 7
     676:	30 95       	com	r19
     678:	8c e9       	ldi	r24, 0x9C	; 156
     67a:	9f ef       	ldi	r25, 0xFF	; 255
     67c:	ac 01       	movw	r20, r24
     67e:	24 9f       	mul	r18, r20
     680:	c0 01       	movw	r24, r0
     682:	25 9f       	mul	r18, r21
     684:	90 0d       	add	r25, r0
     686:	34 9f       	mul	r19, r20
     688:	90 0d       	add	r25, r0
     68a:	11 24       	eor	r1, r1
     68c:	98 2f       	mov	r25, r24
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	89 0f       	add	r24, r25
     692:	8b 83       	std	Y+3, r24	; 0x03
	}

	if(y>0)
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	18 16       	cp	r1, r24
     698:	2c f4       	brge	.+10     	; 0x6a4 <lcd_print_int8+0x9a>
	{
		lcd_data_write(y+'0');
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	80 5d       	subi	r24, 0xD0	; 208
     69e:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     6a2:	19 82       	std	Y+1, r1	; 0x01
	}
	
	y=no/10;
     6a4:	8b 81       	ldd	r24, Y+3	; 0x03
     6a6:	9a e0       	ldi	r25, 0x0A	; 10
     6a8:	69 2f       	mov	r22, r25
     6aa:	0e 94 4f 11 	call	0x229e	; 0x229e <__divmodqi4>
     6ae:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	18 16       	cp	r1, r24
     6b4:	1c f0       	brlt	.+6      	; 0x6bc <lcd_print_int8+0xb2>
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	88 23       	and	r24, r24
     6ba:	31 f4       	brne	.+12     	; 0x6c8 <lcd_print_int8+0xbe>
	{
		lcd_data_write(y+'0');
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	80 5d       	subi	r24, 0xD0	; 208
     6c0:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     6c8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ca:	99 27       	eor	r25, r25
     6cc:	87 fd       	sbrc	r24, 7
     6ce:	90 95       	com	r25
     6d0:	9c 01       	movw	r18, r24
     6d2:	22 0f       	add	r18, r18
     6d4:	33 1f       	adc	r19, r19
     6d6:	c9 01       	movw	r24, r18
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	82 0f       	add	r24, r18
     6e2:	93 1f       	adc	r25, r19
     6e4:	90 95       	com	r25
     6e6:	81 95       	neg	r24
     6e8:	9f 4f       	sbci	r25, 0xFF	; 255
     6ea:	98 2f       	mov	r25, r24
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	89 0f       	add	r24, r25
     6f0:	8b 83       	std	Y+3, r24	; 0x03
	lcd_data_write(no+'0');
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	80 5d       	subi	r24, 0xD0	; 208
     6f6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	cf 91       	pop	r28
     702:	df 91       	pop	r29
     704:	08 95       	ret

00000706 <lcd_print_uint16>:

// print uint16 on LCD
void lcd_print_uint16(uint16_t no)
{
     706:	df 93       	push	r29
     708:	cf 93       	push	r28
     70a:	00 d0       	rcall	.+0      	; 0x70c <lcd_print_uint16+0x6>
     70c:	00 d0       	rcall	.+0      	; 0x70e <lcd_print_uint16+0x8>
     70e:	0f 92       	push	r0
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	9d 83       	std	Y+5, r25	; 0x05
     716:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t y;
	uint8_t	leading;
	leading=1;
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	89 83       	std	Y+1, r24	; 0x01

	y=no/10000;
     71c:	8c 81       	ldd	r24, Y+4	; 0x04
     71e:	9d 81       	ldd	r25, Y+5	; 0x05
     720:	20 e1       	ldi	r18, 0x10	; 16
     722:	37 e2       	ldi	r19, 0x27	; 39
     724:	b9 01       	movw	r22, r18
     726:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     72a:	cb 01       	movw	r24, r22
     72c:	9b 83       	std	Y+3, r25	; 0x03
     72e:	8a 83       	std	Y+2, r24	; 0x02
	if(y>0)
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	9b 81       	ldd	r25, Y+3	; 0x03
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	29 f0       	breq	.+10     	; 0x742 <lcd_print_uint16+0x3c>
	{
		lcd_data_write(y+'0');
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	80 5d       	subi	r24, 0xD0	; 208
     73c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     740:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*10000;
     742:	2a 81       	ldd	r18, Y+2	; 0x02
     744:	3b 81       	ldd	r19, Y+3	; 0x03
     746:	80 e1       	ldi	r24, 0x10	; 16
     748:	97 e2       	ldi	r25, 0x27	; 39
     74a:	a9 01       	movw	r20, r18
     74c:	48 9f       	mul	r20, r24
     74e:	90 01       	movw	r18, r0
     750:	49 9f       	mul	r20, r25
     752:	30 0d       	add	r19, r0
     754:	58 9f       	mul	r21, r24
     756:	30 0d       	add	r19, r0
     758:	11 24       	eor	r1, r1
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	82 1b       	sub	r24, r18
     760:	93 0b       	sbc	r25, r19
     762:	9d 83       	std	Y+5, r25	; 0x05
     764:	8c 83       	std	Y+4, r24	; 0x04

	y=no/1000;
     766:	8c 81       	ldd	r24, Y+4	; 0x04
     768:	9d 81       	ldd	r25, Y+5	; 0x05
     76a:	28 ee       	ldi	r18, 0xE8	; 232
     76c:	33 e0       	ldi	r19, 0x03	; 3
     76e:	b9 01       	movw	r22, r18
     770:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     774:	cb 01       	movw	r24, r22
     776:	9b 83       	std	Y+3, r25	; 0x03
     778:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	9b 81       	ldd	r25, Y+3	; 0x03
     77e:	00 97       	sbiw	r24, 0x00	; 0
     780:	19 f4       	brne	.+6      	; 0x788 <lcd_print_uint16+0x82>
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	88 23       	and	r24, r24
     786:	29 f4       	brne	.+10     	; 0x792 <lcd_print_uint16+0x8c>
	{
		lcd_data_write(y+'0');
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	80 5d       	subi	r24, 0xD0	; 208
     78c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     790:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*1000;
     792:	2a 81       	ldd	r18, Y+2	; 0x02
     794:	3b 81       	ldd	r19, Y+3	; 0x03
     796:	88 ee       	ldi	r24, 0xE8	; 232
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	a9 01       	movw	r20, r18
     79c:	48 9f       	mul	r20, r24
     79e:	90 01       	movw	r18, r0
     7a0:	49 9f       	mul	r20, r25
     7a2:	30 0d       	add	r19, r0
     7a4:	58 9f       	mul	r21, r24
     7a6:	30 0d       	add	r19, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	8c 81       	ldd	r24, Y+4	; 0x04
     7ac:	9d 81       	ldd	r25, Y+5	; 0x05
     7ae:	82 1b       	sub	r24, r18
     7b0:	93 0b       	sbc	r25, r19
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04

	y=no/100;
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	24 e6       	ldi	r18, 0x64	; 100
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	b9 01       	movw	r22, r18
     7c0:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     7c4:	cb 01       	movw	r24, r22
     7c6:	9b 83       	std	Y+3, r25	; 0x03
     7c8:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	9b 81       	ldd	r25, Y+3	; 0x03
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	19 f4       	brne	.+6      	; 0x7d8 <lcd_print_uint16+0xd2>
     7d2:	89 81       	ldd	r24, Y+1	; 0x01
     7d4:	88 23       	and	r24, r24
     7d6:	29 f4       	brne	.+10     	; 0x7e2 <lcd_print_uint16+0xdc>
	{
		lcd_data_write(y+'0');
     7d8:	8a 81       	ldd	r24, Y+2	; 0x02
     7da:	80 5d       	subi	r24, 0xD0	; 208
     7dc:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     7e0:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*100;
     7e2:	2a 81       	ldd	r18, Y+2	; 0x02
     7e4:	3b 81       	ldd	r19, Y+3	; 0x03
     7e6:	84 e6       	ldi	r24, 0x64	; 100
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	a9 01       	movw	r20, r18
     7ec:	48 9f       	mul	r20, r24
     7ee:	90 01       	movw	r18, r0
     7f0:	49 9f       	mul	r20, r25
     7f2:	30 0d       	add	r19, r0
     7f4:	58 9f       	mul	r21, r24
     7f6:	30 0d       	add	r19, r0
     7f8:	11 24       	eor	r1, r1
     7fa:	8c 81       	ldd	r24, Y+4	; 0x04
     7fc:	9d 81       	ldd	r25, Y+5	; 0x05
     7fe:	82 1b       	sub	r24, r18
     800:	93 0b       	sbc	r25, r19
     802:	9d 83       	std	Y+5, r25	; 0x05
     804:	8c 83       	std	Y+4, r24	; 0x04
	y=no/10;
     806:	8c 81       	ldd	r24, Y+4	; 0x04
     808:	9d 81       	ldd	r25, Y+5	; 0x05
     80a:	2a e0       	ldi	r18, 0x0A	; 10
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	b9 01       	movw	r22, r18
     810:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     814:	cb 01       	movw	r24, r22
     816:	9b 83       	std	Y+3, r25	; 0x03
     818:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	9b 81       	ldd	r25, Y+3	; 0x03
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	19 f4       	brne	.+6      	; 0x828 <lcd_print_uint16+0x122>
     822:	89 81       	ldd	r24, Y+1	; 0x01
     824:	88 23       	and	r24, r24
     826:	31 f4       	brne	.+12     	; 0x834 <lcd_print_uint16+0x12e>
	{
		lcd_data_write(y+'0');
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	80 5d       	subi	r24, 0xD0	; 208
     82c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	9c 01       	movw	r18, r24
     83a:	22 0f       	add	r18, r18
     83c:	33 1f       	adc	r19, r19
     83e:	c9 01       	movw	r24, r18
     840:	88 0f       	add	r24, r24
     842:	99 1f       	adc	r25, r25
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	28 0f       	add	r18, r24
     84a:	39 1f       	adc	r19, r25
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	9d 81       	ldd	r25, Y+5	; 0x05
     850:	82 1b       	sub	r24, r18
     852:	93 0b       	sbc	r25, r19
     854:	9d 83       	std	Y+5, r25	; 0x05
     856:	8c 83       	std	Y+4, r24	; 0x04
	lcd_data_write(no+'0');
     858:	8c 81       	ldd	r24, Y+4	; 0x04
     85a:	80 5d       	subi	r24, 0xD0	; 208
     85c:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <lcd_print_int16>:

// print int16 on LCD
void lcd_print_int16(int16_t no)
{
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	00 d0       	rcall	.+0      	; 0x876 <lcd_print_int16+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <lcd_print_int16+0x8>
     878:	0f 92       	push	r0
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	9d 83       	std	Y+5, r25	; 0x05
     880:	8c 83       	std	Y+4, r24	; 0x04
	int16_t y;
	uint8_t	leading;
	leading=1;
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	89 83       	std	Y+1, r24	; 0x01

	if(no<0)
     886:	8c 81       	ldd	r24, Y+4	; 0x04
     888:	9d 81       	ldd	r25, Y+5	; 0x05
     88a:	99 23       	and	r25, r25
     88c:	1c f5       	brge	.+70     	; 0x8d4 <lcd_print_int16+0x64>
	{
		lcd_print_string("-");
     88e:	80 e6       	ldi	r24, 0x60	; 96
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
		y=no/(-10000);
     896:	8c 81       	ldd	r24, Y+4	; 0x04
     898:	9d 81       	ldd	r25, Y+5	; 0x05
     89a:	20 ef       	ldi	r18, 0xF0	; 240
     89c:	38 ed       	ldi	r19, 0xD8	; 216
     89e:	b9 01       	movw	r22, r18
     8a0:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__divmodhi4>
     8a4:	cb 01       	movw	r24, r22
     8a6:	9b 83       	std	Y+3, r25	; 0x03
     8a8:	8a 83       	std	Y+2, r24	; 0x02
		no=-(no+y*10000);
     8aa:	2a 81       	ldd	r18, Y+2	; 0x02
     8ac:	3b 81       	ldd	r19, Y+3	; 0x03
     8ae:	80 ef       	ldi	r24, 0xF0	; 240
     8b0:	98 ed       	ldi	r25, 0xD8	; 216
     8b2:	a9 01       	movw	r20, r18
     8b4:	48 9f       	mul	r20, r24
     8b6:	90 01       	movw	r18, r0
     8b8:	49 9f       	mul	r20, r25
     8ba:	30 0d       	add	r19, r0
     8bc:	58 9f       	mul	r21, r24
     8be:	30 0d       	add	r19, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	8c 81       	ldd	r24, Y+4	; 0x04
     8c4:	9d 81       	ldd	r25, Y+5	; 0x05
     8c6:	a9 01       	movw	r20, r18
     8c8:	48 1b       	sub	r20, r24
     8ca:	59 0b       	sbc	r21, r25
     8cc:	ca 01       	movw	r24, r20
     8ce:	9d 83       	std	Y+5, r25	; 0x05
     8d0:	8c 83       	std	Y+4, r24	; 0x04
     8d2:	1c c0       	rjmp	.+56     	; 0x90c <lcd_print_int16+0x9c>
	}
	else
	{
		y=no/10000;
     8d4:	8c 81       	ldd	r24, Y+4	; 0x04
     8d6:	9d 81       	ldd	r25, Y+5	; 0x05
     8d8:	20 e1       	ldi	r18, 0x10	; 16
     8da:	37 e2       	ldi	r19, 0x27	; 39
     8dc:	b9 01       	movw	r22, r18
     8de:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__divmodhi4>
     8e2:	cb 01       	movw	r24, r22
     8e4:	9b 83       	std	Y+3, r25	; 0x03
     8e6:	8a 83       	std	Y+2, r24	; 0x02
		no=no-y*10000;
     8e8:	2a 81       	ldd	r18, Y+2	; 0x02
     8ea:	3b 81       	ldd	r19, Y+3	; 0x03
     8ec:	80 ef       	ldi	r24, 0xF0	; 240
     8ee:	98 ed       	ldi	r25, 0xD8	; 216
     8f0:	a9 01       	movw	r20, r18
     8f2:	48 9f       	mul	r20, r24
     8f4:	90 01       	movw	r18, r0
     8f6:	49 9f       	mul	r20, r25
     8f8:	30 0d       	add	r19, r0
     8fa:	58 9f       	mul	r21, r24
     8fc:	30 0d       	add	r19, r0
     8fe:	11 24       	eor	r1, r1
     900:	8c 81       	ldd	r24, Y+4	; 0x04
     902:	9d 81       	ldd	r25, Y+5	; 0x05
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	9d 83       	std	Y+5, r25	; 0x05
     90a:	8c 83       	std	Y+4, r24	; 0x04
	}

	if(y>0)
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	9b 81       	ldd	r25, Y+3	; 0x03
     910:	18 16       	cp	r1, r24
     912:	19 06       	cpc	r1, r25
     914:	2c f4       	brge	.+10     	; 0x920 <lcd_print_int16+0xb0>
	{
		lcd_data_write(y+'0');
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	80 5d       	subi	r24, 0xD0	; 208
     91a:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     91e:	19 82       	std	Y+1, r1	; 0x01
	}

	y=no/1000;
     920:	8c 81       	ldd	r24, Y+4	; 0x04
     922:	9d 81       	ldd	r25, Y+5	; 0x05
     924:	28 ee       	ldi	r18, 0xE8	; 232
     926:	33 e0       	ldi	r19, 0x03	; 3
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__divmodhi4>
     92e:	cb 01       	movw	r24, r22
     930:	9b 83       	std	Y+3, r25	; 0x03
     932:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	18 16       	cp	r1, r24
     93a:	19 06       	cpc	r1, r25
     93c:	1c f0       	brlt	.+6      	; 0x944 <lcd_print_int16+0xd4>
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	88 23       	and	r24, r24
     942:	29 f4       	brne	.+10     	; 0x94e <lcd_print_int16+0xde>
	{
		lcd_data_write(y+'0');
     944:	8a 81       	ldd	r24, Y+2	; 0x02
     946:	80 5d       	subi	r24, 0xD0	; 208
     948:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     94c:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*1000;
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	88 e1       	ldi	r24, 0x18	; 24
     954:	9c ef       	ldi	r25, 0xFC	; 252
     956:	a9 01       	movw	r20, r18
     958:	48 9f       	mul	r20, r24
     95a:	90 01       	movw	r18, r0
     95c:	49 9f       	mul	r20, r25
     95e:	30 0d       	add	r19, r0
     960:	58 9f       	mul	r21, r24
     962:	30 0d       	add	r19, r0
     964:	11 24       	eor	r1, r1
     966:	8c 81       	ldd	r24, Y+4	; 0x04
     968:	9d 81       	ldd	r25, Y+5	; 0x05
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	9d 83       	std	Y+5, r25	; 0x05
     970:	8c 83       	std	Y+4, r24	; 0x04

	y=no/100;
     972:	8c 81       	ldd	r24, Y+4	; 0x04
     974:	9d 81       	ldd	r25, Y+5	; 0x05
     976:	24 e6       	ldi	r18, 0x64	; 100
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	b9 01       	movw	r22, r18
     97c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__divmodhi4>
     980:	cb 01       	movw	r24, r22
     982:	9b 83       	std	Y+3, r25	; 0x03
     984:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	9b 81       	ldd	r25, Y+3	; 0x03
     98a:	18 16       	cp	r1, r24
     98c:	19 06       	cpc	r1, r25
     98e:	1c f0       	brlt	.+6      	; 0x996 <lcd_print_int16+0x126>
     990:	89 81       	ldd	r24, Y+1	; 0x01
     992:	88 23       	and	r24, r24
     994:	29 f4       	brne	.+10     	; 0x9a0 <lcd_print_int16+0x130>
	{
		lcd_data_write(y+'0');
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	80 5d       	subi	r24, 0xD0	; 208
     99a:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=0;
     99e:	19 82       	std	Y+1, r1	; 0x01
	}
	no=no-y*100;
     9a0:	2a 81       	ldd	r18, Y+2	; 0x02
     9a2:	3b 81       	ldd	r19, Y+3	; 0x03
     9a4:	8c e9       	ldi	r24, 0x9C	; 156
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	a9 01       	movw	r20, r18
     9aa:	48 9f       	mul	r20, r24
     9ac:	90 01       	movw	r18, r0
     9ae:	49 9f       	mul	r20, r25
     9b0:	30 0d       	add	r19, r0
     9b2:	58 9f       	mul	r21, r24
     9b4:	30 0d       	add	r19, r0
     9b6:	11 24       	eor	r1, r1
     9b8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ba:	9d 81       	ldd	r25, Y+5	; 0x05
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	9d 83       	std	Y+5, r25	; 0x05
     9c2:	8c 83       	std	Y+4, r24	; 0x04
	y=no/10;
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	9d 81       	ldd	r25, Y+5	; 0x05
     9c8:	2a e0       	ldi	r18, 0x0A	; 10
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	b9 01       	movw	r22, r18
     9ce:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__divmodhi4>
     9d2:	cb 01       	movw	r24, r22
     9d4:	9b 83       	std	Y+3, r25	; 0x03
     9d6:	8a 83       	std	Y+2, r24	; 0x02
	if((y>0)||(leading==0))
     9d8:	8a 81       	ldd	r24, Y+2	; 0x02
     9da:	9b 81       	ldd	r25, Y+3	; 0x03
     9dc:	18 16       	cp	r1, r24
     9de:	19 06       	cpc	r1, r25
     9e0:	1c f0       	brlt	.+6      	; 0x9e8 <lcd_print_int16+0x178>
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	88 23       	and	r24, r24
     9e6:	31 f4       	brne	.+12     	; 0x9f4 <lcd_print_int16+0x184>
	{
		lcd_data_write(y+'0');
     9e8:	8a 81       	ldd	r24, Y+2	; 0x02
     9ea:	80 5d       	subi	r24, 0xD0	; 208
     9ec:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
		leading=1;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	89 83       	std	Y+1, r24	; 0x01
	}
	no=no-y*10;
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	9b 81       	ldd	r25, Y+3	; 0x03
     9f8:	9c 01       	movw	r18, r24
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	c9 01       	movw	r24, r18
     a00:	88 0f       	add	r24, r24
     a02:	99 1f       	adc	r25, r25
     a04:	88 0f       	add	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	82 0f       	add	r24, r18
     a0a:	93 1f       	adc	r25, r19
     a0c:	90 95       	com	r25
     a0e:	81 95       	neg	r24
     a10:	9f 4f       	sbci	r25, 0xFF	; 255
     a12:	2c 81       	ldd	r18, Y+4	; 0x04
     a14:	3d 81       	ldd	r19, Y+5	; 0x05
     a16:	82 0f       	add	r24, r18
     a18:	93 1f       	adc	r25, r19
     a1a:	9d 83       	std	Y+5, r25	; 0x05
     a1c:	8c 83       	std	Y+4, r24	; 0x04
	lcd_data_write(no+'0');
     a1e:	8c 81       	ldd	r24, Y+4	; 0x04
     a20:	80 5d       	subi	r24, 0xD0	; 208
     a22:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_data_write>
}
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	08 95       	ret

00000a36 <lcd_print_float>:

// prints float on LCD
void lcd_print_float(float no)
{
     a36:	df 93       	push	r29
     a38:	cf 93       	push	r28
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	2b 97       	sbiw	r28, 0x0b	; 11
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	68 87       	std	Y+8, r22	; 0x08
     a4c:	79 87       	std	Y+9, r23	; 0x09
     a4e:	8a 87       	std	Y+10, r24	; 0x0a
     a50:	9b 87       	std	Y+11, r25	; 0x0b
	uint8_t	x,i;
	int8_t	e;
	float	y;

	if(no<0)
     a52:	68 85       	ldd	r22, Y+8	; 0x08
     a54:	79 85       	ldd	r23, Y+9	; 0x09
     a56:	8a 85       	ldd	r24, Y+10	; 0x0a
     a58:	9b 85       	ldd	r25, Y+11	; 0x0b
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__cmpsf2>
     a66:	88 23       	and	r24, r24
     a68:	6c f4       	brge	.+26     	; 0xa84 <lcd_print_float+0x4e>
	{
		lcd_print_string("-");
     a6a:	80 e6       	ldi	r24, 0x60	; 96
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
		no=(-no);
     a72:	88 85       	ldd	r24, Y+8	; 0x08
     a74:	99 85       	ldd	r25, Y+9	; 0x09
     a76:	aa 85       	ldd	r26, Y+10	; 0x0a
     a78:	bb 85       	ldd	r27, Y+11	; 0x0b
     a7a:	b0 58       	subi	r27, 0x80	; 128
     a7c:	88 87       	std	Y+8, r24	; 0x08
     a7e:	99 87       	std	Y+9, r25	; 0x09
     a80:	aa 87       	std	Y+10, r26	; 0x0a
     a82:	bb 87       	std	Y+11, r27	; 0x0b
	}
	e=log10(no);
     a84:	88 85       	ldd	r24, Y+8	; 0x08
     a86:	99 85       	ldd	r25, Y+9	; 0x09
     a88:	aa 85       	ldd	r26, Y+10	; 0x0a
     a8a:	bb 85       	ldd	r27, Y+11	; 0x0b
     a8c:	bc 01       	movw	r22, r24
     a8e:	cd 01       	movw	r24, r26
     a90:	0e 94 75 0f 	call	0x1eea	; 0x1eea <log10>
     a94:	dc 01       	movw	r26, r24
     a96:	cb 01       	movw	r24, r22
     a98:	bc 01       	movw	r22, r24
     a9a:	cd 01       	movw	r24, r26
     a9c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	8d 83       	std	Y+5, r24	; 0x05

	if(e!=0)
     aa6:	8d 81       	ldd	r24, Y+5	; 0x05
     aa8:	88 23       	and	r24, r24
     aaa:	09 f4       	brne	.+2      	; 0xaae <lcd_print_float+0x78>
     aac:	46 c0       	rjmp	.+140    	; 0xb3a <lcd_print_float+0x104>
	{
		x=no/(pow(10,e));
     aae:	8d 81       	ldd	r24, Y+5	; 0x05
     ab0:	99 27       	eor	r25, r25
     ab2:	87 fd       	sbrc	r24, 7
     ab4:	90 95       	com	r25
     ab6:	a9 2f       	mov	r26, r25
     ab8:	b9 2f       	mov	r27, r25
     aba:	bc 01       	movw	r22, r24
     abc:	cd 01       	movw	r24, r26
     abe:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	80 e2       	ldi	r24, 0x20	; 32
     acc:	91 e4       	ldi	r25, 0x41	; 65
     ace:	0e 94 23 10 	call	0x2046	; 0x2046 <pow>
     ad2:	dc 01       	movw	r26, r24
     ad4:	cb 01       	movw	r24, r22
     ad6:	9c 01       	movw	r18, r24
     ad8:	ad 01       	movw	r20, r26
     ada:	68 85       	ldd	r22, Y+8	; 0x08
     adc:	79 85       	ldd	r23, Y+9	; 0x09
     ade:	8a 85       	ldd	r24, Y+10	; 0x0a
     ae0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ae2:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	bc 01       	movw	r22, r24
     aec:	cd 01       	movw	r24, r26
     aee:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8f 83       	std	Y+7, r24	; 0x07
		y=no/(pow(10,e));
     af8:	8d 81       	ldd	r24, Y+5	; 0x05
     afa:	99 27       	eor	r25, r25
     afc:	87 fd       	sbrc	r24, 7
     afe:	90 95       	com	r25
     b00:	a9 2f       	mov	r26, r25
     b02:	b9 2f       	mov	r27, r25
     b04:	bc 01       	movw	r22, r24
     b06:	cd 01       	movw	r24, r26
     b08:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     b0c:	9b 01       	movw	r18, r22
     b0e:	ac 01       	movw	r20, r24
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	80 e2       	ldi	r24, 0x20	; 32
     b16:	91 e4       	ldi	r25, 0x41	; 65
     b18:	0e 94 23 10 	call	0x2046	; 0x2046 <pow>
     b1c:	9b 01       	movw	r18, r22
     b1e:	ac 01       	movw	r20, r24
     b20:	68 85       	ldd	r22, Y+8	; 0x08
     b22:	79 85       	ldd	r23, Y+9	; 0x09
     b24:	8a 85       	ldd	r24, Y+10	; 0x0a
     b26:	9b 85       	ldd	r25, Y+11	; 0x0b
     b28:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     b2c:	dc 01       	movw	r26, r24
     b2e:	cb 01       	movw	r24, r22
     b30:	89 83       	std	Y+1, r24	; 0x01
     b32:	9a 83       	std	Y+2, r25	; 0x02
     b34:	ab 83       	std	Y+3, r26	; 0x03
     b36:	bc 83       	std	Y+4, r27	; 0x04
     b38:	11 c0       	rjmp	.+34     	; 0xb5c <lcd_print_float+0x126>
	}
	else
	{
		x=no;
     b3a:	68 85       	ldd	r22, Y+8	; 0x08
     b3c:	79 85       	ldd	r23, Y+9	; 0x09
     b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b40:	9b 85       	ldd	r25, Y+11	; 0x0b
     b42:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     b46:	dc 01       	movw	r26, r24
     b48:	cb 01       	movw	r24, r22
     b4a:	8f 83       	std	Y+7, r24	; 0x07
		y=no;
     b4c:	88 85       	ldd	r24, Y+8	; 0x08
     b4e:	99 85       	ldd	r25, Y+9	; 0x09
     b50:	aa 85       	ldd	r26, Y+10	; 0x0a
     b52:	bb 85       	ldd	r27, Y+11	; 0x0b
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	ab 83       	std	Y+3, r26	; 0x03
     b5a:	bc 83       	std	Y+4, r27	; 0x04
	}
	if(x<1)
     b5c:	8f 81       	ldd	r24, Y+7	; 0x07
     b5e:	88 23       	and	r24, r24
     b60:	09 f0       	breq	.+2      	; 0xb64 <lcd_print_float+0x12e>
     b62:	46 c0       	rjmp	.+140    	; 0xbf0 <lcd_print_float+0x1ba>
	{
		e--;
     b64:	8d 81       	ldd	r24, Y+5	; 0x05
     b66:	81 50       	subi	r24, 0x01	; 1
     b68:	8d 83       	std	Y+5, r24	; 0x05
		x=no/(pow(10,e));
     b6a:	8d 81       	ldd	r24, Y+5	; 0x05
     b6c:	99 27       	eor	r25, r25
     b6e:	87 fd       	sbrc	r24, 7
     b70:	90 95       	com	r25
     b72:	a9 2f       	mov	r26, r25
     b74:	b9 2f       	mov	r27, r25
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	91 e4       	ldi	r25, 0x41	; 65
     b8a:	0e 94 23 10 	call	0x2046	; 0x2046 <pow>
     b8e:	9b 01       	movw	r18, r22
     b90:	ac 01       	movw	r20, r24
     b92:	68 85       	ldd	r22, Y+8	; 0x08
     b94:	79 85       	ldd	r23, Y+9	; 0x09
     b96:	8a 85       	ldd	r24, Y+10	; 0x0a
     b98:	9b 85       	ldd	r25, Y+11	; 0x0b
     b9a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	bc 01       	movw	r22, r24
     ba4:	cd 01       	movw	r24, r26
     ba6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	8f 83       	std	Y+7, r24	; 0x07
		y=no/(pow(10,e));
     bb0:	8d 81       	ldd	r24, Y+5	; 0x05
     bb2:	99 27       	eor	r25, r25
     bb4:	87 fd       	sbrc	r24, 7
     bb6:	90 95       	com	r25
     bb8:	a9 2f       	mov	r26, r25
     bba:	b9 2f       	mov	r27, r25
     bbc:	bc 01       	movw	r22, r24
     bbe:	cd 01       	movw	r24, r26
     bc0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e2       	ldi	r24, 0x20	; 32
     bce:	91 e4       	ldi	r25, 0x41	; 65
     bd0:	0e 94 23 10 	call	0x2046	; 0x2046 <pow>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	68 85       	ldd	r22, Y+8	; 0x08
     bda:	79 85       	ldd	r23, Y+9	; 0x09
     bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
     bde:	9b 85       	ldd	r25, Y+11	; 0x0b
     be0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	9a 83       	std	Y+2, r25	; 0x02
     bec:	ab 83       	std	Y+3, r26	; 0x03
     bee:	bc 83       	std	Y+4, r27	; 0x04
	}
	lcd_print_uint8(x);
     bf0:	8f 81       	ldd	r24, Y+7	; 0x07
     bf2:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_print_uint8>
	lcd_print_string(".");
     bf6:	82 e6       	ldi	r24, 0x62	; 98
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>

	for(i=0;i<5;i++)
     bfe:	1e 82       	std	Y+6, r1	; 0x06
     c00:	32 c0       	rjmp	.+100    	; 0xc66 <lcd_print_float+0x230>
	{
		y=(y-x)*10;
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	aa 27       	eor	r26, r26
     c0a:	97 fd       	sbrc	r25, 7
     c0c:	a0 95       	com	r26
     c0e:	ba 2f       	mov	r27, r26
     c10:	bc 01       	movw	r22, r24
     c12:	cd 01       	movw	r24, r26
     c14:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     c18:	9b 01       	movw	r18, r22
     c1a:	ac 01       	movw	r20, r24
     c1c:	69 81       	ldd	r22, Y+1	; 0x01
     c1e:	7a 81       	ldd	r23, Y+2	; 0x02
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	9c 81       	ldd	r25, Y+4	; 0x04
     c24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <__subsf3>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	bc 01       	movw	r22, r24
     c2e:	cd 01       	movw	r24, r26
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e2       	ldi	r20, 0x20	; 32
     c36:	51 e4       	ldi	r21, 0x41	; 65
     c38:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
     c3c:	dc 01       	movw	r26, r24
     c3e:	cb 01       	movw	r24, r22
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	9a 83       	std	Y+2, r25	; 0x02
     c44:	ab 83       	std	Y+3, r26	; 0x03
     c46:	bc 83       	std	Y+4, r27	; 0x04
		x=y;
     c48:	69 81       	ldd	r22, Y+1	; 0x01
     c4a:	7a 81       	ldd	r23, Y+2	; 0x02
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__fixunssfsi>
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	8f 83       	std	Y+7, r24	; 0x07
		lcd_print_uint8(x);
     c5a:	8f 81       	ldd	r24, Y+7	; 0x07
     c5c:	0e 94 ad 02 	call	0x55a	; 0x55a <lcd_print_uint8>
		y=no/(pow(10,e));
	}
	lcd_print_uint8(x);
	lcd_print_string(".");

	for(i=0;i<5;i++)
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	8f 5f       	subi	r24, 0xFF	; 255
     c64:	8e 83       	std	Y+6, r24	; 0x06
     c66:	8e 81       	ldd	r24, Y+6	; 0x06
     c68:	85 30       	cpi	r24, 0x05	; 5
     c6a:	58 f2       	brcs	.-106    	; 0xc02 <lcd_print_float+0x1cc>
		x=y;
		lcd_print_uint8(x);
		
	}

	lcd_print_string("E");
     c6c:	84 e6       	ldi	r24, 0x64	; 100
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
	lcd_print_int8(e);
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	0e 94 05 03 	call	0x60a	; 0x60a <lcd_print_int8>

}
     c7a:	2b 96       	adiw	r28, 0x0b	; 11
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	f8 94       	cli
     c80:	de bf       	out	0x3e, r29	; 62
     c82:	0f be       	out	0x3f, r0	; 63
     c84:	cd bf       	out	0x3d, r28	; 61
     c86:	cf 91       	pop	r28
     c88:	df 91       	pop	r29
     c8a:	08 95       	ret

00000c8c <lcd_printf>:
//  same for gcc for the AVR
// no formatting is implemented
// \n \t etc not yet supported
//
void lcd_printf(char *fmt, ...)
{
     c8c:	df 93       	push	r29
     c8e:	cf 93       	push	r28
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	a7 97       	sbiw	r28, 0x27	; 39
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
	int16_t	ival;
	double dval;
	uint16_t base,uval;
	int8_t scratch[16];

	va_start(ap,fmt);
     ca0:	ce 01       	movw	r24, r28
     ca2:	8e 96       	adiw	r24, 0x2e	; 46
     ca4:	9d 8b       	std	Y+21, r25	; 0x15
     ca6:	8c 8b       	std	Y+20, r24	; 0x14
	for(p=fmt;*p;p++)
     ca8:	8c a5       	ldd	r24, Y+44	; 0x2c
     caa:	9d a5       	ldd	r25, Y+45	; 0x2d
     cac:	9b 8b       	std	Y+19, r25	; 0x13
     cae:	8a 8b       	std	Y+18, r24	; 0x12
     cb0:	98 c1       	rjmp	.+816    	; 0xfe2 <lcd_printf+0x356>
	{
		if(*p!='%')
     cb2:	ea 89       	ldd	r30, Y+18	; 0x12
     cb4:	fb 89       	ldd	r31, Y+19	; 0x13
     cb6:	80 81       	ld	r24, Z
     cb8:	85 32       	cpi	r24, 0x25	; 37
     cba:	c1 f0       	breq	.+48     	; 0xcec <lcd_printf+0x60>
		{
			if(*p=='\n')
     cbc:	ea 89       	ldd	r30, Y+18	; 0x12
     cbe:	fb 89       	ldd	r31, Y+19	; 0x13
     cc0:	80 81       	ld	r24, Z
     cc2:	8a 30       	cpi	r24, 0x0A	; 10
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <lcd_printf+0x3c>
     cc6:	88 c1       	rjmp	.+784    	; 0xfd8 <lcd_printf+0x34c>
			;
			else if(*p=='\t')
     cc8:	ea 89       	ldd	r30, Y+18	; 0x12
     cca:	fb 89       	ldd	r31, Y+19	; 0x13
     ccc:	80 81       	ld	r24, Z
     cce:	89 30       	cpi	r24, 0x09	; 9
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <lcd_printf+0x48>
     cd2:	82 c1       	rjmp	.+772    	; 0xfd8 <lcd_printf+0x34c>
			;
			else if(*p=='\b')
     cd4:	ea 89       	ldd	r30, Y+18	; 0x12
     cd6:	fb 89       	ldd	r31, Y+19	; 0x13
     cd8:	80 81       	ld	r24, Z
     cda:	88 30       	cpi	r24, 0x08	; 8
     cdc:	09 f4       	brne	.+2      	; 0xce0 <lcd_printf+0x54>
     cde:	7c c1       	rjmp	.+760    	; 0xfd8 <lcd_printf+0x34c>
			;
			else
				lcd_print_char(*p);
     ce0:	ea 89       	ldd	r30, Y+18	; 0x12
     ce2:	fb 89       	ldd	r31, Y+19	; 0x13
     ce4:	80 81       	ld	r24, Z
     ce6:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_print_char>
     cea:	76 c1       	rjmp	.+748    	; 0xfd8 <lcd_printf+0x34c>
			continue;
		}

		switch(*++p)
     cec:	8a 89       	ldd	r24, Y+18	; 0x12
     cee:	9b 89       	ldd	r25, Y+19	; 0x13
     cf0:	01 96       	adiw	r24, 0x01	; 1
     cf2:	9b 8b       	std	Y+19, r25	; 0x13
     cf4:	8a 8b       	std	Y+18, r24	; 0x12
     cf6:	ea 89       	ldd	r30, Y+18	; 0x12
     cf8:	fb 89       	ldd	r31, Y+19	; 0x13
     cfa:	80 81       	ld	r24, Z
     cfc:	28 2f       	mov	r18, r24
     cfe:	33 27       	eor	r19, r19
     d00:	27 fd       	sbrc	r18, 7
     d02:	30 95       	com	r19
     d04:	3f a3       	std	Y+39, r19	; 0x27
     d06:	2e a3       	std	Y+38, r18	; 0x26
     d08:	8e a1       	ldd	r24, Y+38	; 0x26
     d0a:	9f a1       	ldd	r25, Y+39	; 0x27
     d0c:	89 36       	cpi	r24, 0x69	; 105
     d0e:	91 05       	cpc	r25, r1
     d10:	09 f4       	brne	.+2      	; 0xd14 <lcd_printf+0x88>
     d12:	42 c0       	rjmp	.+132    	; 0xd98 <lcd_printf+0x10c>
     d14:	2e a1       	ldd	r18, Y+38	; 0x26
     d16:	3f a1       	ldd	r19, Y+39	; 0x27
     d18:	2a 36       	cpi	r18, 0x6A	; 106
     d1a:	31 05       	cpc	r19, r1
     d1c:	f4 f4       	brge	.+60     	; 0xd5a <lcd_printf+0xce>
     d1e:	8e a1       	ldd	r24, Y+38	; 0x26
     d20:	9f a1       	ldd	r25, Y+39	; 0x27
     d22:	83 36       	cpi	r24, 0x63	; 99
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <lcd_printf+0x9e>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <lcd_printf+0x12c>
     d2a:	2e a1       	ldd	r18, Y+38	; 0x26
     d2c:	3f a1       	ldd	r19, Y+39	; 0x27
     d2e:	24 36       	cpi	r18, 0x64	; 100
     d30:	31 05       	cpc	r19, r1
     d32:	3c f4       	brge	.+14     	; 0xd42 <lcd_printf+0xb6>
     d34:	8e a1       	ldd	r24, Y+38	; 0x26
     d36:	9f a1       	ldd	r25, Y+39	; 0x27
     d38:	88 35       	cpi	r24, 0x58	; 88
     d3a:	91 05       	cpc	r25, r1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <lcd_printf+0xb4>
     d3e:	72 c0       	rjmp	.+228    	; 0xe24 <lcd_printf+0x198>
     d40:	46 c1       	rjmp	.+652    	; 0xfce <lcd_printf+0x342>
     d42:	2e a1       	ldd	r18, Y+38	; 0x26
     d44:	3f a1       	ldd	r19, Y+39	; 0x27
     d46:	24 36       	cpi	r18, 0x64	; 100
     d48:	31 05       	cpc	r19, r1
     d4a:	31 f1       	breq	.+76     	; 0xd98 <lcd_printf+0x10c>
     d4c:	8e a1       	ldd	r24, Y+38	; 0x26
     d4e:	9f a1       	ldd	r25, Y+39	; 0x27
     d50:	86 36       	cpi	r24, 0x66	; 102
     d52:	91 05       	cpc	r25, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <lcd_printf+0xcc>
     d56:	3e c0       	rjmp	.+124    	; 0xdd4 <lcd_printf+0x148>
     d58:	3a c1       	rjmp	.+628    	; 0xfce <lcd_printf+0x342>
     d5a:	2e a1       	ldd	r18, Y+38	; 0x26
     d5c:	3f a1       	ldd	r19, Y+39	; 0x27
     d5e:	23 37       	cpi	r18, 0x73	; 115
     d60:	31 05       	cpc	r19, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <lcd_printf+0xda>
     d64:	4f c0       	rjmp	.+158    	; 0xe04 <lcd_printf+0x178>
     d66:	8e a1       	ldd	r24, Y+38	; 0x26
     d68:	9f a1       	ldd	r25, Y+39	; 0x27
     d6a:	84 37       	cpi	r24, 0x74	; 116
     d6c:	91 05       	cpc	r25, r1
     d6e:	3c f4       	brge	.+14     	; 0xd7e <lcd_printf+0xf2>
     d70:	2e a1       	ldd	r18, Y+38	; 0x26
     d72:	3f a1       	ldd	r19, Y+39	; 0x27
     d74:	2f 36       	cpi	r18, 0x6F	; 111
     d76:	31 05       	cpc	r19, r1
     d78:	09 f4       	brne	.+2      	; 0xd7c <lcd_printf+0xf0>
     d7a:	9b c0       	rjmp	.+310    	; 0xeb2 <lcd_printf+0x226>
     d7c:	28 c1       	rjmp	.+592    	; 0xfce <lcd_printf+0x342>
     d7e:	8e a1       	ldd	r24, Y+38	; 0x26
     d80:	9f a1       	ldd	r25, Y+39	; 0x27
     d82:	85 37       	cpi	r24, 0x75	; 117
     d84:	91 05       	cpc	r25, r1
     d86:	09 f4       	brne	.+2      	; 0xd8a <lcd_printf+0xfe>
     d88:	db c0       	rjmp	.+438    	; 0xf40 <lcd_printf+0x2b4>
     d8a:	2e a1       	ldd	r18, Y+38	; 0x26
     d8c:	3f a1       	ldd	r19, Y+39	; 0x27
     d8e:	28 37       	cpi	r18, 0x78	; 120
     d90:	31 05       	cpc	r19, r1
     d92:	09 f4       	brne	.+2      	; 0xd96 <lcd_printf+0x10a>
     d94:	47 c0       	rjmp	.+142    	; 0xe24 <lcd_printf+0x198>
     d96:	1b c1       	rjmp	.+566    	; 0xfce <lcd_printf+0x342>
		{
			case 'd':
			case 'i':
				ival=va_arg(ap,int16_t);
     d98:	2c 89       	ldd	r18, Y+20	; 0x14
     d9a:	3d 89       	ldd	r19, Y+21	; 0x15
     d9c:	c9 01       	movw	r24, r18
     d9e:	02 96       	adiw	r24, 0x02	; 2
     da0:	9d 8b       	std	Y+21, r25	; 0x15
     da2:	8c 8b       	std	Y+20, r24	; 0x14
     da4:	f9 01       	movw	r30, r18
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	9d 87       	std	Y+13, r25	; 0x0d
     dac:	8c 87       	std	Y+12, r24	; 0x0c
				lcd_print_int16(ival);
     dae:	8c 85       	ldd	r24, Y+12	; 0x0c
     db0:	9d 85       	ldd	r25, Y+13	; 0x0d
     db2:	0e 94 38 04 	call	0x870	; 0x870 <lcd_print_int16>
     db6:	10 c1       	rjmp	.+544    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'c':
				cval=va_arg(ap,int16_t);		// this is not clean does not work with int8_t
     db8:	2c 89       	ldd	r18, Y+20	; 0x14
     dba:	3d 89       	ldd	r19, Y+21	; 0x15
     dbc:	c9 01       	movw	r24, r18
     dbe:	02 96       	adiw	r24, 0x02	; 2
     dc0:	9d 8b       	std	Y+21, r25	; 0x15
     dc2:	8c 8b       	std	Y+20, r24	; 0x14
     dc4:	f9 01       	movw	r30, r18
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	8f 87       	std	Y+15, r24	; 0x0f
				lcd_print_char(cval);			// this seems to be a problem
     dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dce:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_print_char>
     dd2:	02 c1       	rjmp	.+516    	; 0xfd8 <lcd_printf+0x34c>
				break;							// with the va_arg macro

			case 'f':
				dval=va_arg(ap,double);
     dd4:	2c 89       	ldd	r18, Y+20	; 0x14
     dd6:	3d 89       	ldd	r19, Y+21	; 0x15
     dd8:	c9 01       	movw	r24, r18
     dda:	04 96       	adiw	r24, 0x04	; 4
     ddc:	9d 8b       	std	Y+21, r25	; 0x15
     dde:	8c 8b       	std	Y+20, r24	; 0x14
     de0:	f9 01       	movw	r30, r18
     de2:	80 81       	ld	r24, Z
     de4:	91 81       	ldd	r25, Z+1	; 0x01
     de6:	a2 81       	ldd	r26, Z+2	; 0x02
     de8:	b3 81       	ldd	r27, Z+3	; 0x03
     dea:	88 87       	std	Y+8, r24	; 0x08
     dec:	99 87       	std	Y+9, r25	; 0x09
     dee:	aa 87       	std	Y+10, r26	; 0x0a
     df0:	bb 87       	std	Y+11, r27	; 0x0b
				lcd_print_float(dval);
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	99 85       	ldd	r25, Y+9	; 0x09
     df6:	aa 85       	ldd	r26, Y+10	; 0x0a
     df8:	bb 85       	ldd	r27, Y+11	; 0x0b
     dfa:	bc 01       	movw	r22, r24
     dfc:	cd 01       	movw	r24, r26
     dfe:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print_float>
     e02:	ea c0       	rjmp	.+468    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 's':
				sval = va_arg(ap,char *);
     e04:	2c 89       	ldd	r18, Y+20	; 0x14
     e06:	3d 89       	ldd	r19, Y+21	; 0x15
     e08:	c9 01       	movw	r24, r18
     e0a:	02 96       	adiw	r24, 0x02	; 2
     e0c:	9d 8b       	std	Y+21, r25	; 0x15
     e0e:	8c 8b       	std	Y+20, r24	; 0x14
     e10:	f9 01       	movw	r30, r18
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	99 8b       	std	Y+17, r25	; 0x11
     e18:	88 8b       	std	Y+16, r24	; 0x10
				lcd_print_string(sval);
     e1a:	88 89       	ldd	r24, Y+16	; 0x10
     e1c:	99 89       	ldd	r25, Y+17	; 0x11
     e1e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     e22:	da c0       	rjmp	.+436    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'x':
			case 'X':
				base = 16;
     e24:	80 e1       	ldi	r24, 0x10	; 16
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	9f 83       	std	Y+7, r25	; 0x07
     e2a:	8e 83       	std	Y+6, r24	; 0x06
				sval = scratch + 16;
     e2c:	ce 01       	movw	r24, r28
     e2e:	46 96       	adiw	r24, 0x16	; 22
     e30:	40 96       	adiw	r24, 0x10	; 16
     e32:	99 8b       	std	Y+17, r25	; 0x11
     e34:	88 8b       	std	Y+16, r24	; 0x10
				*--sval = 0;
     e36:	88 89       	ldd	r24, Y+16	; 0x10
     e38:	99 89       	ldd	r25, Y+17	; 0x11
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	99 8b       	std	Y+17, r25	; 0x11
     e3e:	88 8b       	std	Y+16, r24	; 0x10
     e40:	e8 89       	ldd	r30, Y+16	; 0x10
     e42:	f9 89       	ldd	r31, Y+17	; 0x11
     e44:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
     e46:	2c 89       	ldd	r18, Y+20	; 0x14
     e48:	3d 89       	ldd	r19, Y+21	; 0x15
     e4a:	c9 01       	movw	r24, r18
     e4c:	02 96       	adiw	r24, 0x02	; 2
     e4e:	9d 8b       	std	Y+21, r25	; 0x15
     e50:	8c 8b       	std	Y+20, r24	; 0x14
     e52:	f9 01       	movw	r30, r18
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	9d 83       	std	Y+5, r25	; 0x05
     e5a:	8c 83       	std	Y+4, r24	; 0x04
				do {
					char ch = uval % base + '0';
     e5c:	8c 81       	ldd	r24, Y+4	; 0x04
     e5e:	9d 81       	ldd	r25, Y+5	; 0x05
     e60:	2e 81       	ldd	r18, Y+6	; 0x06
     e62:	3f 81       	ldd	r19, Y+7	; 0x07
     e64:	b9 01       	movw	r22, r18
     e66:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     e6a:	80 5d       	subi	r24, 0xD0	; 208
     e6c:	8b 83       	std	Y+3, r24	; 0x03
					if (ch > '9')
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	8a 33       	cpi	r24, 0x3A	; 58
     e72:	18 f0       	brcs	.+6      	; 0xe7a <lcd_printf+0x1ee>
						ch += 'a' - '9' - 1;
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	89 5d       	subi	r24, 0xD9	; 217
     e78:	8b 83       	std	Y+3, r24	; 0x03
					*--sval = ch;
     e7a:	88 89       	ldd	r24, Y+16	; 0x10
     e7c:	99 89       	ldd	r25, Y+17	; 0x11
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	99 8b       	std	Y+17, r25	; 0x11
     e82:	88 8b       	std	Y+16, r24	; 0x10
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	e8 89       	ldd	r30, Y+16	; 0x10
     e88:	f9 89       	ldd	r31, Y+17	; 0x11
     e8a:	80 83       	st	Z, r24
					uval /= base;
     e8c:	8c 81       	ldd	r24, Y+4	; 0x04
     e8e:	9d 81       	ldd	r25, Y+5	; 0x05
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	b9 01       	movw	r22, r18
     e96:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     e9a:	cb 01       	movw	r24, r22
     e9c:	9d 83       	std	Y+5, r25	; 0x05
     e9e:	8c 83       	std	Y+4, r24	; 0x04
				} while (uval);
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	9d 81       	ldd	r25, Y+5	; 0x05
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	d1 f6       	brne	.-76     	; 0xe5c <lcd_printf+0x1d0>
				lcd_print_string(sval);
     ea8:	88 89       	ldd	r24, Y+16	; 0x10
     eaa:	99 89       	ldd	r25, Y+17	; 0x11
     eac:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     eb0:	93 c0       	rjmp	.+294    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'o':
				base = 8;
     eb2:	88 e0       	ldi	r24, 0x08	; 8
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9f 83       	std	Y+7, r25	; 0x07
     eb8:	8e 83       	std	Y+6, r24	; 0x06
				sval = scratch + 16;
     eba:	ce 01       	movw	r24, r28
     ebc:	46 96       	adiw	r24, 0x16	; 22
     ebe:	40 96       	adiw	r24, 0x10	; 16
     ec0:	99 8b       	std	Y+17, r25	; 0x11
     ec2:	88 8b       	std	Y+16, r24	; 0x10
				*--sval = 0;
     ec4:	88 89       	ldd	r24, Y+16	; 0x10
     ec6:	99 89       	ldd	r25, Y+17	; 0x11
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	99 8b       	std	Y+17, r25	; 0x11
     ecc:	88 8b       	std	Y+16, r24	; 0x10
     ece:	e8 89       	ldd	r30, Y+16	; 0x10
     ed0:	f9 89       	ldd	r31, Y+17	; 0x11
     ed2:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
     ed4:	2c 89       	ldd	r18, Y+20	; 0x14
     ed6:	3d 89       	ldd	r19, Y+21	; 0x15
     ed8:	c9 01       	movw	r24, r18
     eda:	02 96       	adiw	r24, 0x02	; 2
     edc:	9d 8b       	std	Y+21, r25	; 0x15
     ede:	8c 8b       	std	Y+20, r24	; 0x14
     ee0:	f9 01       	movw	r30, r18
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	9d 83       	std	Y+5, r25	; 0x05
     ee8:	8c 83       	std	Y+4, r24	; 0x04
				do {
					char ch = uval % base + '0';
     eea:	8c 81       	ldd	r24, Y+4	; 0x04
     eec:	9d 81       	ldd	r25, Y+5	; 0x05
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	b9 01       	movw	r22, r18
     ef4:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     ef8:	80 5d       	subi	r24, 0xD0	; 208
     efa:	8a 83       	std	Y+2, r24	; 0x02
					if (ch > '9')
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	8a 33       	cpi	r24, 0x3A	; 58
     f00:	18 f0       	brcs	.+6      	; 0xf08 <lcd_printf+0x27c>
					ch += 'a' - '9' - 1;
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	89 5d       	subi	r24, 0xD9	; 217
     f06:	8a 83       	std	Y+2, r24	; 0x02
					*--sval = ch;
     f08:	88 89       	ldd	r24, Y+16	; 0x10
     f0a:	99 89       	ldd	r25, Y+17	; 0x11
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	99 8b       	std	Y+17, r25	; 0x11
     f10:	88 8b       	std	Y+16, r24	; 0x10
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	e8 89       	ldd	r30, Y+16	; 0x10
     f16:	f9 89       	ldd	r31, Y+17	; 0x11
     f18:	80 83       	st	Z, r24
					uval /= base;
     f1a:	8c 81       	ldd	r24, Y+4	; 0x04
     f1c:	9d 81       	ldd	r25, Y+5	; 0x05
     f1e:	2e 81       	ldd	r18, Y+6	; 0x06
     f20:	3f 81       	ldd	r19, Y+7	; 0x07
     f22:	b9 01       	movw	r22, r18
     f24:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     f28:	cb 01       	movw	r24, r22
     f2a:	9d 83       	std	Y+5, r25	; 0x05
     f2c:	8c 83       	std	Y+4, r24	; 0x04
				} while (uval);
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	9d 81       	ldd	r25, Y+5	; 0x05
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	d1 f6       	brne	.-76     	; 0xeea <lcd_printf+0x25e>
				lcd_print_string(sval);
     f36:	88 89       	ldd	r24, Y+16	; 0x10
     f38:	99 89       	ldd	r25, Y+17	; 0x11
     f3a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     f3e:	4c c0       	rjmp	.+152    	; 0xfd8 <lcd_printf+0x34c>
				break;

			case 'u':
				base = 10;
     f40:	8a e0       	ldi	r24, 0x0A	; 10
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	9f 83       	std	Y+7, r25	; 0x07
     f46:	8e 83       	std	Y+6, r24	; 0x06
				sval = scratch + 16;
     f48:	ce 01       	movw	r24, r28
     f4a:	46 96       	adiw	r24, 0x16	; 22
     f4c:	40 96       	adiw	r24, 0x10	; 16
     f4e:	99 8b       	std	Y+17, r25	; 0x11
     f50:	88 8b       	std	Y+16, r24	; 0x10
				*--sval = 0;
     f52:	88 89       	ldd	r24, Y+16	; 0x10
     f54:	99 89       	ldd	r25, Y+17	; 0x11
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	99 8b       	std	Y+17, r25	; 0x11
     f5a:	88 8b       	std	Y+16, r24	; 0x10
     f5c:	e8 89       	ldd	r30, Y+16	; 0x10
     f5e:	f9 89       	ldd	r31, Y+17	; 0x11
     f60:	10 82       	st	Z, r1
				uval = va_arg(ap,uint16_t);
     f62:	2c 89       	ldd	r18, Y+20	; 0x14
     f64:	3d 89       	ldd	r19, Y+21	; 0x15
     f66:	c9 01       	movw	r24, r18
     f68:	02 96       	adiw	r24, 0x02	; 2
     f6a:	9d 8b       	std	Y+21, r25	; 0x15
     f6c:	8c 8b       	std	Y+20, r24	; 0x14
     f6e:	f9 01       	movw	r30, r18
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	9d 83       	std	Y+5, r25	; 0x05
     f76:	8c 83       	std	Y+4, r24	; 0x04
				do {
					char ch = uval % base + '0';
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	2e 81       	ldd	r18, Y+6	; 0x06
     f7e:	3f 81       	ldd	r19, Y+7	; 0x07
     f80:	b9 01       	movw	r22, r18
     f82:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     f86:	80 5d       	subi	r24, 0xD0	; 208
     f88:	89 83       	std	Y+1, r24	; 0x01
					if (ch > '9')
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	8a 33       	cpi	r24, 0x3A	; 58
     f8e:	18 f0       	brcs	.+6      	; 0xf96 <lcd_printf+0x30a>
						ch += 'a' - '9' - 1;
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	89 5d       	subi	r24, 0xD9	; 217
     f94:	89 83       	std	Y+1, r24	; 0x01
					*--sval = ch;
     f96:	88 89       	ldd	r24, Y+16	; 0x10
     f98:	99 89       	ldd	r25, Y+17	; 0x11
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	99 8b       	std	Y+17, r25	; 0x11
     f9e:	88 8b       	std	Y+16, r24	; 0x10
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	e8 89       	ldd	r30, Y+16	; 0x10
     fa4:	f9 89       	ldd	r31, Y+17	; 0x11
     fa6:	80 83       	st	Z, r24
					uval /= base;
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	9d 81       	ldd	r25, Y+5	; 0x05
     fac:	2e 81       	ldd	r18, Y+6	; 0x06
     fae:	3f 81       	ldd	r19, Y+7	; 0x07
     fb0:	b9 01       	movw	r22, r18
     fb2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <__udivmodhi4>
     fb6:	cb 01       	movw	r24, r22
     fb8:	9d 83       	std	Y+5, r25	; 0x05
     fba:	8c 83       	std	Y+4, r24	; 0x04
				} while (uval);
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	9d 81       	ldd	r25, Y+5	; 0x05
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	d1 f6       	brne	.-76     	; 0xf78 <lcd_printf+0x2ec>
				lcd_print_string(sval);
     fc4:	88 89       	ldd	r24, Y+16	; 0x10
     fc6:	99 89       	ldd	r25, Y+17	; 0x11
     fc8:	0e 94 62 02 	call	0x4c4	; 0x4c4 <lcd_print_string>
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <lcd_printf+0x34c>
				break;

			default:
				lcd_print_char(*p);
     fce:	ea 89       	ldd	r30, Y+18	; 0x12
     fd0:	fb 89       	ldd	r31, Y+19	; 0x13
     fd2:	80 81       	ld	r24, Z
     fd4:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_print_char>
	double dval;
	uint16_t base,uval;
	int8_t scratch[16];

	va_start(ap,fmt);
	for(p=fmt;*p;p++)
     fd8:	8a 89       	ldd	r24, Y+18	; 0x12
     fda:	9b 89       	ldd	r25, Y+19	; 0x13
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	9b 8b       	std	Y+19, r25	; 0x13
     fe0:	8a 8b       	std	Y+18, r24	; 0x12
     fe2:	ea 89       	ldd	r30, Y+18	; 0x12
     fe4:	fb 89       	ldd	r31, Y+19	; 0x13
     fe6:	80 81       	ld	r24, Z
     fe8:	88 23       	and	r24, r24
     fea:	09 f0       	breq	.+2      	; 0xfee <lcd_printf+0x362>
     fec:	62 ce       	rjmp	.-828    	; 0xcb2 <lcd_printf+0x26>
				lcd_print_char(*p);
				break;
		}
	}
	va_end(ap);
}
     fee:	a7 96       	adiw	r28, 0x27	; 39
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <__vector_16>:
float iavg = 0;
int imax = 0;         //variable for a single average current sample

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ISR(ADC_vect)									   //ADC conversion complete interrupt 
{ 
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
  PORTB=0x00;				//turn off port b for simultaneus sampling 
    102e:	e8 e3       	ldi	r30, 0x38	; 56
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	10 82       	st	Z, r1
 // ADCSRA &= ~(1<<ADEN);  //disables ADC
  //  lcd_printf("%i", ADC);						// prints number coming into the ADC
  //  lcd_goto_xy(0,1);
  	  vsamples[v]= ADC;                           //store ADC sample into vsamples array
    1034:	40 91 6c 00 	lds	r20, 0x006C
    1038:	50 91 6d 00 	lds	r21, 0x006D
    103c:	e4 e2       	ldi	r30, 0x24	; 36
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	91 81       	ldd	r25, Z+1	; 0x01
    1044:	9c 01       	movw	r18, r24
    1046:	ca 01       	movw	r24, r20
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	fc 01       	movw	r30, r24
    104e:	ec 58       	subi	r30, 0x8C	; 140
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	31 83       	std	Z+1, r19	; 0x01
    1054:	20 83       	st	Z, r18
     // PORTB=0xFF;               //flash port b when done to signal ADC sample taken and conversion complete.
//	  initiADC();                                   //go to the current adc sampling function
	if (vsamples[v] > 512)                       //if sample taken is greater than 512 bits, do 2's compliment and make it negative
    1056:	80 91 6c 00 	lds	r24, 0x006C
    105a:	90 91 6d 00 	lds	r25, 0x006D
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	fc 01       	movw	r30, r24
    1064:	ec 58       	subi	r30, 0x8C	; 140
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	22 e0       	ldi	r18, 0x02	; 2
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	92 07       	cpc	r25, r18
    1072:	0c f4       	brge	.+2      	; 0x1076 <__vector_16+0x76>
    1074:	c8 c0       	rjmp	.+400    	; 0x1206 <__vector_16+0x206>
	{
		vsamples[v] = (vsamples[v] - 1);               //2's compliment of voltage samples
    1076:	40 91 6c 00 	lds	r20, 0x006C
    107a:	50 91 6d 00 	lds	r21, 0x006D
    107e:	80 91 6c 00 	lds	r24, 0x006C
    1082:	90 91 6d 00 	lds	r25, 0x006D
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	fc 01       	movw	r30, r24
    108c:	ec 58       	subi	r30, 0x8C	; 140
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	80 81       	ld	r24, Z
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	9c 01       	movw	r18, r24
    1096:	21 50       	subi	r18, 0x01	; 1
    1098:	30 40       	sbci	r19, 0x00	; 0
    109a:	ca 01       	movw	r24, r20
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	fc 01       	movw	r30, r24
    10a2:	ec 58       	subi	r30, 0x8C	; 140
    10a4:	ff 4f       	sbci	r31, 0xFF	; 255
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	20 83       	st	Z, r18
		vsamples[v] = ~(vsamples[v]);	               // 2's compliment of voltage samples
    10aa:	40 91 6c 00 	lds	r20, 0x006C
    10ae:	50 91 6d 00 	lds	r21, 0x006D
    10b2:	80 91 6c 00 	lds	r24, 0x006C
    10b6:	90 91 6d 00 	lds	r25, 0x006D
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	fc 01       	movw	r30, r24
    10c0:	ec 58       	subi	r30, 0x8C	; 140
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	9c 01       	movw	r18, r24
    10ca:	20 95       	com	r18
    10cc:	30 95       	com	r19
    10ce:	ca 01       	movw	r24, r20
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	fc 01       	movw	r30, r24
    10d6:	ec 58       	subi	r30, 0x8C	; 140
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	31 83       	std	Z+1, r19	; 0x01
    10dc:	20 83       	st	Z, r18
		vsamples[v] = vsamples[v] & 0x03FF;            //and it with some zeros for removing extra bits out front
    10de:	40 91 6c 00 	lds	r20, 0x006C
    10e2:	50 91 6d 00 	lds	r21, 0x006D
    10e6:	80 91 6c 00 	lds	r24, 0x006C
    10ea:	90 91 6d 00 	lds	r25, 0x006D
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	fc 01       	movw	r30, r24
    10f4:	ec 58       	subi	r30, 0x8C	; 140
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	80 81       	ld	r24, Z
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	9c 01       	movw	r18, r24
    10fe:	33 70       	andi	r19, 0x03	; 3
    1100:	ca 01       	movw	r24, r20
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	fc 01       	movw	r30, r24
    1108:	ec 58       	subi	r30, 0x8C	; 140
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	31 83       	std	Z+1, r19	; 0x01
    110e:	20 83       	st	Z, r18
		vcalc[v]= ((-(float)vsamples[v]*3.3/512));      //attempted algorithm for converting the adc values into readable values
    1110:	00 91 6c 00 	lds	r16, 0x006C
    1114:	10 91 6d 00 	lds	r17, 0x006D
    1118:	80 91 6c 00 	lds	r24, 0x006C
    111c:	90 91 6d 00 	lds	r25, 0x006D
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	fc 01       	movw	r30, r24
    1126:	ec 58       	subi	r30, 0x8C	; 140
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 81       	ld	r24, Z
    112c:	91 81       	ldd	r25, Z+1	; 0x01
    112e:	aa 27       	eor	r26, r26
    1130:	97 fd       	sbrc	r25, 7
    1132:	a0 95       	com	r26
    1134:	ba 2f       	mov	r27, r26
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	23 e3       	ldi	r18, 0x33	; 51
    1148:	33 e3       	ldi	r19, 0x33	; 51
    114a:	43 e5       	ldi	r20, 0x53	; 83
    114c:	50 ec       	ldi	r21, 0xC0	; 192
    114e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	bc 01       	movw	r22, r24
    1158:	cd 01       	movw	r24, r26
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	54 e4       	ldi	r21, 0x44	; 68
    1162:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	9c 01       	movw	r18, r24
    116c:	ad 01       	movw	r20, r26
    116e:	c8 01       	movw	r24, r16
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	fc 01       	movw	r30, r24
    117a:	e6 50       	subi	r30, 0x06	; 6
    117c:	fc 4f       	sbci	r31, 0xFC	; 252
    117e:	20 83       	st	Z, r18
    1180:	31 83       	std	Z+1, r19	; 0x01
    1182:	42 83       	std	Z+2, r20	; 0x02
    1184:	53 83       	std	Z+3, r21	; 0x03
		vcalc[v]= ((float)(vcalc[v]+2.5+.1058)/1.034);
    1186:	00 91 6c 00 	lds	r16, 0x006C
    118a:	10 91 6d 00 	lds	r17, 0x006D
    118e:	80 91 6c 00 	lds	r24, 0x006C
    1192:	90 91 6d 00 	lds	r25, 0x006D
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	fc 01       	movw	r30, r24
    11a0:	e6 50       	subi	r30, 0x06	; 6
    11a2:	fc 4f       	sbci	r31, 0xFC	; 252
    11a4:	80 81       	ld	r24, Z
    11a6:	91 81       	ldd	r25, Z+1	; 0x01
    11a8:	a2 81       	ldd	r26, Z+2	; 0x02
    11aa:	b3 81       	ldd	r27, Z+3	; 0x03
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e2       	ldi	r20, 0x20	; 32
    11b6:	50 e4       	ldi	r21, 0x40	; 64
    11b8:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	2c ea       	ldi	r18, 0xAC	; 172
    11c6:	3d ea       	ldi	r19, 0xAD	; 173
    11c8:	48 ed       	ldi	r20, 0xD8	; 216
    11ca:	5d e3       	ldi	r21, 0x3D	; 61
    11cc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	bc 01       	movw	r22, r24
    11d6:	cd 01       	movw	r24, r26
    11d8:	2d e1       	ldi	r18, 0x1D	; 29
    11da:	3a e5       	ldi	r19, 0x5A	; 90
    11dc:	44 e8       	ldi	r20, 0x84	; 132
    11de:	5f e3       	ldi	r21, 0x3F	; 63
    11e0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9c 01       	movw	r18, r24
    11ea:	ad 01       	movw	r20, r26
    11ec:	c8 01       	movw	r24, r16
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	fc 01       	movw	r30, r24
    11f8:	e6 50       	subi	r30, 0x06	; 6
    11fa:	fc 4f       	sbci	r31, 0xFC	; 252
    11fc:	20 83       	st	Z, r18
    11fe:	31 83       	std	Z+1, r19	; 0x01
    1200:	42 83       	std	Z+2, r20	; 0x02
    1202:	53 83       	std	Z+3, r21	; 0x03
    1204:	7a c0       	rjmp	.+244    	; 0x12fa <__vector_16+0x2fa>
	//	lcd_clear();
	//	lcd_home();
	}// end if
	else										         // otherwise take sample as it normally appears
	{	
	   vcalc[v]= (((float)vsamples[v]*3.3/512));        // algorithm from datasheet to convert from ADC value into a human accepted voltage level
    1206:	00 91 6c 00 	lds	r16, 0x006C
    120a:	10 91 6d 00 	lds	r17, 0x006D
    120e:	80 91 6c 00 	lds	r24, 0x006C
    1212:	90 91 6d 00 	lds	r25, 0x006D
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	fc 01       	movw	r30, r24
    121c:	ec 58       	subi	r30, 0x8C	; 140
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	aa 27       	eor	r26, r26
    1226:	97 fd       	sbrc	r25, 7
    1228:	a0 95       	com	r26
    122a:	ba 2f       	mov	r27, r26
    122c:	bc 01       	movw	r22, r24
    122e:	cd 01       	movw	r24, r26
    1230:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	23 e3       	ldi	r18, 0x33	; 51
    123e:	33 e3       	ldi	r19, 0x33	; 51
    1240:	43 e5       	ldi	r20, 0x53	; 83
    1242:	50 e4       	ldi	r21, 0x40	; 64
    1244:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	20 e0       	ldi	r18, 0x00	; 0
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	54 e4       	ldi	r21, 0x44	; 68
    1258:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    125c:	dc 01       	movw	r26, r24
    125e:	cb 01       	movw	r24, r22
    1260:	9c 01       	movw	r18, r24
    1262:	ad 01       	movw	r20, r26
    1264:	c8 01       	movw	r24, r16
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	fc 01       	movw	r30, r24
    1270:	e6 50       	subi	r30, 0x06	; 6
    1272:	fc 4f       	sbci	r31, 0xFC	; 252
    1274:	20 83       	st	Z, r18
    1276:	31 83       	std	Z+1, r19	; 0x01
    1278:	42 83       	std	Z+2, r20	; 0x02
    127a:	53 83       	std	Z+3, r21	; 0x03
	   vcalc[v]= ((float)(vcalc[v]+2.5+.1058)/1.034);
    127c:	00 91 6c 00 	lds	r16, 0x006C
    1280:	10 91 6d 00 	lds	r17, 0x006D
    1284:	80 91 6c 00 	lds	r24, 0x006C
    1288:	90 91 6d 00 	lds	r25, 0x006D
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	fc 01       	movw	r30, r24
    1296:	e6 50       	subi	r30, 0x06	; 6
    1298:	fc 4f       	sbci	r31, 0xFC	; 252
    129a:	80 81       	ld	r24, Z
    129c:	91 81       	ldd	r25, Z+1	; 0x01
    129e:	a2 81       	ldd	r26, Z+2	; 0x02
    12a0:	b3 81       	ldd	r27, Z+3	; 0x03
    12a2:	bc 01       	movw	r22, r24
    12a4:	cd 01       	movw	r24, r26
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	50 e4       	ldi	r21, 0x40	; 64
    12ae:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	2c ea       	ldi	r18, 0xAC	; 172
    12bc:	3d ea       	ldi	r19, 0xAD	; 173
    12be:	48 ed       	ldi	r20, 0xD8	; 216
    12c0:	5d e3       	ldi	r21, 0x3D	; 61
    12c2:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	bc 01       	movw	r22, r24
    12cc:	cd 01       	movw	r24, r26
    12ce:	2d e1       	ldi	r18, 0x1D	; 29
    12d0:	3a e5       	ldi	r19, 0x5A	; 90
    12d2:	44 e8       	ldi	r20, 0x84	; 132
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9c 01       	movw	r18, r24
    12e0:	ad 01       	movw	r20, r26
    12e2:	c8 01       	movw	r24, r16
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	fc 01       	movw	r30, r24
    12ee:	e6 50       	subi	r30, 0x06	; 6
    12f0:	fc 4f       	sbci	r31, 0xFC	; 252
    12f2:	20 83       	st	Z, r18
    12f4:	31 83       	std	Z+1, r19	; 0x01
    12f6:	42 83       	std	Z+2, r20	; 0x02
    12f8:	53 83       	std	Z+3, r21	; 0x03
	//	lcd_printf(" [V]");
	//	delay_ms(100);
	//	lcd_clear();
	//	lcd_home();	
	}//end else
	vline[v] = 130.49*vcalc[v] + 1.7182;
    12fa:	00 91 6c 00 	lds	r16, 0x006C
    12fe:	10 91 6d 00 	lds	r17, 0x006D
    1302:	80 91 6c 00 	lds	r24, 0x006C
    1306:	90 91 6d 00 	lds	r25, 0x006D
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	fc 01       	movw	r30, r24
    1314:	e6 50       	subi	r30, 0x06	; 6
    1316:	fc 4f       	sbci	r31, 0xFC	; 252
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	a2 81       	ldd	r26, Z+2	; 0x02
    131e:	b3 81       	ldd	r27, Z+3	; 0x03
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	21 e7       	ldi	r18, 0x71	; 113
    1326:	3d e7       	ldi	r19, 0x7D	; 125
    1328:	42 e0       	ldi	r20, 0x02	; 2
    132a:	53 e4       	ldi	r21, 0x43	; 67
    132c:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	bc 01       	movw	r22, r24
    1336:	cd 01       	movw	r24, r26
    1338:	2a ef       	ldi	r18, 0xFA	; 250
    133a:	3d ee       	ldi	r19, 0xED	; 237
    133c:	4b ed       	ldi	r20, 0xDB	; 219
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9c 01       	movw	r18, r24
    134a:	ad 01       	movw	r20, r26
    134c:	c8 01       	movw	r24, r16
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	fc 01       	movw	r30, r24
    1358:	ee 5a       	subi	r30, 0xAE	; 174
    135a:	f9 4f       	sbci	r31, 0xF9	; 249
    135c:	20 83       	st	Z, r18
    135e:	31 83       	std	Z+1, r19	; 0x01
    1360:	42 83       	std	Z+2, r20	; 0x02
    1362:	53 83       	std	Z+3, r21	; 0x03
	if(v<75)                   //if number of samples is less than 75
    1364:	80 91 6c 00 	lds	r24, 0x006C
    1368:	90 91 6d 00 	lds	r25, 0x006D
    136c:	8b 34       	cpi	r24, 0x4B	; 75
    136e:	91 05       	cpc	r25, r1
    1370:	54 f4       	brge	.+20     	; 0x1386 <__vector_16+0x386>
		v++;                   //increment the pointer in the array 
    1372:	80 91 6c 00 	lds	r24, 0x006C
    1376:	90 91 6d 00 	lds	r25, 0x006D
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	90 93 6d 00 	sts	0x006D, r25
    1380:	80 93 6c 00 	sts	0x006C, r24
    1384:	04 c0       	rjmp	.+8      	; 0x138e <__vector_16+0x38e>
	else
		v=0;                   //otherwise set the pointer back to 0.
    1386:	10 92 6d 00 	sts	0x006D, r1
    138a:	10 92 6c 00 	sts	0x006C, r1
	
	sei();                         //re set global interrupts
    138e:	78 94       	sei

}//end ADC ISR
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	ff 91       	pop	r31
    1396:	ef 91       	pop	r30
    1398:	bf 91       	pop	r27
    139a:	af 91       	pop	r26
    139c:	9f 91       	pop	r25
    139e:	8f 91       	pop	r24
    13a0:	7f 91       	pop	r23
    13a2:	6f 91       	pop	r22
    13a4:	5f 91       	pop	r21
    13a6:	4f 91       	pop	r20
    13a8:	3f 91       	pop	r19
    13aa:	2f 91       	pop	r18
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	0f 90       	pop	r0
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	0f 90       	pop	r0
    13b6:	1f 90       	pop	r1
    13b8:	18 95       	reti

000013ba <__vector_10>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ISR(TIMER0_COMP_vect)       //timer counter compare match vector
{
    13ba:	1f 92       	push	r1
    13bc:	0f 92       	push	r0
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	0f 92       	push	r0
    13c2:	11 24       	eor	r1, r1
    13c4:	8f 93       	push	r24
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC);    //**Note this is now in ADCSRA initialization
    13d6:	a6 e2       	ldi	r26, 0x26	; 38
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e6 e2       	ldi	r30, 0x26	; 38
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	80 64       	ori	r24, 0x40	; 64
    13e2:	8c 93       	st	X, r24
	TCNT0 = 0x00;	        //resets the timer to start counting from zero
    13e4:	e2 e5       	ldi	r30, 0x52	; 82
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	10 82       	st	Z, r1
	TIFR |=(1<<OCF0);       //clears the interrupt flag	
    13ea:	a8 e5       	ldi	r26, 0x58	; 88
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e5       	ldi	r30, 0x58	; 88
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	82 60       	ori	r24, 0x02	; 2
    13f6:	8c 93       	st	X, r24
//	PORTB= 0x00;
}//end Timer counter ISR
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	8f 91       	pop	r24
    1406:	0f 90       	pop	r0
    1408:	0f be       	out	0x3f, r0	; 63
    140a:	0f 90       	pop	r0
    140c:	1f 90       	pop	r1
    140e:	18 95       	reti

00001410 <main>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main(void)         //Main program start
{
    1410:	0f 93       	push	r16
    1412:	1f 93       	push	r17
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <main+0xa>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;       //PORTB output for flasing led test
    141e:	e7 e3       	ldi	r30, 0x37	; 55
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	80 83       	st	Z, r24
	lcd_init();        //initialize lcd
    1426:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_init>
	initCounter();	    //initialize counter
    142a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <initCounter>
    initADC();			//initialize ADC
    142e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <initADC>
	sei();//enables all interrups
    1432:	78 94       	sei
		
	while(1)
	{
		for(int i = 48; i<57 ; i++ )
    1434:	80 e3       	ldi	r24, 0x30	; 48
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a 83       	std	Y+2, r25	; 0x02
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	08 c0       	rjmp	.+16     	; 0x144e <main+0x3e>
		{
		  //data[i] = USART_Receive();
		  //lcd_printf("%c", i);
			USART_Transmit(i);
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <USART_Transmit>
    initADC();			//initialize ADC
	sei();//enables all interrups
		
	while(1)
	{
		for(int i = 48; i<57 ; i++ )
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	9a 83       	std	Y+2, r25	; 0x02
    144c:	89 83       	std	Y+1, r24	; 0x01
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	9a 81       	ldd	r25, Y+2	; 0x02
    1452:	89 33       	cpi	r24, 0x39	; 57
    1454:	91 05       	cpc	r25, r1
    1456:	9c f3       	brlt	.-26     	; 0x143e <main+0x2e>
		  //data[i] = USART_Receive();
		  //lcd_printf("%c", i);
			USART_Transmit(i);
		  //delay_ms(500);
		}//end for
		lcd_printf("%i", ADC);
    1458:	e4 e2       	ldi	r30, 0x24	; 36
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	20 81       	ld	r18, Z
    145e:	31 81       	ldd	r19, Z+1	; 0x01
    1460:	00 d0       	rcall	.+0      	; 0x1462 <main+0x52>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <main+0x54>
    1464:	ed b7       	in	r30, 0x3d	; 61
    1466:	fe b7       	in	r31, 0x3e	; 62
    1468:	31 96       	adiw	r30, 0x01	; 1
    146a:	88 e6       	ldi	r24, 0x68	; 104
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    1472:	33 83       	std	Z+3, r19	; 0x03
    1474:	22 83       	std	Z+2, r18	; 0x02
    1476:	0e 94 46 06 	call	0xc8c	; 0xc8c <lcd_printf>
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
		lcd_goto_xy(0,1);
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_goto_xy>
  		lcd_print_float(vcalc[v]);
    148a:	80 91 6c 00 	lds	r24, 0x006C
    148e:	90 91 6d 00 	lds	r25, 0x006D
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	fc 01       	movw	r30, r24
    149c:	e6 50       	subi	r30, 0x06	; 6
    149e:	fc 4f       	sbci	r31, 0xFC	; 252
    14a0:	80 81       	ld	r24, Z
    14a2:	91 81       	ldd	r25, Z+1	; 0x01
    14a4:	a2 81       	ldd	r26, Z+2	; 0x02
    14a6:	b3 81       	ldd	r27, Z+3	; 0x03
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print_float>
	    lcd_goto_xy(4,0);
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_goto_xy>
	//	lcd_printf("%i", sizeof(uint16_t));
		delay_ms(100);
    14b8:	84 e6       	ldi	r24, 0x64	; 100
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 8a 00 	call	0x114	; 0x114 <delay_ms>
	//	lcd_printf("%i",gain);
	//	lcd_goto_xy(5,1);
	//	lcd_print_float( icalc[i]);
	//	delay_ms(50);
	
		lcd_clear();
    14c0:	0e 94 41 02 	call	0x482	; 0x482 <lcd_clear>
		lcd_home();
    14c4:	0e 94 4b 02 	call	0x496	; 0x496 <lcd_home>

		if( p < 75 )                     //checkig to  make sure power samples are less than 75 samples
    14c8:	80 91 70 00 	lds	r24, 0x0070
    14cc:	90 91 71 00 	lds	r25, 0x0071
    14d0:	8b 34       	cpi	r24, 0x4B	; 75
    14d2:	91 05       	cpc	r25, r1
    14d4:	0c f0       	brlt	.+2      	; 0x14d8 <main+0xc8>
    14d6:	65 c0       	rjmp	.+202    	; 0x15a2 <main+0x192>
		{
			//if( (v == 75) && (i == 75) )  //if both voltage and current have 75 samples taken
			//{
			
				psamples[p] = vsamples[v]*isamples[i];   //multiply the nth sample of each matrix (voltage/current) to obtain an "instantaneous power" matrix
    14d8:	40 91 70 00 	lds	r20, 0x0070
    14dc:	50 91 71 00 	lds	r21, 0x0071
    14e0:	80 91 6c 00 	lds	r24, 0x006C
    14e4:	90 91 6d 00 	lds	r25, 0x006D
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	fc 01       	movw	r30, r24
    14ee:	ec 58       	subi	r30, 0x8C	; 140
    14f0:	ff 4f       	sbci	r31, 0xFF	; 255
    14f2:	20 81       	ld	r18, Z
    14f4:	31 81       	ldd	r19, Z+1	; 0x01
    14f6:	80 91 6e 00 	lds	r24, 0x006E
    14fa:	90 91 6f 00 	lds	r25, 0x006F
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	fc 01       	movw	r30, r24
    1504:	e6 5f       	subi	r30, 0xF6	; 246
    1506:	fe 4f       	sbci	r31, 0xFE	; 254
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	b9 01       	movw	r22, r18
    150e:	68 9f       	mul	r22, r24
    1510:	90 01       	movw	r18, r0
    1512:	69 9f       	mul	r22, r25
    1514:	30 0d       	add	r19, r0
    1516:	78 9f       	mul	r23, r24
    1518:	30 0d       	add	r19, r0
    151a:	11 24       	eor	r1, r1
    151c:	ca 01       	movw	r24, r20
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	fc 01       	movw	r30, r24
    1524:	ea 5c       	subi	r30, 0xCA	; 202
    1526:	fd 4f       	sbci	r31, 0xFD	; 253
    1528:	31 83       	std	Z+1, r19	; 0x01
    152a:	20 83       	st	Z, r18
				psamplediv75[p]=(float)psamples[p]/75;              //divides every current sample by 75 (in anticipation of averaging)	
    152c:	00 91 70 00 	lds	r16, 0x0070
    1530:	10 91 71 00 	lds	r17, 0x0071
    1534:	80 91 70 00 	lds	r24, 0x0070
    1538:	90 91 71 00 	lds	r25, 0x0071
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	fc 01       	movw	r30, r24
    1542:	ea 5c       	subi	r30, 0xCA	; 202
    1544:	fd 4f       	sbci	r31, 0xFD	; 253
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	aa 27       	eor	r26, r26
    154c:	97 fd       	sbrc	r25, 7
    154e:	a0 95       	com	r26
    1550:	ba 2f       	mov	r27, r26
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	46 e9       	ldi	r20, 0x96	; 150
    1568:	52 e4       	ldi	r21, 0x42	; 66
    156a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	9c 01       	movw	r18, r24
    1574:	ad 01       	movw	r20, r26
    1576:	c8 01       	movw	r24, r16
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	fc 01       	movw	r30, r24
    1582:	e2 53       	subi	r30, 0x32	; 50
    1584:	fd 4f       	sbci	r31, 0xFD	; 253
    1586:	20 83       	st	Z, r18
    1588:	31 83       	std	Z+1, r19	; 0x01
    158a:	42 83       	std	Z+2, r20	; 0x02
    158c:	53 83       	std	Z+3, r21	; 0x03
			//}//if
			p++;
    158e:	80 91 70 00 	lds	r24, 0x0070
    1592:	90 91 71 00 	lds	r25, 0x0071
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	90 93 71 00 	sts	0x0071, r25
    159c:	80 93 70 00 	sts	0x0070, r24
    15a0:	49 cf       	rjmp	.-366    	; 0x1434 <main+0x24>
		}//if
		else
		{
			initsumofpoweraverages();							//calls the function to add all the 75 power samples together
    15a2:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <initsumofpoweraverages>
			p=0;
    15a6:	10 92 71 00 	sts	0x0071, r1
    15aa:	10 92 70 00 	sts	0x0070, r1
    15ae:	42 cf       	rjmp	.-380    	; 0x1434 <main+0x24>

000015b0 <initCounter>:
		}//else
	}//end while
}//end main
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initCounter(void)           // Setup for Timer Counter registers
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
		TCCR0 = 0b00010011;      //Normal Mode, Toggle OCO on Compare Match, Clk Prescaller 64
    15b8:	e3 e5       	ldi	r30, 0x53	; 83
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	83 e1       	ldi	r24, 0x13	; 19
    15be:	80 83       	st	Z, r24
		TIMSK |= (1<<OCIE0);     //Enables Compare Match Interrupts
    15c0:	a9 e5       	ldi	r26, 0x59	; 89
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e9 e5       	ldi	r30, 0x59	; 89
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	8c 93       	st	X, r24
    	OCR0 = 0b01010010;       // 82 gives 667us between periods 
    15ce:	ec e5       	ldi	r30, 0x5C	; 92
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	82 e5       	ldi	r24, 0x52	; 82
    15d4:	80 83       	st	Z, r24
}//end Timer counter subroutine
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	08 95       	ret

000015dc <initADC>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initADC(void)                                              //subroutine intializing ADC registers for voltage samples
{
    15dc:	df 93       	push	r29
    15de:	cf 93       	push	r28
    15e0:	cd b7       	in	r28, 0x3d	; 61
    15e2:	de b7       	in	r29, 0x3e	; 62
	//DDRA = 0x00;   //sets port A to input
	ADMUX |= (1<<REFS0) | (1<<MUX4) | (1<<MUX3);                //setting up the admux for the "voltmeter" (AVCC reference w/ ext. cap. , ADCH most sig. bit , 1X Gain, diff. input for ADC0 input ADC2 ref.)
    15e4:	a7 e2       	ldi	r26, 0x27	; 39
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e7 e2       	ldi	r30, 0x27	; 39
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	88 65       	ori	r24, 0x58	; 88
    15f0:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1);  //initializing the ADC status register, ADEN - adc enable,also adjusting prescaler to 64
    15f2:	a6 e2       	ldi	r26, 0x26	; 38
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e6 e2       	ldi	r30, 0x26	; 38
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8e 68       	ori	r24, 0x8E	; 142
    15fe:	8c 93       	st	X, r24
}//end ADC subroutine
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <initiADC>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initiADC(void)                  //subroutine for setting up ADC registers for current samples
{
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
	cli();                          //turns off all interupts
    161a:	f8 94       	cli
	if(gain == 200)   //changed frrom 200 to 10              //if gain is determined to be x200
    161c:	80 91 66 00 	lds	r24, 0x0066
    1620:	90 91 67 00 	lds	r25, 0x0067
    1624:	88 3c       	cpi	r24, 0xC8	; 200
    1626:	91 05       	cpc	r25, r1
    1628:	11 f4       	brne	.+4      	; 0x162e <initiADC+0x28>
	{
		init200iADC();              //set up ADMUX for x200 changed to 10iadc
    162a:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <init200iADC>
	}	
	if (gain == 10)                  //if gain is determined to be x10
    162e:	80 91 66 00 	lds	r24, 0x0066
    1632:	90 91 67 00 	lds	r25, 0x0067
    1636:	8a 30       	cpi	r24, 0x0A	; 10
    1638:	91 05       	cpc	r25, r1
    163a:	11 f4       	brne	.+4      	; 0x1640 <initiADC+0x3a>
	{
		init10iADC();               //set up ADMUX for x10
    163c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <init10iADC>
	}
    if(gain == 1)                    //if gain is determined to be x1
    1640:	80 91 66 00 	lds	r24, 0x0066
    1644:	90 91 67 00 	lds	r25, 0x0067
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	11 f4       	brne	.+4      	; 0x1652 <initiADC+0x4c>
	{
		init1iADC();                  //set up gain to be x1
    164e:	0e 94 8f 0c 	call	0x191e	; 0x191e <init1iADC>
	}     
		ADCSRA |= (1<<ADEN);        //re enable ADC
    1652:	a6 e2       	ldi	r26, 0x26	; 38
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e6 e2       	ldi	r30, 0x26	; 38
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	80 68       	ori	r24, 0x80	; 128
    165e:	8c 93       	st	X, r24
		ADCSRA |= (1<<ADSC);                                //ADC start conversion
    1660:	a6 e2       	ldi	r26, 0x26	; 38
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e6 e2       	ldi	r30, 0x26	; 38
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	80 64       	ori	r24, 0x40	; 64
    166c:	8c 93       	st	X, r24
		while(ADCSRA & (1 << ADSC))                         //waits until the conversion is completed before it continues and saves the value.
    166e:	e6 e2       	ldi	r30, 0x26	; 38
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	80 74       	andi	r24, 0x40	; 64
    167a:	90 70       	andi	r25, 0x00	; 0
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	b9 f7       	brne	.-18     	; 0x166e <initiADC+0x68>
		; 
		PORTB=0xFF;				//turn on LED port b for simultaneus sampling
    1680:	e8 e3       	ldi	r30, 0x38	; 56
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	80 83       	st	Z, r24
		isamples[i]= ADC;                                         //stores the current 'i' sample from the ADC
    1688:	40 91 6e 00 	lds	r20, 0x006E
    168c:	50 91 6f 00 	lds	r21, 0x006F
    1690:	e4 e2       	ldi	r30, 0x24	; 36
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	9c 01       	movw	r18, r24
    169a:	ca 01       	movw	r24, r20
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	fc 01       	movw	r30, r24
    16a2:	e6 5f       	subi	r30, 0xF6	; 246
    16a4:	fe 4f       	sbci	r31, 0xFE	; 254
    16a6:	31 83       	std	Z+1, r19	; 0x01
    16a8:	20 83       	st	Z, r18
	    
 if (isamples[i] > 512)                         //if sample taken is greater than 512 bits, do 2's compliment and make it negative
    16aa:	80 91 6e 00 	lds	r24, 0x006E
    16ae:	90 91 6f 00 	lds	r25, 0x006F
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	fc 01       	movw	r30, r24
    16b8:	e6 5f       	subi	r30, 0xF6	; 246
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	22 e0       	ldi	r18, 0x02	; 2
    16c2:	81 30       	cpi	r24, 0x01	; 1
    16c4:	92 07       	cpc	r25, r18
    16c6:	0c f4       	brge	.+2      	; 0x16ca <initiADC+0xc4>
    16c8:	98 c0       	rjmp	.+304    	; 0x17fa <initiADC+0x1f4>
	{
		isamples[i] = (isamples[i] - 1);               //2's compliment of current samples
    16ca:	40 91 6e 00 	lds	r20, 0x006E
    16ce:	50 91 6f 00 	lds	r21, 0x006F
    16d2:	80 91 6e 00 	lds	r24, 0x006E
    16d6:	90 91 6f 00 	lds	r25, 0x006F
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	fc 01       	movw	r30, r24
    16e0:	e6 5f       	subi	r30, 0xF6	; 246
    16e2:	fe 4f       	sbci	r31, 0xFE	; 254
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	9c 01       	movw	r18, r24
    16ea:	21 50       	subi	r18, 0x01	; 1
    16ec:	30 40       	sbci	r19, 0x00	; 0
    16ee:	ca 01       	movw	r24, r20
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	fc 01       	movw	r30, r24
    16f6:	e6 5f       	subi	r30, 0xF6	; 246
    16f8:	fe 4f       	sbci	r31, 0xFE	; 254
    16fa:	31 83       	std	Z+1, r19	; 0x01
    16fc:	20 83       	st	Z, r18
		isamples[i] = ~(isamples[i]);	               // 2's compliment of current samples
    16fe:	40 91 6e 00 	lds	r20, 0x006E
    1702:	50 91 6f 00 	lds	r21, 0x006F
    1706:	80 91 6e 00 	lds	r24, 0x006E
    170a:	90 91 6f 00 	lds	r25, 0x006F
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	fc 01       	movw	r30, r24
    1714:	e6 5f       	subi	r30, 0xF6	; 246
    1716:	fe 4f       	sbci	r31, 0xFE	; 254
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	9c 01       	movw	r18, r24
    171e:	20 95       	com	r18
    1720:	30 95       	com	r19
    1722:	ca 01       	movw	r24, r20
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	fc 01       	movw	r30, r24
    172a:	e6 5f       	subi	r30, 0xF6	; 246
    172c:	fe 4f       	sbci	r31, 0xFE	; 254
    172e:	31 83       	std	Z+1, r19	; 0x01
    1730:	20 83       	st	Z, r18
		isamples[i] = isamples[i] & 0x03FF;            //and it with some zeros for removing extra bits out front
    1732:	40 91 6e 00 	lds	r20, 0x006E
    1736:	50 91 6f 00 	lds	r21, 0x006F
    173a:	80 91 6e 00 	lds	r24, 0x006E
    173e:	90 91 6f 00 	lds	r25, 0x006F
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	fc 01       	movw	r30, r24
    1748:	e6 5f       	subi	r30, 0xF6	; 246
    174a:	fe 4f       	sbci	r31, 0xFE	; 254
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	9c 01       	movw	r18, r24
    1752:	33 70       	andi	r19, 0x03	; 3
    1754:	ca 01       	movw	r24, r20
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	fc 01       	movw	r30, r24
    175c:	e6 5f       	subi	r30, 0xF6	; 246
    175e:	fe 4f       	sbci	r31, 0xFE	; 254
    1760:	31 83       	std	Z+1, r19	; 0x01
    1762:	20 83       	st	Z, r18
		icalc[i]= (((float)isamples[i]*3.3/(gain*512)));      //attempted algorithm for converting the adc values into readable values
    1764:	c0 90 6e 00 	lds	r12, 0x006E
    1768:	d0 90 6f 00 	lds	r13, 0x006F
    176c:	80 91 6e 00 	lds	r24, 0x006E
    1770:	90 91 6f 00 	lds	r25, 0x006F
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	fc 01       	movw	r30, r24
    177a:	e6 5f       	subi	r30, 0xF6	; 246
    177c:	fe 4f       	sbci	r31, 0xFE	; 254
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	aa 27       	eor	r26, r26
    1784:	97 fd       	sbrc	r25, 7
    1786:	a0 95       	com	r26
    1788:	ba 2f       	mov	r27, r26
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    1792:	dc 01       	movw	r26, r24
    1794:	cb 01       	movw	r24, r22
    1796:	bc 01       	movw	r22, r24
    1798:	cd 01       	movw	r24, r26
    179a:	23 e3       	ldi	r18, 0x33	; 51
    179c:	33 e3       	ldi	r19, 0x33	; 51
    179e:	43 e5       	ldi	r20, 0x53	; 83
    17a0:	50 e4       	ldi	r21, 0x40	; 64
    17a2:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	7c 01       	movw	r14, r24
    17ac:	8d 01       	movw	r16, r26
    17ae:	80 91 66 00 	lds	r24, 0x0066
    17b2:	90 91 67 00 	lds	r25, 0x0067
    17b6:	98 2f       	mov	r25, r24
    17b8:	88 27       	eor	r24, r24
    17ba:	99 0f       	add	r25, r25
    17bc:	aa 27       	eor	r26, r26
    17be:	97 fd       	sbrc	r25, 7
    17c0:	a0 95       	com	r26
    17c2:	ba 2f       	mov	r27, r26
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	c8 01       	movw	r24, r16
    17d2:	b7 01       	movw	r22, r14
    17d4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9c 01       	movw	r18, r24
    17de:	ad 01       	movw	r20, r26
    17e0:	c6 01       	movw	r24, r12
    17e2:	88 0f       	add	r24, r24
    17e4:	99 1f       	adc	r25, r25
    17e6:	88 0f       	add	r24, r24
    17e8:	99 1f       	adc	r25, r25
    17ea:	fc 01       	movw	r30, r24
    17ec:	ea 5d       	subi	r30, 0xDA	; 218
    17ee:	fa 4f       	sbci	r31, 0xFA	; 250
    17f0:	20 83       	st	Z, r18
    17f2:	31 83       	std	Z+1, r19	; 0x01
    17f4:	42 83       	std	Z+2, r20	; 0x02
    17f6:	53 83       	std	Z+3, r21	; 0x03
    17f8:	4a c0       	rjmp	.+148    	; 0x188e <initiADC+0x288>
		
	}// end if
		else										            // otherwise take sample as it normally appears
	{	
//	    lcd_goto_xy(5,1);
	    icalc[i] = (((float)isamples[i]*3.3/(gain*512)));        // algorithm from datasheet to convert from ADC value into a human accepted voltage level
    17fa:	c0 90 6e 00 	lds	r12, 0x006E
    17fe:	d0 90 6f 00 	lds	r13, 0x006F
    1802:	80 91 6e 00 	lds	r24, 0x006E
    1806:	90 91 6f 00 	lds	r25, 0x006F
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	fc 01       	movw	r30, r24
    1810:	e6 5f       	subi	r30, 0xF6	; 246
    1812:	fe 4f       	sbci	r31, 0xFE	; 254
    1814:	80 81       	ld	r24, Z
    1816:	91 81       	ldd	r25, Z+1	; 0x01
    1818:	aa 27       	eor	r26, r26
    181a:	97 fd       	sbrc	r25, 7
    181c:	a0 95       	com	r26
    181e:	ba 2f       	mov	r27, r26
    1820:	bc 01       	movw	r22, r24
    1822:	cd 01       	movw	r24, r26
    1824:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	bc 01       	movw	r22, r24
    182e:	cd 01       	movw	r24, r26
    1830:	23 e3       	ldi	r18, 0x33	; 51
    1832:	33 e3       	ldi	r19, 0x33	; 51
    1834:	43 e5       	ldi	r20, 0x53	; 83
    1836:	50 e4       	ldi	r21, 0x40	; 64
    1838:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	7c 01       	movw	r14, r24
    1842:	8d 01       	movw	r16, r26
    1844:	80 91 66 00 	lds	r24, 0x0066
    1848:	90 91 67 00 	lds	r25, 0x0067
    184c:	98 2f       	mov	r25, r24
    184e:	88 27       	eor	r24, r24
    1850:	99 0f       	add	r25, r25
    1852:	aa 27       	eor	r26, r26
    1854:	97 fd       	sbrc	r25, 7
    1856:	a0 95       	com	r26
    1858:	ba 2f       	mov	r27, r26
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	c8 01       	movw	r24, r16
    1868:	b7 01       	movw	r22, r14
    186a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	9c 01       	movw	r18, r24
    1874:	ad 01       	movw	r20, r26
    1876:	c6 01       	movw	r24, r12
    1878:	88 0f       	add	r24, r24
    187a:	99 1f       	adc	r25, r25
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	fc 01       	movw	r30, r24
    1882:	ea 5d       	subi	r30, 0xDA	; 218
    1884:	fa 4f       	sbci	r31, 0xFA	; 250
    1886:	20 83       	st	Z, r18
    1888:	31 83       	std	Z+1, r19	; 0x01
    188a:	42 83       	std	Z+2, r20	; 0x02
    188c:	53 83       	std	Z+3, r21	; 0x03
//				lcd_printf("%i",gain);             //printing gain
//				delay_ms(50); 	
//				lcd_clear();
//				lcd_home();
		
			if(i<75)                   //if number of samples is less than 75
    188e:	80 91 6e 00 	lds	r24, 0x006E
    1892:	90 91 6f 00 	lds	r25, 0x006F
    1896:	8b 34       	cpi	r24, 0x4B	; 75
    1898:	91 05       	cpc	r25, r1
    189a:	54 f4       	brge	.+20     	; 0x18b0 <initiADC+0x2aa>
				i++;                   //increment the pointer in the array 
    189c:	80 91 6e 00 	lds	r24, 0x006E
    18a0:	90 91 6f 00 	lds	r25, 0x006F
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	90 93 6f 00 	sts	0x006F, r25
    18aa:	80 93 6e 00 	sts	0x006E, r24
    18ae:	08 c0       	rjmp	.+16     	; 0x18c0 <initiADC+0x2ba>
			else
			{
				i=0;                   //otherwise set the pointer back to 0.
    18b0:	10 92 6f 00 	sts	0x006F, r1
    18b4:	10 92 6e 00 	sts	0x006E, r1

			initmaxfinder();          //go to averaging function to get a single average of current
    18b8:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <initmaxfinder>
			initgainstatemachine();    //go to state machine that will decide the proper gain of the 75 samples and set it for 1,2 or 3 depending on the the 
    18bc:	0e 94 a1 0c 	call	0x1942	; 0x1942 <initgainstatemachine>
			}
			initADC();                     //re-initialize the voltage ADC for taking voltage values again
    18c0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <initADC>

    }//end current sampling ADC subroutine
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	08 95       	ret

000018d6 <init200iADC>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init200iADC(void)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;                 //clear admux keeping REFS0 high
    18de:	e7 e2       	ldi	r30, 0x27	; 39
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 e4       	ldi	r24, 0x40	; 64
    18e4:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX1) | (1<<MUX0); //setup ADMUX for x200 gain 01111
    18e6:	a7 e2       	ldi	r26, 0x27	; 39
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e7 e2       	ldi	r30, 0x27	; 39
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 60       	ori	r24, 0x0F	; 15
    18f2:	8c 93       	st	X, r24
}//end x200 ADC setup
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <init10iADC>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init10iADC(void)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;             //clear admux keeping REFS0 high
    1902:	e7 e2       	ldi	r30, 0x27	; 39
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 e4       	ldi	r24, 0x40	; 64
    1908:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX3) | (1<<MUX2) | (1<<MUX0);            //setup ADMUX for x10 gain 01101
    190a:	a7 e2       	ldi	r26, 0x27	; 39
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e7 e2       	ldi	r30, 0x27	; 39
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	8d 60       	ori	r24, 0x0D	; 13
    1916:	8c 93       	st	X, r24
}//end x10 ADC setup
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <init1iADC>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void init1iADC(void)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	ADMUX = 0x40;                      //clear admux keeping REFS0 high
    1926:	e7 e2       	ldi	r30, 0x27	; 39
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 e4       	ldi	r24, 0x40	; 64
    192c:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX4) | (1<<MUX3) | (1<<MUX1) | (1<<MUX0);      //setup admux for x1 gain 11011          
    192e:	a7 e2       	ldi	r26, 0x27	; 39
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e7 e2       	ldi	r30, 0x27	; 39
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8b 61       	ori	r24, 0x1B	; 27
    193a:	8c 93       	st	X, r24
}//end x1 ADC setup
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <initgainstatemachine>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initgainstatemachine(void)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62

	if((gain == 200) && (imax >= 479))   //if gain is at x200 and value is overflowing OR gain is x1 and value is too small
    194a:	80 91 66 00 	lds	r24, 0x0066
    194e:	90 91 67 00 	lds	r25, 0x0067
    1952:	88 3c       	cpi	r24, 0xC8	; 200
    1954:	91 05       	cpc	r25, r1
    1956:	79 f4       	brne	.+30     	; 0x1976 <initgainstatemachine+0x34>
    1958:	80 91 82 07 	lds	r24, 0x0782
    195c:	90 91 83 07 	lds	r25, 0x0783
    1960:	21 e0       	ldi	r18, 0x01	; 1
    1962:	8f 3d       	cpi	r24, 0xDF	; 223
    1964:	92 07       	cpc	r25, r18
    1966:	3c f0       	brlt	.+14     	; 0x1976 <initgainstatemachine+0x34>
	{
		gain = 10;                                                                     //use x10 gain setting
    1968:	8a e0       	ldi	r24, 0x0A	; 10
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	90 93 67 00 	sts	0x0067, r25
    1970:	80 93 66 00 	sts	0x0066, r24
    1974:	3f c0       	rjmp	.+126    	; 0x19f4 <initgainstatemachine+0xb2>
	   
	}//if
	else if((gain == 1) && (imax <= 49))
    1976:	80 91 66 00 	lds	r24, 0x0066
    197a:	90 91 67 00 	lds	r25, 0x0067
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	71 f4       	brne	.+28     	; 0x19a0 <initgainstatemachine+0x5e>
    1984:	80 91 82 07 	lds	r24, 0x0782
    1988:	90 91 83 07 	lds	r25, 0x0783
    198c:	82 33       	cpi	r24, 0x32	; 50
    198e:	91 05       	cpc	r25, r1
    1990:	3c f4       	brge	.+14     	; 0x19a0 <initgainstatemachine+0x5e>
	{
		gain =10;
    1992:	8a e0       	ldi	r24, 0x0A	; 10
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	90 93 67 00 	sts	0x0067, r25
    199a:	80 93 66 00 	sts	0x0066, r24
    199e:	2a c0       	rjmp	.+84     	; 0x19f4 <initgainstatemachine+0xb2>
     	                                       
	}//if
	else if ((gain == 10) && (imax <= 24))          //if gain is x10 and value is too small
    19a0:	80 91 66 00 	lds	r24, 0x0066
    19a4:	90 91 67 00 	lds	r25, 0x0067
    19a8:	8a 30       	cpi	r24, 0x0A	; 10
    19aa:	91 05       	cpc	r25, r1
    19ac:	71 f4       	brne	.+28     	; 0x19ca <initgainstatemachine+0x88>
    19ae:	80 91 82 07 	lds	r24, 0x0782
    19b2:	90 91 83 07 	lds	r25, 0x0783
    19b6:	89 31       	cpi	r24, 0x19	; 25
    19b8:	91 05       	cpc	r25, r1
    19ba:	3c f4       	brge	.+14     	; 0x19ca <initgainstatemachine+0x88>
	{
		gain = 200;                                  //use x200 gain setting changed from 200 to 10 (may revmove 10 gain)
    19bc:	88 ec       	ldi	r24, 0xC8	; 200
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	90 93 67 00 	sts	0x0067, r25
    19c4:	80 93 66 00 	sts	0x0066, r24
    19c8:	15 c0       	rjmp	.+42     	; 0x19f4 <initgainstatemachine+0xb2>
	   
	}//if
	
	else if((gain == 10) && (imax >= 480))           //if gain is x10 and value is too large
    19ca:	80 91 66 00 	lds	r24, 0x0066
    19ce:	90 91 67 00 	lds	r25, 0x0067
    19d2:	8a 30       	cpi	r24, 0x0A	; 10
    19d4:	91 05       	cpc	r25, r1
    19d6:	71 f4       	brne	.+28     	; 0x19f4 <initgainstatemachine+0xb2>
    19d8:	80 91 82 07 	lds	r24, 0x0782
    19dc:	90 91 83 07 	lds	r25, 0x0783
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	80 3e       	cpi	r24, 0xE0	; 224
    19e4:	92 07       	cpc	r25, r18
    19e6:	34 f0       	brlt	.+12     	; 0x19f4 <initgainstatemachine+0xb2>
	{
		gain = 1;                                     // use x1 gain setting
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	90 93 67 00 	sts	0x0067, r25
    19f0:	80 93 66 00 	sts	0x0066, r24
	}//if	

}//end gain state machine
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <initsumofpoweraverages>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initsumofpoweraverages(void)
{
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	00 d0       	rcall	.+0      	; 0x1a08 <initsumofpoweraverages+0xe>
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	for (int k=0; k<75; k++)
    1a0c:	1a 82       	std	Y+2, r1	; 0x02
    1a0e:	19 82       	std	Y+1, r1	; 0x01
    1a10:	30 c0       	rjmp	.+96     	; 0x1a72 <initsumofpoweraverages+0x78>
	{
		pavg = psamplediv75[k] + pavg;                                 //takes all "divided by 75" current samples and turns into a single averaged sample we can use to determine the gain with 
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	9a 81       	ldd	r25, Y+2	; 0x02
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e2 53       	subi	r30, 0x32	; 50
    1a22:	fd 4f       	sbci	r31, 0xFD	; 253
    1a24:	e0 80       	ld	r14, Z
    1a26:	f1 80       	ldd	r15, Z+1	; 0x01
    1a28:	02 81       	ldd	r16, Z+2	; 0x02
    1a2a:	13 81       	ldd	r17, Z+3	; 0x03
    1a2c:	80 91 cc 02 	lds	r24, 0x02CC
    1a30:	90 91 cd 02 	lds	r25, 0x02CD
    1a34:	aa 27       	eor	r26, r26
    1a36:	97 fd       	sbrc	r25, 7
    1a38:	a0 95       	com	r26
    1a3a:	ba 2f       	mov	r27, r26
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	c8 01       	movw	r24, r16
    1a4a:	b7 01       	movw	r22, r14
    1a4c:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__addsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	bc 01       	movw	r22, r24
    1a56:	cd 01       	movw	r24, r26
    1a58:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	90 93 cd 02 	sts	0x02CD, r25
    1a64:	80 93 cc 02 	sts	0x02CC, r24

}//end gain state machine
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initsumofpoweraverages(void)
{
	for (int k=0; k<75; k++)
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6c:	01 96       	adiw	r24, 0x01	; 1
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	8b 34       	cpi	r24, 0x4B	; 75
    1a78:	91 05       	cpc	r25, r1
    1a7a:	5c f2       	brlt	.-106    	; 0x1a12 <initsumofpoweraverages+0x18>
	{
		pavg = psamplediv75[k] + pavg;                                 //takes all "divided by 75" current samples and turns into a single averaged sample we can use to determine the gain with 
	}//for															   /TOTAL AVERAGE OF CURRENT (SINGLE VALUE)
}// sum of averages of current matrix
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	08 95       	ret

00001a8e <initmaxfinder>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initmaxfinder(void)               //subroutine for finding the maximum value of the top of the 3 periods
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
//PORTB=0x00;
	imax = 0;                          //this subroutine executes every 3 periods and clears the maximum every time
    1a96:	10 92 83 07 	sts	0x0783, r1
    1a9a:	10 92 82 07 	sts	0x0782, r1
	for(k=0; k<75; k++)
    1a9e:	10 92 73 00 	sts	0x0073, r1
    1aa2:	10 92 72 00 	sts	0x0072, r1
    1aa6:	2a c0       	rjmp	.+84     	; 0x1afc <initmaxfinder+0x6e>
	{
		if (imax < isamples[k])       //if current maximum is less than new maximum
    1aa8:	80 91 72 00 	lds	r24, 0x0072
    1aac:	90 91 73 00 	lds	r25, 0x0073
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e6 5f       	subi	r30, 0xF6	; 246
    1ab8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aba:	20 81       	ld	r18, Z
    1abc:	31 81       	ldd	r19, Z+1	; 0x01
    1abe:	80 91 82 07 	lds	r24, 0x0782
    1ac2:	90 91 83 07 	lds	r25, 0x0783
    1ac6:	82 17       	cp	r24, r18
    1ac8:	93 07       	cpc	r25, r19
    1aca:	7c f4       	brge	.+30     	; 0x1aea <initmaxfinder+0x5c>
		{
			imax = isamples[k];        //save the new maximum sample
    1acc:	80 91 72 00 	lds	r24, 0x0072
    1ad0:	90 91 73 00 	lds	r25, 0x0073
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	fc 01       	movw	r30, r24
    1ada:	e6 5f       	subi	r30, 0xF6	; 246
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	80 81       	ld	r24, Z
    1ae0:	91 81       	ldd	r25, Z+1	; 0x01
    1ae2:	90 93 83 07 	sts	0x0783, r25
    1ae6:	80 93 82 07 	sts	0x0782, r24
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initmaxfinder(void)               //subroutine for finding the maximum value of the top of the 3 periods
{
//PORTB=0x00;
	imax = 0;                          //this subroutine executes every 3 periods and clears the maximum every time
	for(k=0; k<75; k++)
    1aea:	80 91 72 00 	lds	r24, 0x0072
    1aee:	90 91 73 00 	lds	r25, 0x0073
    1af2:	01 96       	adiw	r24, 0x01	; 1
    1af4:	90 93 73 00 	sts	0x0073, r25
    1af8:	80 93 72 00 	sts	0x0072, r24
    1afc:	80 91 72 00 	lds	r24, 0x0072
    1b00:	90 91 73 00 	lds	r25, 0x0073
    1b04:	8b 34       	cpi	r24, 0x4B	; 75
    1b06:	91 05       	cpc	r25, r1
    1b08:	7c f2       	brlt	.-98     	; 0x1aa8 <initmaxfinder+0x1a>
			imax = isamples[k];        //save the new maximum sample
		}//if
		
	}//for
//PORTB=0xFF;
}//max finder function
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	08 95       	ret

00001b10 <USART_Init>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_Init( unsigned int baud )
{
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	00 d0       	rcall	.+0      	; 0x1b16 <USART_Init+0x6>
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    1b1e:	e0 e4       	ldi	r30, 0x40	; 64
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	89 2f       	mov	r24, r25
    1b28:	99 27       	eor	r25, r25
    1b2a:	80 83       	st	Z, r24
	UBRRL = (unsigned char)baud;
    1b2c:	e9 e2       	ldi	r30, 0x29	; 41
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	80 83       	st	Z, r24
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    1b34:	ea e2       	ldi	r30, 0x2A	; 42
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	88 e1       	ldi	r24, 0x18	; 24
    1b3a:	80 83       	st	Z, r24
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(0<<USBS)|(3<<UCSZ0);
    1b3c:	e0 e4       	ldi	r30, 0x40	; 64
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	86 e8       	ldi	r24, 0x86	; 134
    1b42:	80 83       	st	Z, r24
}//end USART initilization
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <USART_Transmit>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void USART_Transmit( unsigned char data )
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	0f 92       	push	r0
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
    1b5a:	eb e2       	ldi	r30, 0x2B	; 43
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	80 72       	andi	r24, 0x20	; 32
    1b66:	90 70       	andi	r25, 0x00	; 0
    1b68:	00 97       	sbiw	r24, 0x00	; 0
    1b6a:	b9 f3       	breq	.-18     	; 0x1b5a <USART_Transmit+0xc>
		;
	/* Put data into buffer, sends the data */
	UDR = data;
    1b6c:	ec e2       	ldi	r30, 0x2C	; 44
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	80 83       	st	Z, r24
}//end USART transmission              
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <exit>:
    1b7c:	f8 94       	cli
    1b7e:	0c 94 83 11 	jmp	0x2306	; 0x2306 <_exit>

00001b82 <__subsf3>:
    1b82:	50 58       	subi	r21, 0x80	; 128

00001b84 <__addsf3>:
    1b84:	bb 27       	eor	r27, r27
    1b86:	aa 27       	eor	r26, r26
    1b88:	0e d0       	rcall	.+28     	; 0x1ba6 <__addsf3x>
    1b8a:	75 c1       	rjmp	.+746    	; 0x1e76 <__fp_round>
    1b8c:	66 d1       	rcall	.+716    	; 0x1e5a <__fp_pscA>
    1b8e:	30 f0       	brcs	.+12     	; 0x1b9c <__addsf3+0x18>
    1b90:	6b d1       	rcall	.+726    	; 0x1e68 <__fp_pscB>
    1b92:	20 f0       	brcs	.+8      	; 0x1b9c <__addsf3+0x18>
    1b94:	31 f4       	brne	.+12     	; 0x1ba2 <__addsf3+0x1e>
    1b96:	9f 3f       	cpi	r25, 0xFF	; 255
    1b98:	11 f4       	brne	.+4      	; 0x1b9e <__addsf3+0x1a>
    1b9a:	1e f4       	brtc	.+6      	; 0x1ba2 <__addsf3+0x1e>
    1b9c:	5b c1       	rjmp	.+694    	; 0x1e54 <__fp_nan>
    1b9e:	0e f4       	brtc	.+2      	; 0x1ba2 <__addsf3+0x1e>
    1ba0:	e0 95       	com	r30
    1ba2:	e7 fb       	bst	r30, 7
    1ba4:	51 c1       	rjmp	.+674    	; 0x1e48 <__fp_inf>

00001ba6 <__addsf3x>:
    1ba6:	e9 2f       	mov	r30, r25
    1ba8:	77 d1       	rcall	.+750    	; 0x1e98 <__fp_split3>
    1baa:	80 f3       	brcs	.-32     	; 0x1b8c <__addsf3+0x8>
    1bac:	ba 17       	cp	r27, r26
    1bae:	62 07       	cpc	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	95 07       	cpc	r25, r21
    1bb6:	18 f0       	brcs	.+6      	; 0x1bbe <__addsf3x+0x18>
    1bb8:	71 f4       	brne	.+28     	; 0x1bd6 <__addsf3x+0x30>
    1bba:	9e f5       	brtc	.+102    	; 0x1c22 <__addsf3x+0x7c>
    1bbc:	8f c1       	rjmp	.+798    	; 0x1edc <__fp_zero>
    1bbe:	0e f4       	brtc	.+2      	; 0x1bc2 <__addsf3x+0x1c>
    1bc0:	e0 95       	com	r30
    1bc2:	0b 2e       	mov	r0, r27
    1bc4:	ba 2f       	mov	r27, r26
    1bc6:	a0 2d       	mov	r26, r0
    1bc8:	0b 01       	movw	r0, r22
    1bca:	b9 01       	movw	r22, r18
    1bcc:	90 01       	movw	r18, r0
    1bce:	0c 01       	movw	r0, r24
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	a0 01       	movw	r20, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	ff 27       	eor	r31, r31
    1bd8:	59 1b       	sub	r21, r25
    1bda:	99 f0       	breq	.+38     	; 0x1c02 <__addsf3x+0x5c>
    1bdc:	59 3f       	cpi	r21, 0xF9	; 249
    1bde:	50 f4       	brcc	.+20     	; 0x1bf4 <__addsf3x+0x4e>
    1be0:	50 3e       	cpi	r21, 0xE0	; 224
    1be2:	68 f1       	brcs	.+90     	; 0x1c3e <__addsf3x+0x98>
    1be4:	1a 16       	cp	r1, r26
    1be6:	f0 40       	sbci	r31, 0x00	; 0
    1be8:	a2 2f       	mov	r26, r18
    1bea:	23 2f       	mov	r18, r19
    1bec:	34 2f       	mov	r19, r20
    1bee:	44 27       	eor	r20, r20
    1bf0:	58 5f       	subi	r21, 0xF8	; 248
    1bf2:	f3 cf       	rjmp	.-26     	; 0x1bda <__addsf3x+0x34>
    1bf4:	46 95       	lsr	r20
    1bf6:	37 95       	ror	r19
    1bf8:	27 95       	ror	r18
    1bfa:	a7 95       	ror	r26
    1bfc:	f0 40       	sbci	r31, 0x00	; 0
    1bfe:	53 95       	inc	r21
    1c00:	c9 f7       	brne	.-14     	; 0x1bf4 <__addsf3x+0x4e>
    1c02:	7e f4       	brtc	.+30     	; 0x1c22 <__addsf3x+0x7c>
    1c04:	1f 16       	cp	r1, r31
    1c06:	ba 0b       	sbc	r27, r26
    1c08:	62 0b       	sbc	r22, r18
    1c0a:	73 0b       	sbc	r23, r19
    1c0c:	84 0b       	sbc	r24, r20
    1c0e:	ba f0       	brmi	.+46     	; 0x1c3e <__addsf3x+0x98>
    1c10:	91 50       	subi	r25, 0x01	; 1
    1c12:	a1 f0       	breq	.+40     	; 0x1c3c <__addsf3x+0x96>
    1c14:	ff 0f       	add	r31, r31
    1c16:	bb 1f       	adc	r27, r27
    1c18:	66 1f       	adc	r22, r22
    1c1a:	77 1f       	adc	r23, r23
    1c1c:	88 1f       	adc	r24, r24
    1c1e:	c2 f7       	brpl	.-16     	; 0x1c10 <__addsf3x+0x6a>
    1c20:	0e c0       	rjmp	.+28     	; 0x1c3e <__addsf3x+0x98>
    1c22:	ba 0f       	add	r27, r26
    1c24:	62 1f       	adc	r22, r18
    1c26:	73 1f       	adc	r23, r19
    1c28:	84 1f       	adc	r24, r20
    1c2a:	48 f4       	brcc	.+18     	; 0x1c3e <__addsf3x+0x98>
    1c2c:	87 95       	ror	r24
    1c2e:	77 95       	ror	r23
    1c30:	67 95       	ror	r22
    1c32:	b7 95       	ror	r27
    1c34:	f7 95       	ror	r31
    1c36:	9e 3f       	cpi	r25, 0xFE	; 254
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <__addsf3x+0x96>
    1c3a:	b3 cf       	rjmp	.-154    	; 0x1ba2 <__addsf3+0x1e>
    1c3c:	93 95       	inc	r25
    1c3e:	88 0f       	add	r24, r24
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__addsf3x+0x9e>
    1c42:	99 27       	eor	r25, r25
    1c44:	ee 0f       	add	r30, r30
    1c46:	97 95       	ror	r25
    1c48:	87 95       	ror	r24
    1c4a:	08 95       	ret

00001c4c <__cmpsf2>:
    1c4c:	d9 d0       	rcall	.+434    	; 0x1e00 <__fp_cmp>
    1c4e:	08 f4       	brcc	.+2      	; 0x1c52 <__cmpsf2+0x6>
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	08 95       	ret

00001c54 <__divsf3>:
    1c54:	0c d0       	rcall	.+24     	; 0x1c6e <__divsf3x>
    1c56:	0f c1       	rjmp	.+542    	; 0x1e76 <__fp_round>
    1c58:	07 d1       	rcall	.+526    	; 0x1e68 <__fp_pscB>
    1c5a:	40 f0       	brcs	.+16     	; 0x1c6c <__divsf3+0x18>
    1c5c:	fe d0       	rcall	.+508    	; 0x1e5a <__fp_pscA>
    1c5e:	30 f0       	brcs	.+12     	; 0x1c6c <__divsf3+0x18>
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <__divsf3+0x16>
    1c62:	5f 3f       	cpi	r21, 0xFF	; 255
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <__divsf3+0x18>
    1c66:	f0 c0       	rjmp	.+480    	; 0x1e48 <__fp_inf>
    1c68:	51 11       	cpse	r21, r1
    1c6a:	39 c1       	rjmp	.+626    	; 0x1ede <__fp_szero>
    1c6c:	f3 c0       	rjmp	.+486    	; 0x1e54 <__fp_nan>

00001c6e <__divsf3x>:
    1c6e:	14 d1       	rcall	.+552    	; 0x1e98 <__fp_split3>
    1c70:	98 f3       	brcs	.-26     	; 0x1c58 <__divsf3+0x4>

00001c72 <__divsf3_pse>:
    1c72:	99 23       	and	r25, r25
    1c74:	c9 f3       	breq	.-14     	; 0x1c68 <__divsf3+0x14>
    1c76:	55 23       	and	r21, r21
    1c78:	b1 f3       	breq	.-20     	; 0x1c66 <__divsf3+0x12>
    1c7a:	95 1b       	sub	r25, r21
    1c7c:	55 0b       	sbc	r21, r21
    1c7e:	bb 27       	eor	r27, r27
    1c80:	aa 27       	eor	r26, r26
    1c82:	62 17       	cp	r22, r18
    1c84:	73 07       	cpc	r23, r19
    1c86:	84 07       	cpc	r24, r20
    1c88:	38 f0       	brcs	.+14     	; 0x1c98 <__divsf3_pse+0x26>
    1c8a:	9f 5f       	subi	r25, 0xFF	; 255
    1c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	44 1f       	adc	r20, r20
    1c94:	aa 1f       	adc	r26, r26
    1c96:	a9 f3       	breq	.-22     	; 0x1c82 <__divsf3_pse+0x10>
    1c98:	33 d0       	rcall	.+102    	; 0x1d00 <__divsf3_pse+0x8e>
    1c9a:	0e 2e       	mov	r0, r30
    1c9c:	3a f0       	brmi	.+14     	; 0x1cac <__divsf3_pse+0x3a>
    1c9e:	e0 e8       	ldi	r30, 0x80	; 128
    1ca0:	30 d0       	rcall	.+96     	; 0x1d02 <__divsf3_pse+0x90>
    1ca2:	91 50       	subi	r25, 0x01	; 1
    1ca4:	50 40       	sbci	r21, 0x00	; 0
    1ca6:	e6 95       	lsr	r30
    1ca8:	00 1c       	adc	r0, r0
    1caa:	ca f7       	brpl	.-14     	; 0x1c9e <__divsf3_pse+0x2c>
    1cac:	29 d0       	rcall	.+82     	; 0x1d00 <__divsf3_pse+0x8e>
    1cae:	fe 2f       	mov	r31, r30
    1cb0:	27 d0       	rcall	.+78     	; 0x1d00 <__divsf3_pse+0x8e>
    1cb2:	66 0f       	add	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	26 17       	cp	r18, r22
    1cbc:	37 07       	cpc	r19, r23
    1cbe:	48 07       	cpc	r20, r24
    1cc0:	ab 07       	cpc	r26, r27
    1cc2:	b0 e8       	ldi	r27, 0x80	; 128
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <__divsf3_pse+0x56>
    1cc6:	bb 0b       	sbc	r27, r27
    1cc8:	80 2d       	mov	r24, r0
    1cca:	bf 01       	movw	r22, r30
    1ccc:	ff 27       	eor	r31, r31
    1cce:	93 58       	subi	r25, 0x83	; 131
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	2a f0       	brmi	.+10     	; 0x1cde <__divsf3_pse+0x6c>
    1cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	68 f0       	brcs	.+26     	; 0x1cf4 <__divsf3_pse+0x82>
    1cda:	b6 c0       	rjmp	.+364    	; 0x1e48 <__fp_inf>
    1cdc:	00 c1       	rjmp	.+512    	; 0x1ede <__fp_szero>
    1cde:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce0:	ec f3       	brlt	.-6      	; 0x1cdc <__divsf3_pse+0x6a>
    1ce2:	98 3e       	cpi	r25, 0xE8	; 232
    1ce4:	dc f3       	brlt	.-10     	; 0x1cdc <__divsf3_pse+0x6a>
    1ce6:	86 95       	lsr	r24
    1ce8:	77 95       	ror	r23
    1cea:	67 95       	ror	r22
    1cec:	b7 95       	ror	r27
    1cee:	f7 95       	ror	r31
    1cf0:	9f 5f       	subi	r25, 0xFF	; 255
    1cf2:	c9 f7       	brne	.-14     	; 0x1ce6 <__divsf3_pse+0x74>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	96 95       	lsr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	97 f9       	bld	r25, 7
    1cfe:	08 95       	ret
    1d00:	e1 e0       	ldi	r30, 0x01	; 1
    1d02:	66 0f       	add	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	bb 1f       	adc	r27, r27
    1d0a:	62 17       	cp	r22, r18
    1d0c:	73 07       	cpc	r23, r19
    1d0e:	84 07       	cpc	r24, r20
    1d10:	ba 07       	cpc	r27, r26
    1d12:	20 f0       	brcs	.+8      	; 0x1d1c <__divsf3_pse+0xaa>
    1d14:	62 1b       	sub	r22, r18
    1d16:	73 0b       	sbc	r23, r19
    1d18:	84 0b       	sbc	r24, r20
    1d1a:	ba 0b       	sbc	r27, r26
    1d1c:	ee 1f       	adc	r30, r30
    1d1e:	88 f7       	brcc	.-30     	; 0x1d02 <__divsf3_pse+0x90>
    1d20:	e0 95       	com	r30
    1d22:	08 95       	ret

00001d24 <__fixsfsi>:
    1d24:	04 d0       	rcall	.+8      	; 0x1d2e <__fixunssfsi>
    1d26:	68 94       	set
    1d28:	b1 11       	cpse	r27, r1
    1d2a:	d9 c0       	rjmp	.+434    	; 0x1ede <__fp_szero>
    1d2c:	08 95       	ret

00001d2e <__fixunssfsi>:
    1d2e:	bc d0       	rcall	.+376    	; 0x1ea8 <__fp_splitA>
    1d30:	88 f0       	brcs	.+34     	; 0x1d54 <__fixunssfsi+0x26>
    1d32:	9f 57       	subi	r25, 0x7F	; 127
    1d34:	90 f0       	brcs	.+36     	; 0x1d5a <__fixunssfsi+0x2c>
    1d36:	b9 2f       	mov	r27, r25
    1d38:	99 27       	eor	r25, r25
    1d3a:	b7 51       	subi	r27, 0x17	; 23
    1d3c:	a0 f0       	brcs	.+40     	; 0x1d66 <__fixunssfsi+0x38>
    1d3e:	d1 f0       	breq	.+52     	; 0x1d74 <__fixunssfsi+0x46>
    1d40:	66 0f       	add	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	88 1f       	adc	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	1a f0       	brmi	.+6      	; 0x1d50 <__fixunssfsi+0x22>
    1d4a:	ba 95       	dec	r27
    1d4c:	c9 f7       	brne	.-14     	; 0x1d40 <__fixunssfsi+0x12>
    1d4e:	12 c0       	rjmp	.+36     	; 0x1d74 <__fixunssfsi+0x46>
    1d50:	b1 30       	cpi	r27, 0x01	; 1
    1d52:	81 f0       	breq	.+32     	; 0x1d74 <__fixunssfsi+0x46>
    1d54:	c3 d0       	rcall	.+390    	; 0x1edc <__fp_zero>
    1d56:	b1 e0       	ldi	r27, 0x01	; 1
    1d58:	08 95       	ret
    1d5a:	c0 c0       	rjmp	.+384    	; 0x1edc <__fp_zero>
    1d5c:	67 2f       	mov	r22, r23
    1d5e:	78 2f       	mov	r23, r24
    1d60:	88 27       	eor	r24, r24
    1d62:	b8 5f       	subi	r27, 0xF8	; 248
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <__fixunssfsi+0x46>
    1d66:	b9 3f       	cpi	r27, 0xF9	; 249
    1d68:	cc f3       	brlt	.-14     	; 0x1d5c <__fixunssfsi+0x2e>
    1d6a:	86 95       	lsr	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	b3 95       	inc	r27
    1d72:	d9 f7       	brne	.-10     	; 0x1d6a <__fixunssfsi+0x3c>
    1d74:	3e f4       	brtc	.+14     	; 0x1d84 <__fixunssfsi+0x56>
    1d76:	90 95       	com	r25
    1d78:	80 95       	com	r24
    1d7a:	70 95       	com	r23
    1d7c:	61 95       	neg	r22
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	08 95       	ret

00001d86 <__floatunsisf>:
    1d86:	e8 94       	clt
    1d88:	09 c0       	rjmp	.+18     	; 0x1d9c <__floatsisf+0x12>

00001d8a <__floatsisf>:
    1d8a:	97 fb       	bst	r25, 7
    1d8c:	3e f4       	brtc	.+14     	; 0x1d9c <__floatsisf+0x12>
    1d8e:	90 95       	com	r25
    1d90:	80 95       	com	r24
    1d92:	70 95       	com	r23
    1d94:	61 95       	neg	r22
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	99 23       	and	r25, r25
    1d9e:	a9 f0       	breq	.+42     	; 0x1dca <__floatsisf+0x40>
    1da0:	f9 2f       	mov	r31, r25
    1da2:	96 e9       	ldi	r25, 0x96	; 150
    1da4:	bb 27       	eor	r27, r27
    1da6:	93 95       	inc	r25
    1da8:	f6 95       	lsr	r31
    1daa:	87 95       	ror	r24
    1dac:	77 95       	ror	r23
    1dae:	67 95       	ror	r22
    1db0:	b7 95       	ror	r27
    1db2:	f1 11       	cpse	r31, r1
    1db4:	f8 cf       	rjmp	.-16     	; 0x1da6 <__floatsisf+0x1c>
    1db6:	fa f4       	brpl	.+62     	; 0x1df6 <__floatsisf+0x6c>
    1db8:	bb 0f       	add	r27, r27
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <__floatsisf+0x36>
    1dbc:	60 ff       	sbrs	r22, 0
    1dbe:	1b c0       	rjmp	.+54     	; 0x1df6 <__floatsisf+0x6c>
    1dc0:	6f 5f       	subi	r22, 0xFF	; 255
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	16 c0       	rjmp	.+44     	; 0x1df6 <__floatsisf+0x6c>
    1dca:	88 23       	and	r24, r24
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <__floatsisf+0x48>
    1dce:	96 e9       	ldi	r25, 0x96	; 150
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <__floatsisf+0x6a>
    1dd2:	77 23       	and	r23, r23
    1dd4:	21 f0       	breq	.+8      	; 0x1dde <__floatsisf+0x54>
    1dd6:	9e e8       	ldi	r25, 0x8E	; 142
    1dd8:	87 2f       	mov	r24, r23
    1dda:	76 2f       	mov	r23, r22
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <__floatsisf+0x5e>
    1dde:	66 23       	and	r22, r22
    1de0:	71 f0       	breq	.+28     	; 0x1dfe <__floatsisf+0x74>
    1de2:	96 e8       	ldi	r25, 0x86	; 134
    1de4:	86 2f       	mov	r24, r22
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	2a f0       	brmi	.+10     	; 0x1df6 <__floatsisf+0x6c>
    1dec:	9a 95       	dec	r25
    1dee:	66 0f       	add	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	88 1f       	adc	r24, r24
    1df4:	da f7       	brpl	.-10     	; 0x1dec <__floatsisf+0x62>
    1df6:	88 0f       	add	r24, r24
    1df8:	96 95       	lsr	r25
    1dfa:	87 95       	ror	r24
    1dfc:	97 f9       	bld	r25, 7
    1dfe:	08 95       	ret

00001e00 <__fp_cmp>:
    1e00:	99 0f       	add	r25, r25
    1e02:	00 08       	sbc	r0, r0
    1e04:	55 0f       	add	r21, r21
    1e06:	aa 0b       	sbc	r26, r26
    1e08:	e0 e8       	ldi	r30, 0x80	; 128
    1e0a:	fe ef       	ldi	r31, 0xFE	; 254
    1e0c:	16 16       	cp	r1, r22
    1e0e:	17 06       	cpc	r1, r23
    1e10:	e8 07       	cpc	r30, r24
    1e12:	f9 07       	cpc	r31, r25
    1e14:	c0 f0       	brcs	.+48     	; 0x1e46 <__fp_cmp+0x46>
    1e16:	12 16       	cp	r1, r18
    1e18:	13 06       	cpc	r1, r19
    1e1a:	e4 07       	cpc	r30, r20
    1e1c:	f5 07       	cpc	r31, r21
    1e1e:	98 f0       	brcs	.+38     	; 0x1e46 <__fp_cmp+0x46>
    1e20:	62 1b       	sub	r22, r18
    1e22:	73 0b       	sbc	r23, r19
    1e24:	84 0b       	sbc	r24, r20
    1e26:	95 0b       	sbc	r25, r21
    1e28:	39 f4       	brne	.+14     	; 0x1e38 <__fp_cmp+0x38>
    1e2a:	0a 26       	eor	r0, r26
    1e2c:	61 f0       	breq	.+24     	; 0x1e46 <__fp_cmp+0x46>
    1e2e:	23 2b       	or	r18, r19
    1e30:	24 2b       	or	r18, r20
    1e32:	25 2b       	or	r18, r21
    1e34:	21 f4       	brne	.+8      	; 0x1e3e <__fp_cmp+0x3e>
    1e36:	08 95       	ret
    1e38:	0a 26       	eor	r0, r26
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__fp_cmp+0x3e>
    1e3c:	a1 40       	sbci	r26, 0x01	; 1
    1e3e:	a6 95       	lsr	r26
    1e40:	8f ef       	ldi	r24, 0xFF	; 255
    1e42:	81 1d       	adc	r24, r1
    1e44:	81 1d       	adc	r24, r1
    1e46:	08 95       	ret

00001e48 <__fp_inf>:
    1e48:	97 f9       	bld	r25, 7
    1e4a:	9f 67       	ori	r25, 0x7F	; 127
    1e4c:	80 e8       	ldi	r24, 0x80	; 128
    1e4e:	70 e0       	ldi	r23, 0x00	; 0
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	08 95       	ret

00001e54 <__fp_nan>:
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	80 ec       	ldi	r24, 0xC0	; 192
    1e58:	08 95       	ret

00001e5a <__fp_pscA>:
    1e5a:	00 24       	eor	r0, r0
    1e5c:	0a 94       	dec	r0
    1e5e:	16 16       	cp	r1, r22
    1e60:	17 06       	cpc	r1, r23
    1e62:	18 06       	cpc	r1, r24
    1e64:	09 06       	cpc	r0, r25
    1e66:	08 95       	ret

00001e68 <__fp_pscB>:
    1e68:	00 24       	eor	r0, r0
    1e6a:	0a 94       	dec	r0
    1e6c:	12 16       	cp	r1, r18
    1e6e:	13 06       	cpc	r1, r19
    1e70:	14 06       	cpc	r1, r20
    1e72:	05 06       	cpc	r0, r21
    1e74:	08 95       	ret

00001e76 <__fp_round>:
    1e76:	09 2e       	mov	r0, r25
    1e78:	03 94       	inc	r0
    1e7a:	00 0c       	add	r0, r0
    1e7c:	11 f4       	brne	.+4      	; 0x1e82 <__fp_round+0xc>
    1e7e:	88 23       	and	r24, r24
    1e80:	52 f0       	brmi	.+20     	; 0x1e96 <__fp_round+0x20>
    1e82:	bb 0f       	add	r27, r27
    1e84:	40 f4       	brcc	.+16     	; 0x1e96 <__fp_round+0x20>
    1e86:	bf 2b       	or	r27, r31
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <__fp_round+0x18>
    1e8a:	60 ff       	sbrs	r22, 0
    1e8c:	04 c0       	rjmp	.+8      	; 0x1e96 <__fp_round+0x20>
    1e8e:	6f 5f       	subi	r22, 0xFF	; 255
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	8f 4f       	sbci	r24, 0xFF	; 255
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	08 95       	ret

00001e98 <__fp_split3>:
    1e98:	57 fd       	sbrc	r21, 7
    1e9a:	90 58       	subi	r25, 0x80	; 128
    1e9c:	44 0f       	add	r20, r20
    1e9e:	55 1f       	adc	r21, r21
    1ea0:	59 f0       	breq	.+22     	; 0x1eb8 <__fp_splitA+0x10>
    1ea2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea4:	71 f0       	breq	.+28     	; 0x1ec2 <__fp_splitA+0x1a>
    1ea6:	47 95       	ror	r20

00001ea8 <__fp_splitA>:
    1ea8:	88 0f       	add	r24, r24
    1eaa:	97 fb       	bst	r25, 7
    1eac:	99 1f       	adc	r25, r25
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <__fp_splitA+0x20>
    1eb0:	9f 3f       	cpi	r25, 0xFF	; 255
    1eb2:	79 f0       	breq	.+30     	; 0x1ed2 <__fp_splitA+0x2a>
    1eb4:	87 95       	ror	r24
    1eb6:	08 95       	ret
    1eb8:	12 16       	cp	r1, r18
    1eba:	13 06       	cpc	r1, r19
    1ebc:	14 06       	cpc	r1, r20
    1ebe:	55 1f       	adc	r21, r21
    1ec0:	f2 cf       	rjmp	.-28     	; 0x1ea6 <__fp_split3+0xe>
    1ec2:	46 95       	lsr	r20
    1ec4:	f1 df       	rcall	.-30     	; 0x1ea8 <__fp_splitA>
    1ec6:	08 c0       	rjmp	.+16     	; 0x1ed8 <__fp_splitA+0x30>
    1ec8:	16 16       	cp	r1, r22
    1eca:	17 06       	cpc	r1, r23
    1ecc:	18 06       	cpc	r1, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	f1 cf       	rjmp	.-30     	; 0x1eb4 <__fp_splitA+0xc>
    1ed2:	86 95       	lsr	r24
    1ed4:	71 05       	cpc	r23, r1
    1ed6:	61 05       	cpc	r22, r1
    1ed8:	08 94       	sec
    1eda:	08 95       	ret

00001edc <__fp_zero>:
    1edc:	e8 94       	clt

00001ede <__fp_szero>:
    1ede:	bb 27       	eor	r27, r27
    1ee0:	66 27       	eor	r22, r22
    1ee2:	77 27       	eor	r23, r23
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	97 f9       	bld	r25, 7
    1ee8:	08 95       	ret

00001eea <log10>:
    1eea:	0a d0       	rcall	.+20     	; 0x1f00 <log>
    1eec:	29 ed       	ldi	r18, 0xD9	; 217
    1eee:	3b e5       	ldi	r19, 0x5B	; 91
    1ef0:	4e ed       	ldi	r20, 0xDE	; 222
    1ef2:	5e e3       	ldi	r21, 0x3E	; 62
    1ef4:	45 c0       	rjmp	.+138    	; 0x1f80 <__mulsf3>
    1ef6:	0e f0       	brts	.+2      	; 0x1efa <log10+0x10>
    1ef8:	23 c1       	rjmp	.+582    	; 0x2140 <__fp_mpack>
    1efa:	ac cf       	rjmp	.-168    	; 0x1e54 <__fp_nan>
    1efc:	68 94       	set
    1efe:	a4 cf       	rjmp	.-184    	; 0x1e48 <__fp_inf>

00001f00 <log>:
    1f00:	d3 df       	rcall	.-90     	; 0x1ea8 <__fp_splitA>
    1f02:	c8 f3       	brcs	.-14     	; 0x1ef6 <log10+0xc>
    1f04:	99 23       	and	r25, r25
    1f06:	d1 f3       	breq	.-12     	; 0x1efc <log10+0x12>
    1f08:	c6 f3       	brts	.-16     	; 0x1efa <log10+0x10>
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	1f 93       	push	r17
    1f10:	0f 93       	push	r16
    1f12:	ff 92       	push	r15
    1f14:	c9 2f       	mov	r28, r25
    1f16:	dd 27       	eor	r29, r29
    1f18:	88 23       	and	r24, r24
    1f1a:	2a f0       	brmi	.+10     	; 0x1f26 <log+0x26>
    1f1c:	21 97       	sbiw	r28, 0x01	; 1
    1f1e:	66 0f       	add	r22, r22
    1f20:	77 1f       	adc	r23, r23
    1f22:	88 1f       	adc	r24, r24
    1f24:	da f7       	brpl	.-10     	; 0x1f1c <log+0x1c>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f eb       	ldi	r21, 0xBF	; 191
    1f2e:	9f e3       	ldi	r25, 0x3F	; 63
    1f30:	88 39       	cpi	r24, 0x98	; 152
    1f32:	20 f0       	brcs	.+8      	; 0x1f3c <log+0x3c>
    1f34:	80 3e       	cpi	r24, 0xE0	; 224
    1f36:	30 f0       	brcs	.+12     	; 0x1f44 <log+0x44>
    1f38:	21 96       	adiw	r28, 0x01	; 1
    1f3a:	8f 77       	andi	r24, 0x7F	; 127
    1f3c:	23 de       	rcall	.-954    	; 0x1b84 <__addsf3>
    1f3e:	e4 e5       	ldi	r30, 0x54	; 84
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <log+0x4a>
    1f44:	1f de       	rcall	.-962    	; 0x1b84 <__addsf3>
    1f46:	e1 e8       	ldi	r30, 0x81	; 129
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	08 d1       	rcall	.+528    	; 0x215c <__fp_powser>
    1f4c:	8b 01       	movw	r16, r22
    1f4e:	be 01       	movw	r22, r28
    1f50:	ec 01       	movw	r28, r24
    1f52:	fb 2e       	mov	r15, r27
    1f54:	6f 57       	subi	r22, 0x7F	; 127
    1f56:	71 09       	sbc	r23, r1
    1f58:	75 95       	asr	r23
    1f5a:	77 1f       	adc	r23, r23
    1f5c:	88 0b       	sbc	r24, r24
    1f5e:	99 0b       	sbc	r25, r25
    1f60:	14 df       	rcall	.-472    	; 0x1d8a <__floatsisf>
    1f62:	28 e1       	ldi	r18, 0x18	; 24
    1f64:	32 e7       	ldi	r19, 0x72	; 114
    1f66:	41 e3       	ldi	r20, 0x31	; 49
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	16 d0       	rcall	.+44     	; 0x1f98 <__mulsf3x>
    1f6c:	af 2d       	mov	r26, r15
    1f6e:	98 01       	movw	r18, r16
    1f70:	ae 01       	movw	r20, r28
    1f72:	ff 90       	pop	r15
    1f74:	0f 91       	pop	r16
    1f76:	1f 91       	pop	r17
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	14 de       	rcall	.-984    	; 0x1ba6 <__addsf3x>
    1f7e:	7b cf       	rjmp	.-266    	; 0x1e76 <__fp_round>

00001f80 <__mulsf3>:
    1f80:	0b d0       	rcall	.+22     	; 0x1f98 <__mulsf3x>
    1f82:	79 cf       	rjmp	.-270    	; 0x1e76 <__fp_round>
    1f84:	6a df       	rcall	.-300    	; 0x1e5a <__fp_pscA>
    1f86:	28 f0       	brcs	.+10     	; 0x1f92 <__mulsf3+0x12>
    1f88:	6f df       	rcall	.-290    	; 0x1e68 <__fp_pscB>
    1f8a:	18 f0       	brcs	.+6      	; 0x1f92 <__mulsf3+0x12>
    1f8c:	95 23       	and	r25, r21
    1f8e:	09 f0       	breq	.+2      	; 0x1f92 <__mulsf3+0x12>
    1f90:	5b cf       	rjmp	.-330    	; 0x1e48 <__fp_inf>
    1f92:	60 cf       	rjmp	.-320    	; 0x1e54 <__fp_nan>
    1f94:	11 24       	eor	r1, r1
    1f96:	a3 cf       	rjmp	.-186    	; 0x1ede <__fp_szero>

00001f98 <__mulsf3x>:
    1f98:	7f df       	rcall	.-258    	; 0x1e98 <__fp_split3>
    1f9a:	a0 f3       	brcs	.-24     	; 0x1f84 <__mulsf3+0x4>

00001f9c <__mulsf3_pse>:
    1f9c:	95 9f       	mul	r25, r21
    1f9e:	d1 f3       	breq	.-12     	; 0x1f94 <__mulsf3+0x14>
    1fa0:	95 0f       	add	r25, r21
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	55 1f       	adc	r21, r21
    1fa6:	62 9f       	mul	r22, r18
    1fa8:	f0 01       	movw	r30, r0
    1faa:	72 9f       	mul	r23, r18
    1fac:	bb 27       	eor	r27, r27
    1fae:	f0 0d       	add	r31, r0
    1fb0:	b1 1d       	adc	r27, r1
    1fb2:	63 9f       	mul	r22, r19
    1fb4:	aa 27       	eor	r26, r26
    1fb6:	f0 0d       	add	r31, r0
    1fb8:	b1 1d       	adc	r27, r1
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	64 9f       	mul	r22, r20
    1fbe:	66 27       	eor	r22, r22
    1fc0:	b0 0d       	add	r27, r0
    1fc2:	a1 1d       	adc	r26, r1
    1fc4:	66 1f       	adc	r22, r22
    1fc6:	82 9f       	mul	r24, r18
    1fc8:	22 27       	eor	r18, r18
    1fca:	b0 0d       	add	r27, r0
    1fcc:	a1 1d       	adc	r26, r1
    1fce:	62 1f       	adc	r22, r18
    1fd0:	73 9f       	mul	r23, r19
    1fd2:	b0 0d       	add	r27, r0
    1fd4:	a1 1d       	adc	r26, r1
    1fd6:	62 1f       	adc	r22, r18
    1fd8:	83 9f       	mul	r24, r19
    1fda:	a0 0d       	add	r26, r0
    1fdc:	61 1d       	adc	r22, r1
    1fde:	22 1f       	adc	r18, r18
    1fe0:	74 9f       	mul	r23, r20
    1fe2:	33 27       	eor	r19, r19
    1fe4:	a0 0d       	add	r26, r0
    1fe6:	61 1d       	adc	r22, r1
    1fe8:	23 1f       	adc	r18, r19
    1fea:	84 9f       	mul	r24, r20
    1fec:	60 0d       	add	r22, r0
    1fee:	21 1d       	adc	r18, r1
    1ff0:	82 2f       	mov	r24, r18
    1ff2:	76 2f       	mov	r23, r22
    1ff4:	6a 2f       	mov	r22, r26
    1ff6:	11 24       	eor	r1, r1
    1ff8:	9f 57       	subi	r25, 0x7F	; 127
    1ffa:	50 40       	sbci	r21, 0x00	; 0
    1ffc:	8a f0       	brmi	.+34     	; 0x2020 <__mulsf3_pse+0x84>
    1ffe:	e1 f0       	breq	.+56     	; 0x2038 <__mulsf3_pse+0x9c>
    2000:	88 23       	and	r24, r24
    2002:	4a f0       	brmi	.+18     	; 0x2016 <__mulsf3_pse+0x7a>
    2004:	ee 0f       	add	r30, r30
    2006:	ff 1f       	adc	r31, r31
    2008:	bb 1f       	adc	r27, r27
    200a:	66 1f       	adc	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	91 50       	subi	r25, 0x01	; 1
    2012:	50 40       	sbci	r21, 0x00	; 0
    2014:	a9 f7       	brne	.-22     	; 0x2000 <__mulsf3_pse+0x64>
    2016:	9e 3f       	cpi	r25, 0xFE	; 254
    2018:	51 05       	cpc	r21, r1
    201a:	70 f0       	brcs	.+28     	; 0x2038 <__mulsf3_pse+0x9c>
    201c:	15 cf       	rjmp	.-470    	; 0x1e48 <__fp_inf>
    201e:	5f cf       	rjmp	.-322    	; 0x1ede <__fp_szero>
    2020:	5f 3f       	cpi	r21, 0xFF	; 255
    2022:	ec f3       	brlt	.-6      	; 0x201e <__mulsf3_pse+0x82>
    2024:	98 3e       	cpi	r25, 0xE8	; 232
    2026:	dc f3       	brlt	.-10     	; 0x201e <__mulsf3_pse+0x82>
    2028:	86 95       	lsr	r24
    202a:	77 95       	ror	r23
    202c:	67 95       	ror	r22
    202e:	b7 95       	ror	r27
    2030:	f7 95       	ror	r31
    2032:	e7 95       	ror	r30
    2034:	9f 5f       	subi	r25, 0xFF	; 255
    2036:	c1 f7       	brne	.-16     	; 0x2028 <__mulsf3_pse+0x8c>
    2038:	fe 2b       	or	r31, r30
    203a:	88 0f       	add	r24, r24
    203c:	91 1d       	adc	r25, r1
    203e:	96 95       	lsr	r25
    2040:	87 95       	ror	r24
    2042:	97 f9       	bld	r25, 7
    2044:	08 95       	ret

00002046 <pow>:
    2046:	fa 01       	movw	r30, r20
    2048:	ee 0f       	add	r30, r30
    204a:	ff 1f       	adc	r31, r31
    204c:	30 96       	adiw	r30, 0x00	; 0
    204e:	21 05       	cpc	r18, r1
    2050:	31 05       	cpc	r19, r1
    2052:	99 f1       	breq	.+102    	; 0x20ba <pow+0x74>
    2054:	61 15       	cp	r22, r1
    2056:	71 05       	cpc	r23, r1
    2058:	61 f4       	brne	.+24     	; 0x2072 <pow+0x2c>
    205a:	80 38       	cpi	r24, 0x80	; 128
    205c:	bf e3       	ldi	r27, 0x3F	; 63
    205e:	9b 07       	cpc	r25, r27
    2060:	49 f1       	breq	.+82     	; 0x20b4 <pow+0x6e>
    2062:	68 94       	set
    2064:	90 38       	cpi	r25, 0x80	; 128
    2066:	81 05       	cpc	r24, r1
    2068:	61 f0       	breq	.+24     	; 0x2082 <pow+0x3c>
    206a:	80 38       	cpi	r24, 0x80	; 128
    206c:	bf ef       	ldi	r27, 0xFF	; 255
    206e:	9b 07       	cpc	r25, r27
    2070:	41 f0       	breq	.+16     	; 0x2082 <pow+0x3c>
    2072:	99 23       	and	r25, r25
    2074:	42 f5       	brpl	.+80     	; 0x20c6 <pow+0x80>
    2076:	ff 3f       	cpi	r31, 0xFF	; 255
    2078:	e1 05       	cpc	r30, r1
    207a:	31 05       	cpc	r19, r1
    207c:	21 05       	cpc	r18, r1
    207e:	11 f1       	breq	.+68     	; 0x20c4 <pow+0x7e>
    2080:	e8 94       	clt
    2082:	08 94       	sec
    2084:	e7 95       	ror	r30
    2086:	d9 01       	movw	r26, r18
    2088:	aa 23       	and	r26, r26
    208a:	29 f4       	brne	.+10     	; 0x2096 <pow+0x50>
    208c:	ab 2f       	mov	r26, r27
    208e:	be 2f       	mov	r27, r30
    2090:	f8 5f       	subi	r31, 0xF8	; 248
    2092:	d0 f3       	brcs	.-12     	; 0x2088 <pow+0x42>
    2094:	10 c0       	rjmp	.+32     	; 0x20b6 <pow+0x70>
    2096:	ff 5f       	subi	r31, 0xFF	; 255
    2098:	70 f4       	brcc	.+28     	; 0x20b6 <pow+0x70>
    209a:	a6 95       	lsr	r26
    209c:	e0 f7       	brcc	.-8      	; 0x2096 <pow+0x50>
    209e:	f7 39       	cpi	r31, 0x97	; 151
    20a0:	50 f0       	brcs	.+20     	; 0x20b6 <pow+0x70>
    20a2:	19 f0       	breq	.+6      	; 0x20aa <pow+0x64>
    20a4:	ff 3a       	cpi	r31, 0xAF	; 175
    20a6:	38 f4       	brcc	.+14     	; 0x20b6 <pow+0x70>
    20a8:	9f 77       	andi	r25, 0x7F	; 127
    20aa:	9f 93       	push	r25
    20ac:	0c d0       	rcall	.+24     	; 0x20c6 <pow+0x80>
    20ae:	0f 90       	pop	r0
    20b0:	07 fc       	sbrc	r0, 7
    20b2:	90 58       	subi	r25, 0x80	; 128
    20b4:	08 95       	ret
    20b6:	3e f0       	brts	.+14     	; 0x20c6 <pow+0x80>
    20b8:	cd ce       	rjmp	.-614    	; 0x1e54 <__fp_nan>
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	80 e8       	ldi	r24, 0x80	; 128
    20c0:	9f e3       	ldi	r25, 0x3F	; 63
    20c2:	08 95       	ret
    20c4:	4f e7       	ldi	r20, 0x7F	; 127
    20c6:	9f 77       	andi	r25, 0x7F	; 127
    20c8:	5f 93       	push	r21
    20ca:	4f 93       	push	r20
    20cc:	3f 93       	push	r19
    20ce:	2f 93       	push	r18
    20d0:	17 df       	rcall	.-466    	; 0x1f00 <log>
    20d2:	2f 91       	pop	r18
    20d4:	3f 91       	pop	r19
    20d6:	4f 91       	pop	r20
    20d8:	5f 91       	pop	r21
    20da:	52 df       	rcall	.-348    	; 0x1f80 <__mulsf3>
    20dc:	05 c0       	rjmp	.+10     	; 0x20e8 <exp>
    20de:	19 f4       	brne	.+6      	; 0x20e6 <pow+0xa0>
    20e0:	0e f0       	brts	.+2      	; 0x20e4 <pow+0x9e>
    20e2:	b2 ce       	rjmp	.-668    	; 0x1e48 <__fp_inf>
    20e4:	fb ce       	rjmp	.-522    	; 0x1edc <__fp_zero>
    20e6:	b6 ce       	rjmp	.-660    	; 0x1e54 <__fp_nan>

000020e8 <exp>:
    20e8:	df de       	rcall	.-578    	; 0x1ea8 <__fp_splitA>
    20ea:	c8 f3       	brcs	.-14     	; 0x20de <pow+0x98>
    20ec:	96 38       	cpi	r25, 0x86	; 134
    20ee:	c0 f7       	brcc	.-16     	; 0x20e0 <pow+0x9a>
    20f0:	07 f8       	bld	r0, 7
    20f2:	0f 92       	push	r0
    20f4:	e8 94       	clt
    20f6:	2b e3       	ldi	r18, 0x3B	; 59
    20f8:	3a ea       	ldi	r19, 0xAA	; 170
    20fa:	48 eb       	ldi	r20, 0xB8	; 184
    20fc:	5f e7       	ldi	r21, 0x7F	; 127
    20fe:	4e df       	rcall	.-356    	; 0x1f9c <__mulsf3_pse>
    2100:	0f 92       	push	r0
    2102:	0f 92       	push	r0
    2104:	0f 92       	push	r0
    2106:	4d b7       	in	r20, 0x3d	; 61
    2108:	5e b7       	in	r21, 0x3e	; 62
    210a:	0f 92       	push	r0
    210c:	89 d0       	rcall	.+274    	; 0x2220 <modf>
    210e:	ee ea       	ldi	r30, 0xAE	; 174
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	24 d0       	rcall	.+72     	; 0x215c <__fp_powser>
    2114:	4f 91       	pop	r20
    2116:	5f 91       	pop	r21
    2118:	ef 91       	pop	r30
    211a:	ff 91       	pop	r31
    211c:	e5 95       	asr	r30
    211e:	ee 1f       	adc	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	49 f0       	breq	.+18     	; 0x2136 <exp+0x4e>
    2124:	fe 57       	subi	r31, 0x7E	; 126
    2126:	e0 68       	ori	r30, 0x80	; 128
    2128:	44 27       	eor	r20, r20
    212a:	ee 0f       	add	r30, r30
    212c:	44 1f       	adc	r20, r20
    212e:	fa 95       	dec	r31
    2130:	e1 f7       	brne	.-8      	; 0x212a <exp+0x42>
    2132:	41 95       	neg	r20
    2134:	55 0b       	sbc	r21, r21
    2136:	40 d0       	rcall	.+128    	; 0x21b8 <ldexp>
    2138:	0f 90       	pop	r0
    213a:	07 fe       	sbrs	r0, 7
    213c:	34 c0       	rjmp	.+104    	; 0x21a6 <inverse>
    213e:	08 95       	ret

00002140 <__fp_mpack>:
    2140:	9f 3f       	cpi	r25, 0xFF	; 255
    2142:	31 f0       	breq	.+12     	; 0x2150 <__fp_mpack_finite+0xc>

00002144 <__fp_mpack_finite>:
    2144:	91 50       	subi	r25, 0x01	; 1
    2146:	20 f4       	brcc	.+8      	; 0x2150 <__fp_mpack_finite+0xc>
    2148:	87 95       	ror	r24
    214a:	77 95       	ror	r23
    214c:	67 95       	ror	r22
    214e:	b7 95       	ror	r27
    2150:	88 0f       	add	r24, r24
    2152:	91 1d       	adc	r25, r1
    2154:	96 95       	lsr	r25
    2156:	87 95       	ror	r24
    2158:	97 f9       	bld	r25, 7
    215a:	08 95       	ret

0000215c <__fp_powser>:
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	1f 93       	push	r17
    2162:	0f 93       	push	r16
    2164:	ff 92       	push	r15
    2166:	ef 92       	push	r14
    2168:	df 92       	push	r13
    216a:	7b 01       	movw	r14, r22
    216c:	8c 01       	movw	r16, r24
    216e:	68 94       	set
    2170:	05 c0       	rjmp	.+10     	; 0x217c <__fp_powser+0x20>
    2172:	da 2e       	mov	r13, r26
    2174:	ef 01       	movw	r28, r30
    2176:	10 df       	rcall	.-480    	; 0x1f98 <__mulsf3x>
    2178:	fe 01       	movw	r30, r28
    217a:	e8 94       	clt
    217c:	a5 91       	lpm	r26, Z+
    217e:	25 91       	lpm	r18, Z+
    2180:	35 91       	lpm	r19, Z+
    2182:	45 91       	lpm	r20, Z+
    2184:	55 91       	lpm	r21, Z+
    2186:	ae f3       	brts	.-22     	; 0x2172 <__fp_powser+0x16>
    2188:	ef 01       	movw	r28, r30
    218a:	0d dd       	rcall	.-1510   	; 0x1ba6 <__addsf3x>
    218c:	fe 01       	movw	r30, r28
    218e:	97 01       	movw	r18, r14
    2190:	a8 01       	movw	r20, r16
    2192:	da 94       	dec	r13
    2194:	79 f7       	brne	.-34     	; 0x2174 <__fp_powser+0x18>
    2196:	df 90       	pop	r13
    2198:	ef 90       	pop	r14
    219a:	ff 90       	pop	r15
    219c:	0f 91       	pop	r16
    219e:	1f 91       	pop	r17
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <inverse>:
    21a6:	9b 01       	movw	r18, r22
    21a8:	ac 01       	movw	r20, r24
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	70 e0       	ldi	r23, 0x00	; 0
    21ae:	80 e8       	ldi	r24, 0x80	; 128
    21b0:	9f e3       	ldi	r25, 0x3F	; 63
    21b2:	50 cd       	rjmp	.-1376   	; 0x1c54 <__divsf3>
    21b4:	49 ce       	rjmp	.-878    	; 0x1e48 <__fp_inf>
    21b6:	c4 cf       	rjmp	.-120    	; 0x2140 <__fp_mpack>

000021b8 <ldexp>:
    21b8:	77 de       	rcall	.-786    	; 0x1ea8 <__fp_splitA>
    21ba:	e8 f3       	brcs	.-6      	; 0x21b6 <inverse+0x10>
    21bc:	99 23       	and	r25, r25
    21be:	d9 f3       	breq	.-10     	; 0x21b6 <inverse+0x10>
    21c0:	94 0f       	add	r25, r20
    21c2:	51 1d       	adc	r21, r1
    21c4:	bb f3       	brvs	.-18     	; 0x21b4 <inverse+0xe>
    21c6:	91 50       	subi	r25, 0x01	; 1
    21c8:	50 40       	sbci	r21, 0x00	; 0
    21ca:	94 f0       	brlt	.+36     	; 0x21f0 <ldexp+0x38>
    21cc:	59 f0       	breq	.+22     	; 0x21e4 <ldexp+0x2c>
    21ce:	88 23       	and	r24, r24
    21d0:	32 f0       	brmi	.+12     	; 0x21de <ldexp+0x26>
    21d2:	66 0f       	add	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	88 1f       	adc	r24, r24
    21d8:	91 50       	subi	r25, 0x01	; 1
    21da:	50 40       	sbci	r21, 0x00	; 0
    21dc:	c1 f7       	brne	.-16     	; 0x21ce <ldexp+0x16>
    21de:	9e 3f       	cpi	r25, 0xFE	; 254
    21e0:	51 05       	cpc	r21, r1
    21e2:	44 f7       	brge	.-48     	; 0x21b4 <inverse+0xe>
    21e4:	88 0f       	add	r24, r24
    21e6:	91 1d       	adc	r25, r1
    21e8:	96 95       	lsr	r25
    21ea:	87 95       	ror	r24
    21ec:	97 f9       	bld	r25, 7
    21ee:	08 95       	ret
    21f0:	5f 3f       	cpi	r21, 0xFF	; 255
    21f2:	ac f0       	brlt	.+42     	; 0x221e <ldexp+0x66>
    21f4:	98 3e       	cpi	r25, 0xE8	; 232
    21f6:	9c f0       	brlt	.+38     	; 0x221e <ldexp+0x66>
    21f8:	bb 27       	eor	r27, r27
    21fa:	86 95       	lsr	r24
    21fc:	77 95       	ror	r23
    21fe:	67 95       	ror	r22
    2200:	b7 95       	ror	r27
    2202:	08 f4       	brcc	.+2      	; 0x2206 <ldexp+0x4e>
    2204:	b1 60       	ori	r27, 0x01	; 1
    2206:	93 95       	inc	r25
    2208:	c1 f7       	brne	.-16     	; 0x21fa <ldexp+0x42>
    220a:	bb 0f       	add	r27, r27
    220c:	58 f7       	brcc	.-42     	; 0x21e4 <ldexp+0x2c>
    220e:	11 f4       	brne	.+4      	; 0x2214 <ldexp+0x5c>
    2210:	60 ff       	sbrs	r22, 0
    2212:	e8 cf       	rjmp	.-48     	; 0x21e4 <ldexp+0x2c>
    2214:	6f 5f       	subi	r22, 0xFF	; 255
    2216:	7f 4f       	sbci	r23, 0xFF	; 255
    2218:	8f 4f       	sbci	r24, 0xFF	; 255
    221a:	9f 4f       	sbci	r25, 0xFF	; 255
    221c:	e3 cf       	rjmp	.-58     	; 0x21e4 <ldexp+0x2c>
    221e:	5f ce       	rjmp	.-834    	; 0x1ede <__fp_szero>

00002220 <modf>:
    2220:	fa 01       	movw	r30, r20
    2222:	dc 01       	movw	r26, r24
    2224:	aa 0f       	add	r26, r26
    2226:	bb 1f       	adc	r27, r27
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	bf 57       	subi	r27, 0x7F	; 127
    222e:	28 f4       	brcc	.+10     	; 0x223a <modf+0x1a>
    2230:	22 27       	eor	r18, r18
    2232:	33 27       	eor	r19, r19
    2234:	44 27       	eor	r20, r20
    2236:	50 78       	andi	r21, 0x80	; 128
    2238:	1f c0       	rjmp	.+62     	; 0x2278 <modf+0x58>
    223a:	b7 51       	subi	r27, 0x17	; 23
    223c:	88 f4       	brcc	.+34     	; 0x2260 <modf+0x40>
    223e:	ab 2f       	mov	r26, r27
    2240:	00 24       	eor	r0, r0
    2242:	46 95       	lsr	r20
    2244:	37 95       	ror	r19
    2246:	27 95       	ror	r18
    2248:	01 1c       	adc	r0, r1
    224a:	a3 95       	inc	r26
    224c:	d2 f3       	brmi	.-12     	; 0x2242 <modf+0x22>
    224e:	00 20       	and	r0, r0
    2250:	69 f0       	breq	.+26     	; 0x226c <modf+0x4c>
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	44 1f       	adc	r20, r20
    2258:	b3 95       	inc	r27
    225a:	da f3       	brmi	.-10     	; 0x2252 <modf+0x32>
    225c:	0d d0       	rcall	.+26     	; 0x2278 <modf+0x58>
    225e:	91 cc       	rjmp	.-1758   	; 0x1b82 <__subsf3>
    2260:	61 30       	cpi	r22, 0x01	; 1
    2262:	71 05       	cpc	r23, r1
    2264:	a0 e8       	ldi	r26, 0x80	; 128
    2266:	8a 07       	cpc	r24, r26
    2268:	b9 46       	sbci	r27, 0x69	; 105
    226a:	30 f4       	brcc	.+12     	; 0x2278 <modf+0x58>
    226c:	9b 01       	movw	r18, r22
    226e:	ac 01       	movw	r20, r24
    2270:	66 27       	eor	r22, r22
    2272:	77 27       	eor	r23, r23
    2274:	88 27       	eor	r24, r24
    2276:	90 78       	andi	r25, 0x80	; 128
    2278:	30 96       	adiw	r30, 0x00	; 0
    227a:	21 f0       	breq	.+8      	; 0x2284 <modf+0x64>
    227c:	20 83       	st	Z, r18
    227e:	31 83       	std	Z+1, r19	; 0x01
    2280:	42 83       	std	Z+2, r20	; 0x02
    2282:	53 83       	std	Z+3, r21	; 0x03
    2284:	08 95       	ret

00002286 <__udivmodqi4>:
    2286:	99 1b       	sub	r25, r25
    2288:	79 e0       	ldi	r23, 0x09	; 9
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__udivmodqi4_ep>

0000228c <__udivmodqi4_loop>:
    228c:	99 1f       	adc	r25, r25
    228e:	96 17       	cp	r25, r22
    2290:	08 f0       	brcs	.+2      	; 0x2294 <__udivmodqi4_ep>
    2292:	96 1b       	sub	r25, r22

00002294 <__udivmodqi4_ep>:
    2294:	88 1f       	adc	r24, r24
    2296:	7a 95       	dec	r23
    2298:	c9 f7       	brne	.-14     	; 0x228c <__udivmodqi4_loop>
    229a:	80 95       	com	r24
    229c:	08 95       	ret

0000229e <__divmodqi4>:
    229e:	87 fb       	bst	r24, 7
    22a0:	08 2e       	mov	r0, r24
    22a2:	06 26       	eor	r0, r22
    22a4:	87 fd       	sbrc	r24, 7
    22a6:	81 95       	neg	r24
    22a8:	67 fd       	sbrc	r22, 7
    22aa:	61 95       	neg	r22
    22ac:	ec df       	rcall	.-40     	; 0x2286 <__udivmodqi4>
    22ae:	0e f4       	brtc	.+2      	; 0x22b2 <__divmodqi4_1>
    22b0:	91 95       	neg	r25

000022b2 <__divmodqi4_1>:
    22b2:	07 fc       	sbrc	r0, 7
    22b4:	81 95       	neg	r24

000022b6 <__divmodqi4_exit>:
    22b6:	08 95       	ret

000022b8 <__udivmodhi4>:
    22b8:	aa 1b       	sub	r26, r26
    22ba:	bb 1b       	sub	r27, r27
    22bc:	51 e1       	ldi	r21, 0x11	; 17
    22be:	07 c0       	rjmp	.+14     	; 0x22ce <__udivmodhi4_ep>

000022c0 <__udivmodhi4_loop>:
    22c0:	aa 1f       	adc	r26, r26
    22c2:	bb 1f       	adc	r27, r27
    22c4:	a6 17       	cp	r26, r22
    22c6:	b7 07       	cpc	r27, r23
    22c8:	10 f0       	brcs	.+4      	; 0x22ce <__udivmodhi4_ep>
    22ca:	a6 1b       	sub	r26, r22
    22cc:	b7 0b       	sbc	r27, r23

000022ce <__udivmodhi4_ep>:
    22ce:	88 1f       	adc	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	5a 95       	dec	r21
    22d4:	a9 f7       	brne	.-22     	; 0x22c0 <__udivmodhi4_loop>
    22d6:	80 95       	com	r24
    22d8:	90 95       	com	r25
    22da:	bc 01       	movw	r22, r24
    22dc:	cd 01       	movw	r24, r26
    22de:	08 95       	ret

000022e0 <__divmodhi4>:
    22e0:	97 fb       	bst	r25, 7
    22e2:	09 2e       	mov	r0, r25
    22e4:	07 26       	eor	r0, r23
    22e6:	0a d0       	rcall	.+20     	; 0x22fc <__divmodhi4_neg1>
    22e8:	77 fd       	sbrc	r23, 7
    22ea:	04 d0       	rcall	.+8      	; 0x22f4 <__divmodhi4_neg2>
    22ec:	e5 df       	rcall	.-54     	; 0x22b8 <__udivmodhi4>
    22ee:	06 d0       	rcall	.+12     	; 0x22fc <__divmodhi4_neg1>
    22f0:	00 20       	and	r0, r0
    22f2:	1a f4       	brpl	.+6      	; 0x22fa <__divmodhi4_exit>

000022f4 <__divmodhi4_neg2>:
    22f4:	70 95       	com	r23
    22f6:	61 95       	neg	r22
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255

000022fa <__divmodhi4_exit>:
    22fa:	08 95       	ret

000022fc <__divmodhi4_neg1>:
    22fc:	f6 f7       	brtc	.-4      	; 0x22fa <__divmodhi4_exit>
    22fe:	90 95       	com	r25
    2300:	81 95       	neg	r24
    2302:	9f 4f       	sbci	r25, 0xFF	; 255
    2304:	08 95       	ret

00002306 <_exit>:
    2306:	f8 94       	cli

00002308 <__stop_program>:
    2308:	ff cf       	rjmp	.-2      	; 0x2308 <__stop_program>
